// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto {

  /// <summary>Holder for reflection information generated from data.proto</summary>
  public static partial class DataReflection {

    #region Descriptor
    /// <summary>File descriptor for data.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpkYXRhLnByb3RvEgVQcm90bxoLY29uc3QucHJvdG8aEGV4Y2VsY29uc3Qu",
            "cHJvdG8iKgoHVmVjdG9yMxIJCgF4GAEgASgCEgkKAXkYAiABKAISCQoBehgD",
            "IAEoAiKlAQoOR2FtZVNlcnZlckluZm8SDAoEaG9zdBgCIAEoCRIMCgRwb3J0",
            "GAMgASgFEhEKCXNlcnZlcl9pZBgEIAEoBRIYChBtYXhfcGxheWVyX0NvdW50",
            "GAUgASgFEhwKFGN1cnJlbnRfcGxheWVyX2NvdW50GAYgASgFEhUKDXNlcnZp",
            "Y2VzX2hvc3QYByABKAkSFQoNc2VydmljZXNfcG9ydBgIIAEoBSJNCglXZWFy",
            "RXF1aXASDgoGSXRlbUlEGAEgASgFEgwKBEdVSUQYAiABKAkSIgoEUGFydBgD",
            "IAEoDjIULlByb3RvLkVxdWlwbWVudFR5cGUiLAoJSGVyb01hZ2ljEhAKCE1h",
            "Z2ljS2V5GAEgASgFEg0KBUxldmVsGAIgASgFIqIBCgVESGVybxIOCgZIZXJv",
            "SUQYASABKAUSDQoFTGV2ZWwYAiABKAUSEAoIRXhwcmljZXMYAyABKAUSIAoG",
            "RXF1aXBzGAQgAygLMhAuUHJvdG8uV2VhckVxdWlwEiAKBk1hZ2ljcxgFIAMo",
            "CzIQLlByb3RvLkhlcm9NYWdpYxIMCgROYW1lGAYgASgJEgoKAkhQGAcgASgF",
            "EgoKAk1QGAggASgFIn0KCUVxdWlwRGF0YRITCgtSZWZyZXNoVGltZRgBIAEo",
            "BRIsCgZWYWx1ZXMYAiADKAsyHC5Qcm90by5FcXVpcERhdGEuVmFsdWVzRW50",
            "cnkaLQoLVmFsdWVzRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgF",
            "OgI4ASJ2CgpQbGF5ZXJJdGVtEg4KBkl0ZW1JRBgBIAEoBRILCgNOdW0YAiAB",
            "KAUSDAoER1VJRBgDIAEoCRIOCgZMb2NrZWQYBCABKAgSDQoFTGV2ZWwYBSAB",
            "KAUSHgoERGF0YRgGIAEoCzIQLlByb3RvLkVxdWlwRGF0YSKRAQoNUGxheWVy",
            "UGFja2FnZRIuCgVJdGVtcxgBIAMoCzIfLlByb3RvLlBsYXllclBhY2thZ2Uu",
            "SXRlbXNFbnRyeRIPCgdNYXhTaXplGAIgASgFGj8KCkl0ZW1zRW50cnkSCwoD",
            "a2V5GAEgASgJEiAKBXZhbHVlGAIgASgLMhEuUHJvdG8uUGxheWVySXRlbToC",
            "OAEiYwoQUGxheWVyU2VydmVySW5mbxITCgtBY2NvdW50VXVpZBgBIAEoCRIQ",
            "CghTZXJ2ZXJJRBgCIAEoBRITCgtTZXJ2aWNlUG9ydBgDIAEoBRITCgtTZXJ2",
            "aWNlSG9zdBgEIAEoCSJICgxIZXJvUHJvcGVydHkSKQoIUHJvcGVydHkYASAB",
            "KA4yFy5Qcm90by5IZXJvUHJvcGVydHlUeXBlEg0KBVZhbHVlGAIgASgFIlEK",
            "DUhlcm9NYWdpY0RhdGESDgoGQ0RUaW1lGAEgASgCEg8KB01hZ2ljSUQYAiAB",
            "KAUSHwoFTVR5cGUYAyABKA4yEC5Qcm90by5NYWdpY1R5cGUiQAoMQ2xpZW50",
            "Q29uZmlnEhcKD0xvZ2luU2VydmVySG9zdBgBIAEoCRIXCg9Mb2dpblNlcnZl",
            "clBvcnQYAiABKAUikQEKEkJhdHRsZVNlcnZlckNvbmZpZxINCgVMZXZlbBgB",
            "IAEoBRIRCglNYXhQbGF5ZXIYAiABKAUSEgoKTGlzdGVuUG9ydBgDIAEoBRIS",
            "CgpMaXN0ZW5Ib3N0GAQgASgJEhcKD0xvZ2luU2VydmVyUG9ydBgFIAEoBRIY",
            "ChBMb2dpblNlcnZpY2VIb3N0GAYgASgJKj4KCU1hZ2ljVHlwZRINCglNVF9O",
            "b3JtYWwQABIUChBNVF9Ob3JtYWxfQXBwZW5kEAESDAoITVRfTWFnaWMQAipT",
            "ChBSZWxlYXNlck1vZGVUeXBlEgwKCFJNVF9OT05FEAASDQoJUk1UX01hZ2lj",
            "EAESFAoQUk1UX05vcm1hbEF0dGFjaxACEgwKCFJNVF9CdWZmEARiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto.ConstReflection.Descriptor, global::Proto.ExcelconstReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Proto.MagicType), typeof(global::Proto.ReleaserModeType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Vector3), global::Proto.Vector3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.GameServerInfo), global::Proto.GameServerInfo.Parser, new[]{ "Host", "Port", "ServerId", "MaxPlayerCount", "CurrentPlayerCount", "ServicesHost", "ServicesPort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.WearEquip), global::Proto.WearEquip.Parser, new[]{ "ItemID", "GUID", "Part" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.HeroMagic), global::Proto.HeroMagic.Parser, new[]{ "MagicKey", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.DHero), global::Proto.DHero.Parser, new[]{ "HeroID", "Level", "Exprices", "Equips", "Magics", "Name", "HP", "MP" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.EquipData), global::Proto.EquipData.Parser, new[]{ "RefreshTime", "Values" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.PlayerItem), global::Proto.PlayerItem.Parser, new[]{ "ItemID", "Num", "GUID", "Locked", "Level", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.PlayerPackage), global::Proto.PlayerPackage.Parser, new[]{ "Items", "MaxSize" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.PlayerServerInfo), global::Proto.PlayerServerInfo.Parser, new[]{ "AccountUuid", "ServerID", "ServicePort", "ServiceHost" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.HeroProperty), global::Proto.HeroProperty.Parser, new[]{ "Property", "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.HeroMagicData), global::Proto.HeroMagicData.Parser, new[]{ "CDTime", "MagicID", "MType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.ClientConfig), global::Proto.ClientConfig.Parser, new[]{ "LoginServerHost", "LoginServerPort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.BattleServerConfig), global::Proto.BattleServerConfig.Parser, new[]{ "Level", "MaxPlayer", "ListenPort", "ListenHost", "LoginServerPort", "LoginServiceHost" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MagicType {
    [pbr::OriginalName("MT_Normal")] MtNormal = 0,
    [pbr::OriginalName("MT_Normal_Append")] MtNormalAppend = 1,
    [pbr::OriginalName("MT_Magic")] MtMagic = 2,
  }

  public enum ReleaserModeType {
    [pbr::OriginalName("RMT_NONE")] RmtNone = 0,
    [pbr::OriginalName("RMT_Magic")] RmtMagic = 1,
    [pbr::OriginalName("RMT_NormalAttack")] RmtNormalAttack = 2,
    [pbr::OriginalName("RMT_Buff")] RmtBuff = 4,
  }

  #endregion

  #region Messages
  public sealed partial class Vector3 : pb::IMessage<Vector3> {
    private static readonly pb::MessageParser<Vector3> _parser = new pb::MessageParser<Vector3>(() => new Vector3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.DataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3(Vector3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vector3 Clone() {
      return new Vector3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vector3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vector3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Z != other.Z) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= X.GetHashCode();
      if (Y != 0F) hash ^= Y.GetHashCode();
      if (Z != 0F) hash ^= Z.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vector3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameServerInfo : pb::IMessage<GameServerInfo> {
    private static readonly pb::MessageParser<GameServerInfo> _parser = new pb::MessageParser<GameServerInfo>(() => new GameServerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameServerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.DataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerInfo(GameServerInfo other) : this() {
      host_ = other.host_;
      port_ = other.port_;
      serverId_ = other.serverId_;
      maxPlayerCount_ = other.maxPlayerCount_;
      currentPlayerCount_ = other.currentPlayerCount_;
      servicesHost_ = other.servicesHost_;
      servicesPort_ = other.servicesPort_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameServerInfo Clone() {
      return new GameServerInfo(this);
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 2;
    private string host_ = "";
    /// <summary>
    ///主机地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 3;
    private int port_;
    /// <summary>
    ///主机端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 4;
    private int serverId_;
    /// <summary>
    ///服务器ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "max_player_Count" field.</summary>
    public const int MaxPlayerCountFieldNumber = 5;
    private int maxPlayerCount_;
    /// <summary>
    ///最大服务数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPlayerCount {
      get { return maxPlayerCount_; }
      set {
        maxPlayerCount_ = value;
      }
    }

    /// <summary>Field number for the "current_player_count" field.</summary>
    public const int CurrentPlayerCountFieldNumber = 6;
    private int currentPlayerCount_;
    /// <summary>
    ///当前玩家数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPlayerCount {
      get { return currentPlayerCount_; }
      set {
        currentPlayerCount_ = value;
      }
    }

    /// <summary>Field number for the "services_host" field.</summary>
    public const int ServicesHostFieldNumber = 7;
    private string servicesHost_ = "";
    /// <summary>
    ///server request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServicesHost {
      get { return servicesHost_; }
      set {
        servicesHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "services_port" field.</summary>
    public const int ServicesPortFieldNumber = 8;
    private int servicesPort_;
    /// <summary>
    ///server request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServicesPort {
      get { return servicesPort_; }
      set {
        servicesPort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameServerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameServerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      if (ServerId != other.ServerId) return false;
      if (MaxPlayerCount != other.MaxPlayerCount) return false;
      if (CurrentPlayerCount != other.CurrentPlayerCount) return false;
      if (ServicesHost != other.ServicesHost) return false;
      if (ServicesPort != other.ServicesPort) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (MaxPlayerCount != 0) hash ^= MaxPlayerCount.GetHashCode();
      if (CurrentPlayerCount != 0) hash ^= CurrentPlayerCount.GetHashCode();
      if (ServicesHost.Length != 0) hash ^= ServicesHost.GetHashCode();
      if (ServicesPort != 0) hash ^= ServicesPort.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Host.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Port);
      }
      if (ServerId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ServerId);
      }
      if (MaxPlayerCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxPlayerCount);
      }
      if (CurrentPlayerCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CurrentPlayerCount);
      }
      if (ServicesHost.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ServicesHost);
      }
      if (ServicesPort != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ServicesPort);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (MaxPlayerCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPlayerCount);
      }
      if (CurrentPlayerCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPlayerCount);
      }
      if (ServicesHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServicesHost);
      }
      if (ServicesPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServicesPort);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameServerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.MaxPlayerCount != 0) {
        MaxPlayerCount = other.MaxPlayerCount;
      }
      if (other.CurrentPlayerCount != 0) {
        CurrentPlayerCount = other.CurrentPlayerCount;
      }
      if (other.ServicesHost.Length != 0) {
        ServicesHost = other.ServicesHost;
      }
      if (other.ServicesPort != 0) {
        ServicesPort = other.ServicesPort;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            Host = input.ReadString();
            break;
          }
          case 24: {
            Port = input.ReadInt32();
            break;
          }
          case 32: {
            ServerId = input.ReadInt32();
            break;
          }
          case 40: {
            MaxPlayerCount = input.ReadInt32();
            break;
          }
          case 48: {
            CurrentPlayerCount = input.ReadInt32();
            break;
          }
          case 58: {
            ServicesHost = input.ReadString();
            break;
          }
          case 64: {
            ServicesPort = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WearEquip : pb::IMessage<WearEquip> {
    private static readonly pb::MessageParser<WearEquip> _parser = new pb::MessageParser<WearEquip>(() => new WearEquip());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WearEquip> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.DataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WearEquip() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WearEquip(WearEquip other) : this() {
      itemID_ = other.itemID_;
      gUID_ = other.gUID_;
      part_ = other.part_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WearEquip Clone() {
      return new WearEquip(this);
    }

    /// <summary>Field number for the "ItemID" field.</summary>
    public const int ItemIDFieldNumber = 1;
    private int itemID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "GUID" field.</summary>
    public const int GUIDFieldNumber = 2;
    private string gUID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GUID {
      get { return gUID_; }
      set {
        gUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Part" field.</summary>
    public const int PartFieldNumber = 3;
    private global::Proto.EquipmentType part_ = 0;
    /// <summary>
    ///部位
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.EquipmentType Part {
      get { return part_; }
      set {
        part_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WearEquip);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WearEquip other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemID != other.ItemID) return false;
      if (GUID != other.GUID) return false;
      if (Part != other.Part) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemID != 0) hash ^= ItemID.GetHashCode();
      if (GUID.Length != 0) hash ^= GUID.GetHashCode();
      if (Part != 0) hash ^= Part.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemID);
      }
      if (GUID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GUID);
      }
      if (Part != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Part);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemID);
      }
      if (GUID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GUID);
      }
      if (Part != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Part);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WearEquip other) {
      if (other == null) {
        return;
      }
      if (other.ItemID != 0) {
        ItemID = other.ItemID;
      }
      if (other.GUID.Length != 0) {
        GUID = other.GUID;
      }
      if (other.Part != 0) {
        Part = other.Part;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemID = input.ReadInt32();
            break;
          }
          case 18: {
            GUID = input.ReadString();
            break;
          }
          case 24: {
            part_ = (global::Proto.EquipmentType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeroMagic : pb::IMessage<HeroMagic> {
    private static readonly pb::MessageParser<HeroMagic> _parser = new pb::MessageParser<HeroMagic>(() => new HeroMagic());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroMagic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.DataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroMagic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroMagic(HeroMagic other) : this() {
      magicKey_ = other.magicKey_;
      level_ = other.level_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroMagic Clone() {
      return new HeroMagic(this);
    }

    /// <summary>Field number for the "MagicKey" field.</summary>
    public const int MagicKeyFieldNumber = 1;
    private int magicKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicKey {
      get { return magicKey_; }
      set {
        magicKey_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    /// <summary>
    ///level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroMagic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroMagic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MagicKey != other.MagicKey) return false;
      if (Level != other.Level) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MagicKey != 0) hash ^= MagicKey.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MagicKey != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MagicKey);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MagicKey != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagicKey);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroMagic other) {
      if (other == null) {
        return;
      }
      if (other.MagicKey != 0) {
        MagicKey = other.MagicKey;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MagicKey = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家角色
  /// </summary>
  public sealed partial class DHero : pb::IMessage<DHero> {
    private static readonly pb::MessageParser<DHero> _parser = new pb::MessageParser<DHero>(() => new DHero());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DHero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.DataReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DHero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DHero(DHero other) : this() {
      heroID_ = other.heroID_;
      level_ = other.level_;
      exprices_ = other.exprices_;
      equips_ = other.equips_.Clone();
      magics_ = other.magics_.Clone();
      name_ = other.name_;
      hP_ = other.hP_;
      mP_ = other.mP_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DHero Clone() {
      return new DHero(this);
    }

    /// <summary>Field number for the "HeroID" field.</summary>
    public const int HeroIDFieldNumber = 1;
    private int heroID_;
    /// <summary>
    ///配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroID {
      get { return heroID_; }
      set {
        heroID_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    /// <summary>
    ///当前等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Exprices" field.</summary>
    public const int ExpricesFieldNumber = 3;
    private int exprices_;
    /// <summary>
    ///当前经验
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exprices {
      get { return exprices_; }
      set {
        exprices_ = value;
      }
    }

    /// <summary>Field number for the "Equips" field.</summary>
    public const int EquipsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Proto.WearEquip> _repeated_equips_codec
        = pb::FieldCodec.ForMessage(34, global::Proto.WearEquip.Parser);
    private readonly pbc::RepeatedField<global::Proto.WearEquip> equips_ = new pbc::RepeatedField<global::Proto.WearEquip>();
    /// <summary>
    ///当前穿戴装备
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.WearEquip> Equips {
      get { return equips_; }
    }

    /// <summary>Field number for the "Magics" field.</summary>
    public const int MagicsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Proto.HeroMagic> _repeated_magics_codec
        = pb::FieldCodec.ForMessage(42, global::Proto.HeroMagic.Parser);
    private readonly pbc::RepeatedField<global::Proto.HeroMagic> magics_ = new pbc::RepeatedField<global::Proto.HeroMagic>();
    /// <summary>
    ///英雄当前激活魔法
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.HeroMagic> Magics {
      get { return magics_; }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 6;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "HP" field.</summary>
    public const int HPFieldNumber = 7;
    private int hP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HP {
      get { return hP_; }
      set {
        hP_ = value;
      }
    }

    /// <summary>Field number for the "MP" field.</summary>
    public const int MPFieldNumber = 8;
    private int mP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MP {
      get { return mP_; }
      set {
        mP_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DHero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DHero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HeroID != other.HeroID) return false;
      if (Level != other.Level) return false;
      if (Exprices != other.Exprices) return false;
      if(!equips_.Equals(other.equips_)) return false;
      if(!magics_.Equals(other.magics_)) return false;
      if (Name != other.Name) return false;
      if (HP != other.HP) return false;
      if (MP != other.MP) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeroID != 0) hash ^= HeroID.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Exprices != 0) hash ^= Exprices.GetHashCode();
      hash ^= equips_.GetHashCode();
      hash ^= magics_.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (HP != 0) hash ^= HP.GetHashCode();
      if (MP != 0) hash ^= MP.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeroID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HeroID);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      if (Exprices != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Exprices);
      }
      equips_.WriteTo(output, _repeated_equips_codec);
      magics_.WriteTo(output, _repeated_magics_codec);
      if (Name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (HP != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(HP);
      }
      if (MP != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MP);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeroID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroID);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exprices != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exprices);
      }
      size += equips_.CalculateSize(_repeated_equips_codec);
      size += magics_.CalculateSize(_repeated_magics_codec);
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HP);
      }
      if (MP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MP);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DHero other) {
      if (other == null) {
        return;
      }
      if (other.HeroID != 0) {
        HeroID = other.HeroID;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Exprices != 0) {
        Exprices = other.Exprices;
      }
      equips_.Add(other.equips_);
      magics_.Add(other.magics_);
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.HP != 0) {
        HP = other.HP;
      }
      if (other.MP != 0) {
        MP = other.MP;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HeroID = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 24: {
            Exprices = input.ReadInt32();
            break;
          }
          case 34: {
            equips_.AddEntriesFrom(input, _repeated_equips_codec);
            break;
          }
          case 42: {
            magics_.AddEntriesFrom(input, _repeated_magics_codec);
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
          case 56: {
            HP = input.ReadInt32();
            break;
          }
          case 64: {
            MP = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EquipData : pb::IMessage<EquipData> {
    private static readonly pb::MessageParser<EquipData> _parser = new pb::MessageParser<EquipData>(() => new EquipData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EquipData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.DataReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipData(EquipData other) : this() {
      refreshTime_ = other.refreshTime_;
      values_ = other.values_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquipData Clone() {
      return new EquipData(this);
    }

    /// <summary>Field number for the "RefreshTime" field.</summary>
    public const int RefreshTimeFieldNumber = 1;
    private int refreshTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RefreshTime {
      get { return refreshTime_; }
      set {
        refreshTime_ = value;
      }
    }

    /// <summary>Field number for the "Values" field.</summary>
    public const int ValuesFieldNumber = 2;
    private static readonly pbc::MapField<int, int>.Codec _map_values_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
    private readonly pbc::MapField<int, int> values_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Values {
      get { return values_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EquipData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EquipData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RefreshTime != other.RefreshTime) return false;
      if (!Values.Equals(other.Values)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RefreshTime != 0) hash ^= RefreshTime.GetHashCode();
      hash ^= Values.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RefreshTime != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RefreshTime);
      }
      values_.WriteTo(output, _map_values_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RefreshTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshTime);
      }
      size += values_.CalculateSize(_map_values_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EquipData other) {
      if (other == null) {
        return;
      }
      if (other.RefreshTime != 0) {
        RefreshTime = other.RefreshTime;
      }
      values_.Add(other.values_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RefreshTime = input.ReadInt32();
            break;
          }
          case 18: {
            values_.AddEntriesFrom(input, _map_values_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家道具
  /// </summary>
  public sealed partial class PlayerItem : pb::IMessage<PlayerItem> {
    private static readonly pb::MessageParser<PlayerItem> _parser = new pb::MessageParser<PlayerItem>(() => new PlayerItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.DataReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerItem(PlayerItem other) : this() {
      itemID_ = other.itemID_;
      num_ = other.num_;
      gUID_ = other.gUID_;
      locked_ = other.locked_;
      level_ = other.level_;
      Data = other.data_ != null ? other.Data.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerItem Clone() {
      return new PlayerItem(this);
    }

    /// <summary>Field number for the "ItemID" field.</summary>
    public const int ItemIDFieldNumber = 1;
    private int itemID_;
    /// <summary>
    ///配置ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "Num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    /// <summary>
    ///拥有数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "GUID" field.</summary>
    public const int GUIDFieldNumber = 3;
    private string gUID_ = "";
    /// <summary>
    ///唯一识别码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GUID {
      get { return gUID_; }
      set {
        gUID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Locked" field.</summary>
    public const int LockedFieldNumber = 4;
    private bool locked_;
    /// <summary>
    ///是否锁定中
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Locked {
      get { return locked_; }
      set {
        locked_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 5;
    private int level_;
    /// <summary>
    ///等级 装备特有
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 6;
    private global::Proto.EquipData data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.EquipData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemID != other.ItemID) return false;
      if (Num != other.Num) return false;
      if (GUID != other.GUID) return false;
      if (Locked != other.Locked) return false;
      if (Level != other.Level) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemID != 0) hash ^= ItemID.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (GUID.Length != 0) hash ^= GUID.GetHashCode();
      if (Locked != false) hash ^= Locked.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemID);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (GUID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GUID);
      }
      if (Locked != false) {
        output.WriteRawTag(32);
        output.WriteBool(Locked);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Level);
      }
      if (data_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemID);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (GUID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GUID);
      }
      if (Locked != false) {
        size += 1 + 1;
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerItem other) {
      if (other == null) {
        return;
      }
      if (other.ItemID != 0) {
        ItemID = other.ItemID;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.GUID.Length != 0) {
        GUID = other.GUID;
      }
      if (other.Locked != false) {
        Locked = other.Locked;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::Proto.EquipData();
        }
        Data.MergeFrom(other.Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemID = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
          case 26: {
            GUID = input.ReadString();
            break;
          }
          case 32: {
            Locked = input.ReadBool();
            break;
          }
          case 40: {
            Level = input.ReadInt32();
            break;
          }
          case 50: {
            if (data_ == null) {
              data_ = new global::Proto.EquipData();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家背包
  /// </summary>
  public sealed partial class PlayerPackage : pb::IMessage<PlayerPackage> {
    private static readonly pb::MessageParser<PlayerPackage> _parser = new pb::MessageParser<PlayerPackage>(() => new PlayerPackage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerPackage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.DataReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPackage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPackage(PlayerPackage other) : this() {
      items_ = other.items_.Clone();
      maxSize_ = other.maxSize_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerPackage Clone() {
      return new PlayerPackage(this);
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::Proto.PlayerItem>.Codec _map_items_codec
        = new pbc::MapField<string, global::Proto.PlayerItem>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Proto.PlayerItem.Parser), 10);
    private readonly pbc::MapField<string, global::Proto.PlayerItem> items_ = new pbc::MapField<string, global::Proto.PlayerItem>();
    /// <summary>
    ///道具列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Proto.PlayerItem> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "MaxSize" field.</summary>
    public const int MaxSizeFieldNumber = 2;
    private int maxSize_;
    /// <summary>
    ///背包上限
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxSize {
      get { return maxSize_; }
      set {
        maxSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerPackage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerPackage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Items.Equals(other.Items)) return false;
      if (MaxSize != other.MaxSize) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Items.GetHashCode();
      if (MaxSize != 0) hash ^= MaxSize.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _map_items_codec);
      if (MaxSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxSize);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_map_items_codec);
      if (MaxSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxSize);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerPackage other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      if (other.MaxSize != 0) {
        MaxSize = other.MaxSize;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _map_items_codec);
            break;
          }
          case 16: {
            MaxSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户服务器映射
  /// </summary>
  public sealed partial class PlayerServerInfo : pb::IMessage<PlayerServerInfo> {
    private static readonly pb::MessageParser<PlayerServerInfo> _parser = new pb::MessageParser<PlayerServerInfo>(() => new PlayerServerInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerServerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.DataReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerServerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerServerInfo(PlayerServerInfo other) : this() {
      accountUuid_ = other.accountUuid_;
      serverID_ = other.serverID_;
      servicePort_ = other.servicePort_;
      serviceHost_ = other.serviceHost_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerServerInfo Clone() {
      return new PlayerServerInfo(this);
    }

    /// <summary>Field number for the "AccountUuid" field.</summary>
    public const int AccountUuidFieldNumber = 1;
    private string accountUuid_ = "";
    /// <summary>
    ///玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountUuid {
      get { return accountUuid_; }
      set {
        accountUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ServerID" field.</summary>
    public const int ServerIDFieldNumber = 2;
    private int serverID_;
    /// <summary>
    ///所在服务器	
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerID {
      get { return serverID_; }
      set {
        serverID_ = value;
      }
    }

    /// <summary>Field number for the "ServicePort" field.</summary>
    public const int ServicePortFieldNumber = 3;
    private int servicePort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServicePort {
      get { return servicePort_; }
      set {
        servicePort_ = value;
      }
    }

    /// <summary>Field number for the "ServiceHost" field.</summary>
    public const int ServiceHostFieldNumber = 4;
    private string serviceHost_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceHost {
      get { return serviceHost_; }
      set {
        serviceHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerServerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerServerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountUuid != other.AccountUuid) return false;
      if (ServerID != other.ServerID) return false;
      if (ServicePort != other.ServicePort) return false;
      if (ServiceHost != other.ServiceHost) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountUuid.Length != 0) hash ^= AccountUuid.GetHashCode();
      if (ServerID != 0) hash ^= ServerID.GetHashCode();
      if (ServicePort != 0) hash ^= ServicePort.GetHashCode();
      if (ServiceHost.Length != 0) hash ^= ServiceHost.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountUuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountUuid);
      }
      if (ServerID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ServerID);
      }
      if (ServicePort != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ServicePort);
      }
      if (ServiceHost.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ServiceHost);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountUuid);
      }
      if (ServerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerID);
      }
      if (ServicePort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServicePort);
      }
      if (ServiceHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceHost);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerServerInfo other) {
      if (other == null) {
        return;
      }
      if (other.AccountUuid.Length != 0) {
        AccountUuid = other.AccountUuid;
      }
      if (other.ServerID != 0) {
        ServerID = other.ServerID;
      }
      if (other.ServicePort != 0) {
        ServicePort = other.ServicePort;
      }
      if (other.ServiceHost.Length != 0) {
        ServiceHost = other.ServiceHost;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountUuid = input.ReadString();
            break;
          }
          case 16: {
            ServerID = input.ReadInt32();
            break;
          }
          case 24: {
            ServicePort = input.ReadInt32();
            break;
          }
          case 34: {
            ServiceHost = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeroProperty : pb::IMessage<HeroProperty> {
    private static readonly pb::MessageParser<HeroProperty> _parser = new pb::MessageParser<HeroProperty>(() => new HeroProperty());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroProperty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.DataReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroProperty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroProperty(HeroProperty other) : this() {
      property_ = other.property_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroProperty Clone() {
      return new HeroProperty(this);
    }

    /// <summary>Field number for the "Property" field.</summary>
    public const int PropertyFieldNumber = 1;
    private global::Proto.HeroPropertyType property_ = 0;
    /// <summary>
    ///属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.HeroPropertyType Property {
      get { return property_; }
      set {
        property_ = value;
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    /// <summary>
    ///值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroProperty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroProperty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Property != other.Property) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Property != 0) hash ^= Property.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Property != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Property);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Property != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Property);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroProperty other) {
      if (other == null) {
        return;
      }
      if (other.Property != 0) {
        Property = other.Property;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            property_ = (global::Proto.HeroPropertyType) input.ReadEnum();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HeroMagicData : pb::IMessage<HeroMagicData> {
    private static readonly pb::MessageParser<HeroMagicData> _parser = new pb::MessageParser<HeroMagicData>(() => new HeroMagicData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HeroMagicData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.DataReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroMagicData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroMagicData(HeroMagicData other) : this() {
      cDTime_ = other.cDTime_;
      magicID_ = other.magicID_;
      mType_ = other.mType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HeroMagicData Clone() {
      return new HeroMagicData(this);
    }

    /// <summary>Field number for the "CDTime" field.</summary>
    public const int CDTimeFieldNumber = 1;
    private float cDTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CDTime {
      get { return cDTime_; }
      set {
        cDTime_ = value;
      }
    }

    /// <summary>Field number for the "MagicID" field.</summary>
    public const int MagicIDFieldNumber = 2;
    private int magicID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicID {
      get { return magicID_; }
      set {
        magicID_ = value;
      }
    }

    /// <summary>Field number for the "MType" field.</summary>
    public const int MTypeFieldNumber = 3;
    private global::Proto.MagicType mType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.MagicType MType {
      get { return mType_; }
      set {
        mType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HeroMagicData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HeroMagicData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CDTime != other.CDTime) return false;
      if (MagicID != other.MagicID) return false;
      if (MType != other.MType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CDTime != 0F) hash ^= CDTime.GetHashCode();
      if (MagicID != 0) hash ^= MagicID.GetHashCode();
      if (MType != 0) hash ^= MType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CDTime != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(CDTime);
      }
      if (MagicID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MagicID);
      }
      if (MType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) MType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CDTime != 0F) {
        size += 1 + 4;
      }
      if (MagicID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagicID);
      }
      if (MType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HeroMagicData other) {
      if (other == null) {
        return;
      }
      if (other.CDTime != 0F) {
        CDTime = other.CDTime;
      }
      if (other.MagicID != 0) {
        MagicID = other.MagicID;
      }
      if (other.MType != 0) {
        MType = other.MType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            CDTime = input.ReadFloat();
            break;
          }
          case 16: {
            MagicID = input.ReadInt32();
            break;
          }
          case 24: {
            mType_ = (global::Proto.MagicType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClientConfig : pb::IMessage<ClientConfig> {
    private static readonly pb::MessageParser<ClientConfig> _parser = new pb::MessageParser<ClientConfig>(() => new ClientConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.DataReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfig(ClientConfig other) : this() {
      loginServerHost_ = other.loginServerHost_;
      loginServerPort_ = other.loginServerPort_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientConfig Clone() {
      return new ClientConfig(this);
    }

    /// <summary>Field number for the "LoginServerHost" field.</summary>
    public const int LoginServerHostFieldNumber = 1;
    private string loginServerHost_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginServerHost {
      get { return loginServerHost_; }
      set {
        loginServerHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LoginServerPort" field.</summary>
    public const int LoginServerPortFieldNumber = 2;
    private int loginServerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoginServerPort {
      get { return loginServerPort_; }
      set {
        loginServerPort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LoginServerHost != other.LoginServerHost) return false;
      if (LoginServerPort != other.LoginServerPort) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LoginServerHost.Length != 0) hash ^= LoginServerHost.GetHashCode();
      if (LoginServerPort != 0) hash ^= LoginServerPort.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LoginServerHost.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(LoginServerHost);
      }
      if (LoginServerPort != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LoginServerPort);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LoginServerHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginServerHost);
      }
      if (LoginServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoginServerPort);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientConfig other) {
      if (other == null) {
        return;
      }
      if (other.LoginServerHost.Length != 0) {
        LoginServerHost = other.LoginServerHost;
      }
      if (other.LoginServerPort != 0) {
        LoginServerPort = other.LoginServerPort;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            LoginServerHost = input.ReadString();
            break;
          }
          case 16: {
            LoginServerPort = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleServerConfig : pb::IMessage<BattleServerConfig> {
    private static readonly pb::MessageParser<BattleServerConfig> _parser = new pb::MessageParser<BattleServerConfig>(() => new BattleServerConfig());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleServerConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.DataReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleServerConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleServerConfig(BattleServerConfig other) : this() {
      level_ = other.level_;
      maxPlayer_ = other.maxPlayer_;
      listenPort_ = other.listenPort_;
      listenHost_ = other.listenHost_;
      loginServerPort_ = other.loginServerPort_;
      loginServiceHost_ = other.loginServiceHost_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleServerConfig Clone() {
      return new BattleServerConfig(this);
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "MaxPlayer" field.</summary>
    public const int MaxPlayerFieldNumber = 2;
    private int maxPlayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPlayer {
      get { return maxPlayer_; }
      set {
        maxPlayer_ = value;
      }
    }

    /// <summary>Field number for the "ListenPort" field.</summary>
    public const int ListenPortFieldNumber = 3;
    private int listenPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ListenPort {
      get { return listenPort_; }
      set {
        listenPort_ = value;
      }
    }

    /// <summary>Field number for the "ListenHost" field.</summary>
    public const int ListenHostFieldNumber = 4;
    private string listenHost_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ListenHost {
      get { return listenHost_; }
      set {
        listenHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LoginServerPort" field.</summary>
    public const int LoginServerPortFieldNumber = 5;
    private int loginServerPort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LoginServerPort {
      get { return loginServerPort_; }
      set {
        loginServerPort_ = value;
      }
    }

    /// <summary>Field number for the "LoginServiceHost" field.</summary>
    public const int LoginServiceHostFieldNumber = 6;
    private string loginServiceHost_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LoginServiceHost {
      get { return loginServiceHost_; }
      set {
        loginServiceHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleServerConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleServerConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (MaxPlayer != other.MaxPlayer) return false;
      if (ListenPort != other.ListenPort) return false;
      if (ListenHost != other.ListenHost) return false;
      if (LoginServerPort != other.LoginServerPort) return false;
      if (LoginServiceHost != other.LoginServiceHost) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (MaxPlayer != 0) hash ^= MaxPlayer.GetHashCode();
      if (ListenPort != 0) hash ^= ListenPort.GetHashCode();
      if (ListenHost.Length != 0) hash ^= ListenHost.GetHashCode();
      if (LoginServerPort != 0) hash ^= LoginServerPort.GetHashCode();
      if (LoginServiceHost.Length != 0) hash ^= LoginServiceHost.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (MaxPlayer != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxPlayer);
      }
      if (ListenPort != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ListenPort);
      }
      if (ListenHost.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ListenHost);
      }
      if (LoginServerPort != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LoginServerPort);
      }
      if (LoginServiceHost.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LoginServiceHost);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (MaxPlayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPlayer);
      }
      if (ListenPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ListenPort);
      }
      if (ListenHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ListenHost);
      }
      if (LoginServerPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LoginServerPort);
      }
      if (LoginServiceHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LoginServiceHost);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleServerConfig other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.MaxPlayer != 0) {
        MaxPlayer = other.MaxPlayer;
      }
      if (other.ListenPort != 0) {
        ListenPort = other.ListenPort;
      }
      if (other.ListenHost.Length != 0) {
        ListenHost = other.ListenHost;
      }
      if (other.LoginServerPort != 0) {
        LoginServerPort = other.LoginServerPort;
      }
      if (other.LoginServiceHost.Length != 0) {
        LoginServiceHost = other.LoginServiceHost;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 16: {
            MaxPlayer = input.ReadInt32();
            break;
          }
          case 24: {
            ListenPort = input.ReadInt32();
            break;
          }
          case 34: {
            ListenHost = input.ReadString();
            break;
          }
          case 40: {
            LoginServerPort = input.ReadInt32();
            break;
          }
          case 50: {
            LoginServiceHost = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
