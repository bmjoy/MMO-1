// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: MongoDB.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto.MongoDB {

  /// <summary>Holder for reflection information generated from MongoDB.proto</summary>
  public static partial class MongoDBReflection {

    #region Descriptor
    /// <summary>File descriptor for MongoDB.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MongoDBReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1Nb25nb0RCLnByb3RvEg1Qcm90by5Nb25nb0RCGhxnb29nbGUvcHJvdG9i",
            "dWYvc3RydWN0LnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnBy",
            "b3RvGhBleGNlbGNvbnN0LnByb3RvImMKEEdhbWVQbGF5ZXJFbnRpdHkSDAoE",
            "dXVpZBgBIAEoCRIUCgxhY2NvdW50X3V1aWQYAiABKAkSDAoEY29pbhgDIAEo",
            "BRIMCgRnb2xkGAQgASgFEg8KB2xhc3RfaXAYBSABKAkiOgoLREJIZXJvTWFn",
            "aWMSDQoFbGV2ZWwYASABKAUSCwoDZXhwGAIgASgFEg8KB2FjdGl2ZWQYAyAB",
            "KAgiygEKFEdhdGVTZXJ2ZXJJbmZvRW50aXR5EgwKBHV1aWQYASABKAkSDAoE",
            "aG9zdBgCIAEoCRIMCgRwb3J0GAMgASgFEhEKCXNlcnZlcl9pZBgEIAEoBRIY",
            "ChBtYXhfcGxheWVyX0NvdW50GAUgASgFEhwKFGN1cnJlbnRfcGxheWVyX2Nv",
            "dW50GAYgASgFEhEKCWNsaWVudF9pZBgHIAEoBRIUCgxzZXJ2aWNlX2hvc3QY",
            "CSABKAkSFAoMc2VydmljZV9wb3J0GAogASgFIo4BChVVc2VyU2Vzc2lvbklu",
            "Zm9FbnRpdHkSDAoEdXVpZBgBIAEoCRIUCgxhY2NvdW50X3V1aWQYAiABKAkS",
            "FgoOZ2F0ZV9zZXJ2ZXJfaWQYAyABKAUSGAoQYmF0dGxlX3NlcnZlcl9pZBgE",
            "IAEoBRINCgV0b2tlbhgFIAEoCRIQCghsZXZlbF9pZBgGIAEoBSKpAQoYUGxh",
            "eWVyQmF0dGxlU2VydmVyRW50aXR5EgwKBHV1aWQYASABKAkSEQoJc2VydmVy",
            "X2lkGAIgASgFEhEKCWpvaW5fdGltZRgDIAEoAxIQCghsZXZlbF9pZBgEIAEo",
            "BRIRCgljbGllbnRfaWQYBSABKAUSDAoEaG9zdBgGIAEoCRIMCgRwb3J0GAcg",
            "ASgFEhgKEG1heF9wbGF5ZXJfY291bnQYCCABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.StructReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Proto.ExcelconstReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.MongoDB.GamePlayerEntity), global::Proto.MongoDB.GamePlayerEntity.Parser, new[]{ "Uuid", "AccountUuid", "Coin", "Gold", "LastIp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.MongoDB.DBHeroMagic), global::Proto.MongoDB.DBHeroMagic.Parser, new[]{ "Level", "Exp", "Actived" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.MongoDB.GateServerInfoEntity), global::Proto.MongoDB.GateServerInfoEntity.Parser, new[]{ "Uuid", "Host", "Port", "ServerId", "MaxPlayerCount", "CurrentPlayerCount", "ClientId", "ServiceHost", "ServicePort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.MongoDB.UserSessionInfoEntity), global::Proto.MongoDB.UserSessionInfoEntity.Parser, new[]{ "Uuid", "AccountUuid", "GateServerId", "BattleServerId", "Token", "LevelId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.MongoDB.PlayerBattleServerEntity), global::Proto.MongoDB.PlayerBattleServerEntity.Parser, new[]{ "Uuid", "ServerId", "JoinTime", "LevelId", "ClientId", "Host", "Port", "MaxPlayerCount" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///game
  /// </summary>
  public sealed partial class GamePlayerEntity : pb::IMessage<GamePlayerEntity> {
    private static readonly pb::MessageParser<GamePlayerEntity> _parser = new pb::MessageParser<GamePlayerEntity>(() => new GamePlayerEntity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GamePlayerEntity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MongoDB.MongoDBReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamePlayerEntity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamePlayerEntity(GamePlayerEntity other) : this() {
      uuid_ = other.uuid_;
      accountUuid_ = other.accountUuid_;
      coin_ = other.coin_;
      gold_ = other.gold_;
      lastIp_ = other.lastIp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamePlayerEntity Clone() {
      return new GamePlayerEntity(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private string uuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account_uuid" field.</summary>
    public const int AccountUuidFieldNumber = 2;
    private string accountUuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountUuid {
      get { return accountUuid_; }
      set {
        accountUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "coin" field.</summary>
    public const int CoinFieldNumber = 3;
    private int coin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 4;
    private int gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "last_ip" field.</summary>
    public const int LastIpFieldNumber = 5;
    private string lastIp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastIp {
      get { return lastIp_; }
      set {
        lastIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GamePlayerEntity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GamePlayerEntity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (AccountUuid != other.AccountUuid) return false;
      if (Coin != other.Coin) return false;
      if (Gold != other.Gold) return false;
      if (LastIp != other.LastIp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (AccountUuid.Length != 0) hash ^= AccountUuid.GetHashCode();
      if (Coin != 0) hash ^= Coin.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (LastIp.Length != 0) hash ^= LastIp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uuid);
      }
      if (AccountUuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccountUuid);
      }
      if (Coin != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Coin);
      }
      if (Gold != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Gold);
      }
      if (LastIp.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LastIp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (AccountUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountUuid);
      }
      if (Coin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coin);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (LastIp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastIp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GamePlayerEntity other) {
      if (other == null) {
        return;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.AccountUuid.Length != 0) {
        AccountUuid = other.AccountUuid;
      }
      if (other.Coin != 0) {
        Coin = other.Coin;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      if (other.LastIp.Length != 0) {
        LastIp = other.LastIp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uuid = input.ReadString();
            break;
          }
          case 18: {
            AccountUuid = input.ReadString();
            break;
          }
          case 24: {
            Coin = input.ReadInt32();
            break;
          }
          case 32: {
            Gold = input.ReadInt32();
            break;
          }
          case 42: {
            LastIp = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///hero
  /// </summary>
  public sealed partial class DBHeroMagic : pb::IMessage<DBHeroMagic> {
    private static readonly pb::MessageParser<DBHeroMagic> _parser = new pb::MessageParser<DBHeroMagic>(() => new DBHeroMagic());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DBHeroMagic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MongoDB.MongoDBReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBHeroMagic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBHeroMagic(DBHeroMagic other) : this() {
      level_ = other.level_;
      exp_ = other.exp_;
      actived_ = other.actived_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DBHeroMagic Clone() {
      return new DBHeroMagic(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "exp" field.</summary>
    public const int ExpFieldNumber = 2;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "actived" field.</summary>
    public const int ActivedFieldNumber = 3;
    private bool actived_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Actived {
      get { return actived_; }
      set {
        actived_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DBHeroMagic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DBHeroMagic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (Exp != other.Exp) return false;
      if (Actived != other.Actived) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (Actived != false) hash ^= Actived.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Level);
      }
      if (Exp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Exp);
      }
      if (Actived != false) {
        output.WriteRawTag(24);
        output.WriteBool(Actived);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (Actived != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DBHeroMagic other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.Actived != false) {
        Actived = other.Actived;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = input.ReadInt32();
            break;
          }
          case 16: {
            Exp = input.ReadInt32();
            break;
          }
          case 24: {
            Actived = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏服务器信息
  /// </summary>
  public sealed partial class GateServerInfoEntity : pb::IMessage<GateServerInfoEntity> {
    private static readonly pb::MessageParser<GateServerInfoEntity> _parser = new pb::MessageParser<GateServerInfoEntity>(() => new GateServerInfoEntity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GateServerInfoEntity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MongoDB.MongoDBReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GateServerInfoEntity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GateServerInfoEntity(GateServerInfoEntity other) : this() {
      uuid_ = other.uuid_;
      host_ = other.host_;
      port_ = other.port_;
      serverId_ = other.serverId_;
      maxPlayerCount_ = other.maxPlayerCount_;
      currentPlayerCount_ = other.currentPlayerCount_;
      clientId_ = other.clientId_;
      serviceHost_ = other.serviceHost_;
      servicePort_ = other.servicePort_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GateServerInfoEntity Clone() {
      return new GateServerInfoEntity(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private string uuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 2;
    private string host_ = "";
    /// <summary>
    ///主机地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 3;
    private int port_;
    /// <summary>
    ///主机端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 4;
    private int serverId_;
    /// <summary>
    ///服务器ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "max_player_Count" field.</summary>
    public const int MaxPlayerCountFieldNumber = 5;
    private int maxPlayerCount_;
    /// <summary>
    ///最大服务数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPlayerCount {
      get { return maxPlayerCount_; }
      set {
        maxPlayerCount_ = value;
      }
    }

    /// <summary>Field number for the "current_player_count" field.</summary>
    public const int CurrentPlayerCountFieldNumber = 6;
    private int currentPlayerCount_;
    /// <summary>
    ///当前玩家数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPlayerCount {
      get { return currentPlayerCount_; }
      set {
        currentPlayerCount_ = value;
      }
    }

    /// <summary>Field number for the "client_id" field.</summary>
    public const int ClientIdFieldNumber = 7;
    private int clientId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientId {
      get { return clientId_; }
      set {
        clientId_ = value;
      }
    }

    /// <summary>Field number for the "service_host" field.</summary>
    public const int ServiceHostFieldNumber = 9;
    private string serviceHost_ = "";
    /// <summary>
    ///center or battle server 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceHost {
      get { return serviceHost_; }
      set {
        serviceHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "service_port" field.</summary>
    public const int ServicePortFieldNumber = 10;
    private int servicePort_;
    /// <summary>
    ///port
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServicePort {
      get { return servicePort_; }
      set {
        servicePort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GateServerInfoEntity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GateServerInfoEntity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      if (ServerId != other.ServerId) return false;
      if (MaxPlayerCount != other.MaxPlayerCount) return false;
      if (CurrentPlayerCount != other.CurrentPlayerCount) return false;
      if (ClientId != other.ClientId) return false;
      if (ServiceHost != other.ServiceHost) return false;
      if (ServicePort != other.ServicePort) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (MaxPlayerCount != 0) hash ^= MaxPlayerCount.GetHashCode();
      if (CurrentPlayerCount != 0) hash ^= CurrentPlayerCount.GetHashCode();
      if (ClientId != 0) hash ^= ClientId.GetHashCode();
      if (ServiceHost.Length != 0) hash ^= ServiceHost.GetHashCode();
      if (ServicePort != 0) hash ^= ServicePort.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uuid);
      }
      if (Host.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Port);
      }
      if (ServerId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ServerId);
      }
      if (MaxPlayerCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxPlayerCount);
      }
      if (CurrentPlayerCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CurrentPlayerCount);
      }
      if (ClientId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ClientId);
      }
      if (ServiceHost.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ServiceHost);
      }
      if (ServicePort != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ServicePort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (MaxPlayerCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPlayerCount);
      }
      if (CurrentPlayerCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPlayerCount);
      }
      if (ClientId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientId);
      }
      if (ServiceHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceHost);
      }
      if (ServicePort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServicePort);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GateServerInfoEntity other) {
      if (other == null) {
        return;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.MaxPlayerCount != 0) {
        MaxPlayerCount = other.MaxPlayerCount;
      }
      if (other.CurrentPlayerCount != 0) {
        CurrentPlayerCount = other.CurrentPlayerCount;
      }
      if (other.ClientId != 0) {
        ClientId = other.ClientId;
      }
      if (other.ServiceHost.Length != 0) {
        ServiceHost = other.ServiceHost;
      }
      if (other.ServicePort != 0) {
        ServicePort = other.ServicePort;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uuid = input.ReadString();
            break;
          }
          case 18: {
            Host = input.ReadString();
            break;
          }
          case 24: {
            Port = input.ReadInt32();
            break;
          }
          case 32: {
            ServerId = input.ReadInt32();
            break;
          }
          case 40: {
            MaxPlayerCount = input.ReadInt32();
            break;
          }
          case 48: {
            CurrentPlayerCount = input.ReadInt32();
            break;
          }
          case 56: {
            ClientId = input.ReadInt32();
            break;
          }
          case 74: {
            ServiceHost = input.ReadString();
            break;
          }
          case 80: {
            ServicePort = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户当前的服务器信息
  /// </summary>
  public sealed partial class UserSessionInfoEntity : pb::IMessage<UserSessionInfoEntity> {
    private static readonly pb::MessageParser<UserSessionInfoEntity> _parser = new pb::MessageParser<UserSessionInfoEntity>(() => new UserSessionInfoEntity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UserSessionInfoEntity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MongoDB.MongoDBReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSessionInfoEntity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSessionInfoEntity(UserSessionInfoEntity other) : this() {
      uuid_ = other.uuid_;
      accountUuid_ = other.accountUuid_;
      gateServerId_ = other.gateServerId_;
      battleServerId_ = other.battleServerId_;
      token_ = other.token_;
      levelId_ = other.levelId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UserSessionInfoEntity Clone() {
      return new UserSessionInfoEntity(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private string uuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account_uuid" field.</summary>
    public const int AccountUuidFieldNumber = 2;
    private string accountUuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountUuid {
      get { return accountUuid_; }
      set {
        accountUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gate_server_id" field.</summary>
    public const int GateServerIdFieldNumber = 3;
    private int gateServerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GateServerId {
      get { return gateServerId_; }
      set {
        gateServerId_ = value;
      }
    }

    /// <summary>Field number for the "battle_server_id" field.</summary>
    public const int BattleServerIdFieldNumber = 4;
    private int battleServerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleServerId {
      get { return battleServerId_; }
      set {
        battleServerId_ = value;
      }
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 5;
    private string token_ = "";
    /// <summary>
    ///token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level_id" field.</summary>
    public const int LevelIdFieldNumber = 6;
    private int levelId_;
    /// <summary>
    ///current level 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UserSessionInfoEntity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UserSessionInfoEntity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (AccountUuid != other.AccountUuid) return false;
      if (GateServerId != other.GateServerId) return false;
      if (BattleServerId != other.BattleServerId) return false;
      if (Token != other.Token) return false;
      if (LevelId != other.LevelId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (AccountUuid.Length != 0) hash ^= AccountUuid.GetHashCode();
      if (GateServerId != 0) hash ^= GateServerId.GetHashCode();
      if (BattleServerId != 0) hash ^= BattleServerId.GetHashCode();
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (LevelId != 0) hash ^= LevelId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uuid);
      }
      if (AccountUuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccountUuid);
      }
      if (GateServerId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GateServerId);
      }
      if (BattleServerId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BattleServerId);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Token);
      }
      if (LevelId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LevelId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (AccountUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountUuid);
      }
      if (GateServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GateServerId);
      }
      if (BattleServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleServerId);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UserSessionInfoEntity other) {
      if (other == null) {
        return;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.AccountUuid.Length != 0) {
        AccountUuid = other.AccountUuid;
      }
      if (other.GateServerId != 0) {
        GateServerId = other.GateServerId;
      }
      if (other.BattleServerId != 0) {
        BattleServerId = other.BattleServerId;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.LevelId != 0) {
        LevelId = other.LevelId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uuid = input.ReadString();
            break;
          }
          case 18: {
            AccountUuid = input.ReadString();
            break;
          }
          case 24: {
            GateServerId = input.ReadInt32();
            break;
          }
          case 32: {
            BattleServerId = input.ReadInt32();
            break;
          }
          case 42: {
            Token = input.ReadString();
            break;
          }
          case 48: {
            LevelId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerBattleServerEntity : pb::IMessage<PlayerBattleServerEntity> {
    private static readonly pb::MessageParser<PlayerBattleServerEntity> _parser = new pb::MessageParser<PlayerBattleServerEntity>(() => new PlayerBattleServerEntity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerBattleServerEntity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.MongoDB.MongoDBReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBattleServerEntity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBattleServerEntity(PlayerBattleServerEntity other) : this() {
      uuid_ = other.uuid_;
      serverId_ = other.serverId_;
      joinTime_ = other.joinTime_;
      levelId_ = other.levelId_;
      clientId_ = other.clientId_;
      host_ = other.host_;
      port_ = other.port_;
      maxPlayerCount_ = other.maxPlayerCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBattleServerEntity Clone() {
      return new PlayerBattleServerEntity(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private string uuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "server_id" field.</summary>
    public const int ServerIdFieldNumber = 2;
    private int serverId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerId {
      get { return serverId_; }
      set {
        serverId_ = value;
      }
    }

    /// <summary>Field number for the "join_time" field.</summary>
    public const int JoinTimeFieldNumber = 3;
    private long joinTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long JoinTime {
      get { return joinTime_; }
      set {
        joinTime_ = value;
      }
    }

    /// <summary>Field number for the "level_id" field.</summary>
    public const int LevelIdFieldNumber = 4;
    private int levelId_;
    /// <summary>
    ///level id for selected level data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    /// <summary>Field number for the "client_id" field.</summary>
    public const int ClientIdFieldNumber = 5;
    private int clientId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClientId {
      get { return clientId_; }
      set {
        clientId_ = value;
      }
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 6;
    private string host_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 7;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "max_player_count" field.</summary>
    public const int MaxPlayerCountFieldNumber = 8;
    private int maxPlayerCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPlayerCount {
      get { return maxPlayerCount_; }
      set {
        maxPlayerCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerBattleServerEntity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerBattleServerEntity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (ServerId != other.ServerId) return false;
      if (JoinTime != other.JoinTime) return false;
      if (LevelId != other.LevelId) return false;
      if (ClientId != other.ClientId) return false;
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      if (MaxPlayerCount != other.MaxPlayerCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (ServerId != 0) hash ^= ServerId.GetHashCode();
      if (JoinTime != 0L) hash ^= JoinTime.GetHashCode();
      if (LevelId != 0) hash ^= LevelId.GetHashCode();
      if (ClientId != 0) hash ^= ClientId.GetHashCode();
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (MaxPlayerCount != 0) hash ^= MaxPlayerCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uuid);
      }
      if (ServerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ServerId);
      }
      if (JoinTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(JoinTime);
      }
      if (LevelId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LevelId);
      }
      if (ClientId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ClientId);
      }
      if (Host.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Port);
      }
      if (MaxPlayerCount != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MaxPlayerCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (ServerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerId);
      }
      if (JoinTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(JoinTime);
      }
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelId);
      }
      if (ClientId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientId);
      }
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (MaxPlayerCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPlayerCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerBattleServerEntity other) {
      if (other == null) {
        return;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.ServerId != 0) {
        ServerId = other.ServerId;
      }
      if (other.JoinTime != 0L) {
        JoinTime = other.JoinTime;
      }
      if (other.LevelId != 0) {
        LevelId = other.LevelId;
      }
      if (other.ClientId != 0) {
        ClientId = other.ClientId;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.MaxPlayerCount != 0) {
        MaxPlayerCount = other.MaxPlayerCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uuid = input.ReadString();
            break;
          }
          case 16: {
            ServerId = input.ReadInt32();
            break;
          }
          case 24: {
            JoinTime = input.ReadInt64();
            break;
          }
          case 32: {
            LevelId = input.ReadInt32();
            break;
          }
          case 40: {
            ClientId = input.ReadInt32();
            break;
          }
          case 50: {
            Host = input.ReadString();
            break;
          }
          case 56: {
            Port = input.ReadInt32();
            break;
          }
          case 64: {
            MaxPlayerCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
