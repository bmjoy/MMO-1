// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login_server.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto {

  /// <summary>Holder for reflection information generated from login_server.proto</summary>
  public static partial class LoginServerReflection {

    #region Descriptor
    /// <summary>File descriptor for login_server.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LoginServerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJsb2dpbl9zZXJ2ZXIucHJvdG8SBVByb3RvGgpkYXRhLnByb3RvGgtjb25z",
            "dC5wcm90bxoQZXhjZWxjb25zdC5wcm90byJACglDMkxfTG9naW4SDwoHVmVy",
            "c2lvbhgBIAEoBRIQCghVc2VyTmFtZRgCIAEoCRIQCghQYXNzd29yZBgDIAEo",
            "CSJ3CglMMkNfTG9naW4SHgoEQ29kZRgBIAEoDjIQLlByb3RvLkVycm9yQ29k",
            "ZRIOCgZVc2VySUQYAiABKAkSDwoHU2Vzc2lvbhgDIAEoCRIpCgpHYXRlU2Vy",
            "dmVyGAQgASgLMhUuUHJvdG8uR2FtZVNlcnZlckluZm8iPgoHQzJMX1JlZxIP",
            "CgdWZXJzaW9uGAEgASgFEhAKCFVzZXJOYW1lGAIgASgJEhAKCFBhc3N3b3Jk",
            "GAMgASgJInUKB0wyQ19SZWcSHgoEQ29kZRgBIAEoDjIQLlByb3RvLkVycm9y",
            "Q29kZRIPCgdTZXNzaW9uGAIgASgJEg4KBlVzZXJJRBgDIAEoCRIpCgpHYXRl",
            "U2VydmVyGAQgASgLMhUuUHJvdG8uR2FtZVNlcnZlckluZm8iIwoRVGFza19M",
            "MkJfRXhpdFVzZXISDgoGVXNlcklEGAEgASgJIiYKEVRhc2tfTDJHX0V4aXRV",
            "c2VyEhEKCUFjY291bnRJZBgBIAEoCSKnAQoRRzJMX0dhdGVTZXJ2ZXJSZWcS",
            "DwoHVmVyc2lvbhgBIAEoBRIMCgRIb3N0GAIgASgJEgwKBFBvcnQYAyABKAUS",
            "EwoLU2VydmljZUhvc3QYBCABKAkSFAoMU2VydmljZXNQcm90GAUgASgFEhAK",
            "CFNlcnZlcklEGAYgASgFEhEKCU1heFBsYXllchgHIAEoBRIVCg1DdXJyZW50",
            "UGxheWVyGAggASgFIjMKEUwyR19HYXRlU2VydmVyUmVnEh4KBENvZGUYASAB",
            "KA4yEC5Qcm90by5FcnJvckNvZGUiNwoURzJMX0dhdGVDaGVja1Nlc3Npb24S",
            "DgoGVXNlcklEGAEgASgJEg8KB1Nlc3Npb24YAiABKAkiNgoUTDJHX0dhdGVD",
            "aGVja1Nlc3Npb24SHgoEQ29kZRgBIAEoDjIQLlByb3RvLkVycm9yQ29kZSIy",
            "Cg9HMkxfQmVnaW5CYXR0bGUSDgoGVXNlcklEGAEgASgJEg8KB0xldmVsSWQY",
            "AiABKAUiXgoPTDJHX0JlZ2luQmF0dGxlEh4KBENvZGUYASABKA4yEC5Qcm90",
            "by5FcnJvckNvZGUSKwoMQmF0dGxlU2VydmVyGAIgASgLMhUuUHJvdG8uR2Ft",
            "ZVNlcnZlckluZm8iIwoRRzJMX0dldExhc3RCYXR0bGUSDgoGVXNlcklEGAEg",
            "ASgJInEKEUwyR19HZXRMYXN0QmF0dGxlEh4KBENvZGUYASABKA4yEC5Qcm90",
            "by5FcnJvckNvZGUSKwoMQmF0dGxlU2VydmVyGAIgASgLMhUuUHJvdG8uR2Ft",
            "ZVNlcnZlckluZm8SDwoHTGV2ZWxJZBgDIAEoBSJmChNCMkxfUmVnQmF0dGxl",
            "U2VydmVyEg8KB1ZlcnNpb24YASABKAUSDAoEUG9ydBgCIAEoBRIMCgRIb3N0",
            "GAMgASgJEhEKCU1heHBsYXllchgEIAEoBRIPCgdMZXZlbElkGAUgASgFIk4K",
            "E0wyQl9SZWdCYXR0bGVTZXJ2ZXISHgoEQ29kZRgBIAEoDjIQLlByb3RvLkVy",
            "cm9yQ29kZRIXCg9TZXJ2aWNlU2VydmVySUQYAiABKAUiHwoNQjJMX0VuZEJh",
            "dHRsZRIOCgZVc2VySUQYASABKAkiLwoNTDJCX0VuZEJhdHRsZRIeCgRDb2Rl",
            "GAEgASgOMhAuUHJvdG8uRXJyb3JDb2RlIjYKEEIyTF9DaGVja1Nlc3Npb24S",
            "EgoKU2Vzc2lvbktleRgBIAEoCRIOCgZVc2VySUQYAiABKAkiXQoQTDJCX0No",
            "ZWNrU2Vzc2lvbhIeCgRDb2RlGAEgASgOMhAuUHJvdG8uRXJyb3JDb2RlEikK",
            "CkdhdGVTZXJ2ZXIYAiABKAsyFS5Qcm90by5HYW1lU2VydmVySW5mbzJsChJM",
            "b2dpblNlcnZlclNlcnZpY2USLQoFTG9naW4SEC5Qcm90by5DMkxfTG9naW4a",
            "EC5Qcm90by5MMkNfTG9naW4iABInCgNSZWcSDi5Qcm90by5DMkxfUmVnGg4u",
            "UHJvdG8uTDJDX1JlZyIAMoIEChxMb2dpbkJhdHRsZUdhbWVTZXJ2ZXJTZXJ2",
            "aWNlEkkKD1JlZ0JhdHRsZVNlcnZlchIaLlByb3RvLkIyTF9SZWdCYXR0bGVT",
            "ZXJ2ZXIaGi5Qcm90by5MMkJfUmVnQmF0dGxlU2VydmVyEjcKCUVuZEJhdHRs",
            "ZRIULlByb3RvLkIyTF9FbmRCYXR0bGUaFC5Qcm90by5MMkJfRW5kQmF0dGxl",
            "EkAKDENoZWNrU2Vzc2lvbhIXLlByb3RvLkIyTF9DaGVja1Nlc3Npb24aFy5Q",
            "cm90by5MMkJfQ2hlY2tTZXNzaW9uEkUKDVJlZ0dhdGVTZXJ2ZXISGC5Qcm90",
            "by5HMkxfR2F0ZVNlcnZlclJlZxoYLlByb3RvLkwyR19HYXRlU2VydmVyUmVn",
            "IgASTwoRR2F0ZVNlcnZlclNlc3Npb24SGy5Qcm90by5HMkxfR2F0ZUNoZWNr",
            "U2Vzc2lvbhobLlByb3RvLkwyR19HYXRlQ2hlY2tTZXNzaW9uIgASPwoLQmVn",
            "aW5CYXR0bGUSFi5Qcm90by5HMkxfQmVnaW5CYXR0bGUaFi5Qcm90by5MMkdf",
            "QmVnaW5CYXR0bGUiABJDCg1HZXRMYXN0QmF0dGxlEhguUHJvdG8uRzJMX0dl",
            "dExhc3RCYXR0bGUaGC5Qcm90by5MMkdfR2V0TGFzdEJhdHRsZTJbChdMb2dp",
            "blNlcnZlclRhc2tTZXJ2aWNlcxJACghFeGl0VXNlchIYLlByb3RvLlRhc2tf",
            "TDJCX0V4aXRVc2VyGhguUHJvdG8uVGFza19MMkJfRXhpdFVzZXIiADJjCiFM",
            "b2dpblNlcnZlckdhdGVTZXJ2ZXJUYXNrU2VydmljZXMSPgoIRXhpdFVzZXIS",
            "GC5Qcm90by5UYXNrX0wyR19FeGl0VXNlchoYLlByb3RvLlRhc2tfTDJHX0V4",
            "aXRVc2VyYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto.DataReflection.Descriptor, global::Proto.ConstReflection.Descriptor, global::Proto.ExcelconstReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.C2L_Login), global::Proto.C2L_Login.Parser, new[]{ "Version", "UserName", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.L2C_Login), global::Proto.L2C_Login.Parser, new[]{ "Code", "UserID", "Session", "GateServer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.C2L_Reg), global::Proto.C2L_Reg.Parser, new[]{ "Version", "UserName", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.L2C_Reg), global::Proto.L2C_Reg.Parser, new[]{ "Code", "Session", "UserID", "GateServer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Task_L2B_ExitUser), global::Proto.Task_L2B_ExitUser.Parser, new[]{ "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Task_L2G_ExitUser), global::Proto.Task_L2G_ExitUser.Parser, new[]{ "AccountId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.G2L_GateServerReg), global::Proto.G2L_GateServerReg.Parser, new[]{ "Version", "Host", "Port", "ServiceHost", "ServicesProt", "ServerID", "MaxPlayer", "CurrentPlayer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.L2G_GateServerReg), global::Proto.L2G_GateServerReg.Parser, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.G2L_GateCheckSession), global::Proto.G2L_GateCheckSession.Parser, new[]{ "UserID", "Session" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.L2G_GateCheckSession), global::Proto.L2G_GateCheckSession.Parser, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.G2L_BeginBattle), global::Proto.G2L_BeginBattle.Parser, new[]{ "UserID", "LevelId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.L2G_BeginBattle), global::Proto.L2G_BeginBattle.Parser, new[]{ "Code", "BattleServer" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.G2L_GetLastBattle), global::Proto.G2L_GetLastBattle.Parser, new[]{ "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.L2G_GetLastBattle), global::Proto.L2G_GetLastBattle.Parser, new[]{ "Code", "BattleServer", "LevelId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.B2L_RegBattleServer), global::Proto.B2L_RegBattleServer.Parser, new[]{ "Version", "Port", "Host", "Maxplayer", "LevelId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.L2B_RegBattleServer), global::Proto.L2B_RegBattleServer.Parser, new[]{ "Code", "ServiceServerID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.B2L_EndBattle), global::Proto.B2L_EndBattle.Parser, new[]{ "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.L2B_EndBattle), global::Proto.L2B_EndBattle.Parser, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.B2L_CheckSession), global::Proto.B2L_CheckSession.Parser, new[]{ "SessionKey", "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.L2B_CheckSession), global::Proto.L2B_CheckSession.Parser, new[]{ "Code", "GateServer" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///登陆
  /// </summary>
  public sealed partial class C2L_Login : pb::IMessage<C2L_Login> {
    private static readonly pb::MessageParser<C2L_Login> _parser = new pb::MessageParser<C2L_Login>(() => new C2L_Login());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2L_Login> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.LoginServerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2L_Login() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2L_Login(C2L_Login other) : this() {
      version_ = other.version_;
      userName_ = other.userName_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2L_Login Clone() {
      return new C2L_Login(this);
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 1;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    /// <summary>
    ///登陆token
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2L_Login);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2L_Login other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (UserName != other.UserName) return false;
      if (Password != other.Password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2L_Login other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///登陆返回
  /// </summary>
  public sealed partial class L2C_Login : pb::IMessage<L2C_Login> {
    private static readonly pb::MessageParser<L2C_Login> _parser = new pb::MessageParser<L2C_Login>(() => new L2C_Login());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<L2C_Login> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.LoginServerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2C_Login() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2C_Login(L2C_Login other) : this() {
      code_ = other.code_;
      userID_ = other.userID_;
      session_ = other.session_;
      GateServer = other.gateServer_ != null ? other.GateServer.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2C_Login Clone() {
      return new L2C_Login(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private string userID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserID {
      get { return userID_; }
      set {
        userID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Session" field.</summary>
    public const int SessionFieldNumber = 3;
    private string session_ = "";
    /// <summary>
    ///session
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Session {
      get { return session_; }
      set {
        session_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GateServer" field.</summary>
    public const int GateServerFieldNumber = 4;
    private global::Proto.GameServerInfo gateServer_;
    /// <summary>
    ///所属服务器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.GameServerInfo GateServer {
      get { return gateServer_; }
      set {
        gateServer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as L2C_Login);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(L2C_Login other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (UserID != other.UserID) return false;
      if (Session != other.Session) return false;
      if (!object.Equals(GateServer, other.GateServer)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (UserID.Length != 0) hash ^= UserID.GetHashCode();
      if (Session.Length != 0) hash ^= Session.GetHashCode();
      if (gateServer_ != null) hash ^= GateServer.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (UserID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserID);
      }
      if (Session.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Session);
      }
      if (gateServer_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GateServer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (UserID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserID);
      }
      if (Session.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Session);
      }
      if (gateServer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GateServer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(L2C_Login other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.UserID.Length != 0) {
        UserID = other.UserID;
      }
      if (other.Session.Length != 0) {
        Session = other.Session;
      }
      if (other.gateServer_ != null) {
        if (gateServer_ == null) {
          gateServer_ = new global::Proto.GameServerInfo();
        }
        GateServer.MergeFrom(other.GateServer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            code_ = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            UserID = input.ReadString();
            break;
          }
          case 26: {
            Session = input.ReadString();
            break;
          }
          case 34: {
            if (gateServer_ == null) {
              gateServer_ = new global::Proto.GameServerInfo();
            }
            input.ReadMessage(gateServer_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///注册用户
  /// </summary>
  public sealed partial class C2L_Reg : pb::IMessage<C2L_Reg> {
    private static readonly pb::MessageParser<C2L_Reg> _parser = new pb::MessageParser<C2L_Reg>(() => new C2L_Reg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2L_Reg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.LoginServerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2L_Reg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2L_Reg(C2L_Reg other) : this() {
      version_ = other.version_;
      userName_ = other.userName_;
      password_ = other.password_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2L_Reg Clone() {
      return new C2L_Reg(this);
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 1;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2L_Reg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2L_Reg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (UserName != other.UserName) return false;
      if (Password != other.Password) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2L_Reg other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///注册返回
  /// </summary>
  public sealed partial class L2C_Reg : pb::IMessage<L2C_Reg> {
    private static readonly pb::MessageParser<L2C_Reg> _parser = new pb::MessageParser<L2C_Reg>(() => new L2C_Reg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<L2C_Reg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.LoginServerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2C_Reg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2C_Reg(L2C_Reg other) : this() {
      code_ = other.code_;
      session_ = other.session_;
      userID_ = other.userID_;
      GateServer = other.gateServer_ != null ? other.GateServer.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2C_Reg Clone() {
      return new L2C_Reg(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "Session" field.</summary>
    public const int SessionFieldNumber = 2;
    private string session_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Session {
      get { return session_; }
      set {
        session_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private string userID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserID {
      get { return userID_; }
      set {
        userID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "GateServer" field.</summary>
    public const int GateServerFieldNumber = 4;
    private global::Proto.GameServerInfo gateServer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.GameServerInfo GateServer {
      get { return gateServer_; }
      set {
        gateServer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as L2C_Reg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(L2C_Reg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Session != other.Session) return false;
      if (UserID != other.UserID) return false;
      if (!object.Equals(GateServer, other.GateServer)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Session.Length != 0) hash ^= Session.GetHashCode();
      if (UserID.Length != 0) hash ^= UserID.GetHashCode();
      if (gateServer_ != null) hash ^= GateServer.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (Session.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Session);
      }
      if (UserID.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserID);
      }
      if (gateServer_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GateServer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (Session.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Session);
      }
      if (UserID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserID);
      }
      if (gateServer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GateServer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(L2C_Reg other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Session.Length != 0) {
        Session = other.Session;
      }
      if (other.UserID.Length != 0) {
        UserID = other.UserID;
      }
      if (other.gateServer_ != null) {
        if (gateServer_ == null) {
          gateServer_ = new global::Proto.GameServerInfo();
        }
        GateServer.MergeFrom(other.GateServer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            code_ = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            Session = input.ReadString();
            break;
          }
          case 26: {
            UserID = input.ReadString();
            break;
          }
          case 34: {
            if (gateServer_ == null) {
              gateServer_ = new global::Proto.GameServerInfo();
            }
            input.ReadMessage(gateServer_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///退出玩家
  /// </summary>
  public sealed partial class Task_L2B_ExitUser : pb::IMessage<Task_L2B_ExitUser> {
    private static readonly pb::MessageParser<Task_L2B_ExitUser> _parser = new pb::MessageParser<Task_L2B_ExitUser>(() => new Task_L2B_ExitUser());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Task_L2B_ExitUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.LoginServerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task_L2B_ExitUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task_L2B_ExitUser(Task_L2B_ExitUser other) : this() {
      userID_ = other.userID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task_L2B_ExitUser Clone() {
      return new Task_L2B_ExitUser(this);
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private string userID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserID {
      get { return userID_; }
      set {
        userID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Task_L2B_ExitUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Task_L2B_ExitUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID.Length != 0) hash ^= UserID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Task_L2B_ExitUser other) {
      if (other == null) {
        return;
      }
      if (other.UserID.Length != 0) {
        UserID = other.UserID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Task_L2G_ExitUser : pb::IMessage<Task_L2G_ExitUser> {
    private static readonly pb::MessageParser<Task_L2G_ExitUser> _parser = new pb::MessageParser<Task_L2G_ExitUser>(() => new Task_L2G_ExitUser());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Task_L2G_ExitUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.LoginServerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task_L2G_ExitUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task_L2G_ExitUser(Task_L2G_ExitUser other) : this() {
      accountId_ = other.accountId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Task_L2G_ExitUser Clone() {
      return new Task_L2G_ExitUser(this);
    }

    /// <summary>Field number for the "AccountId" field.</summary>
    public const int AccountIdFieldNumber = 1;
    private string accountId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Task_L2G_ExitUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Task_L2G_ExitUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountId != other.AccountId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Task_L2G_ExitUser other) {
      if (other == null) {
        return;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏服务器注册
  /// </summary>
  public sealed partial class G2L_GateServerReg : pb::IMessage<G2L_GateServerReg> {
    private static readonly pb::MessageParser<G2L_GateServerReg> _parser = new pb::MessageParser<G2L_GateServerReg>(() => new G2L_GateServerReg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2L_GateServerReg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.LoginServerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_GateServerReg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_GateServerReg(G2L_GateServerReg other) : this() {
      version_ = other.version_;
      host_ = other.host_;
      port_ = other.port_;
      serviceHost_ = other.serviceHost_;
      servicesProt_ = other.servicesProt_;
      serverID_ = other.serverID_;
      maxPlayer_ = other.maxPlayer_;
      currentPlayer_ = other.currentPlayer_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_GateServerReg Clone() {
      return new G2L_GateServerReg(this);
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 1;
    private int version_;
    /// <summary>
    ///当前版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "Host" field.</summary>
    public const int HostFieldNumber = 2;
    private string host_ = "";
    /// <summary>
    ///服务器IP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Port" field.</summary>
    public const int PortFieldNumber = 3;
    private int port_;
    /// <summary>
    ///服务器端口 公开
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "ServiceHost" field.</summary>
    public const int ServiceHostFieldNumber = 4;
    private string serviceHost_ = "";
    /// <summary>
    ///内部访问IP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceHost {
      get { return serviceHost_; }
      set {
        serviceHost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ServicesProt" field.</summary>
    public const int ServicesProtFieldNumber = 5;
    private int servicesProt_;
    /// <summary>
    ///内部服务器端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServicesProt {
      get { return servicesProt_; }
      set {
        servicesProt_ = value;
      }
    }

    /// <summary>Field number for the "ServerID" field.</summary>
    public const int ServerIDFieldNumber = 6;
    private int serverID_;
    /// <summary>
    ///服务器ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServerID {
      get { return serverID_; }
      set {
        serverID_ = value;
      }
    }

    /// <summary>Field number for the "MaxPlayer" field.</summary>
    public const int MaxPlayerFieldNumber = 7;
    private int maxPlayer_;
    /// <summary>
    ///服务器最大玩家数 数据库最大支持玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPlayer {
      get { return maxPlayer_; }
      set {
        maxPlayer_ = value;
      }
    }

    /// <summary>Field number for the "CurrentPlayer" field.</summary>
    public const int CurrentPlayerFieldNumber = 8;
    private int currentPlayer_;
    /// <summary>
    ///当前玩家数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentPlayer {
      get { return currentPlayer_; }
      set {
        currentPlayer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2L_GateServerReg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2L_GateServerReg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      if (ServiceHost != other.ServiceHost) return false;
      if (ServicesProt != other.ServicesProt) return false;
      if (ServerID != other.ServerID) return false;
      if (MaxPlayer != other.MaxPlayer) return false;
      if (CurrentPlayer != other.CurrentPlayer) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (ServiceHost.Length != 0) hash ^= ServiceHost.GetHashCode();
      if (ServicesProt != 0) hash ^= ServicesProt.GetHashCode();
      if (ServerID != 0) hash ^= ServerID.GetHashCode();
      if (MaxPlayer != 0) hash ^= MaxPlayer.GetHashCode();
      if (CurrentPlayer != 0) hash ^= CurrentPlayer.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (Host.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Port);
      }
      if (ServiceHost.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ServiceHost);
      }
      if (ServicesProt != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ServicesProt);
      }
      if (ServerID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ServerID);
      }
      if (MaxPlayer != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MaxPlayer);
      }
      if (CurrentPlayer != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CurrentPlayer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (ServiceHost.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceHost);
      }
      if (ServicesProt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServicesProt);
      }
      if (ServerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServerID);
      }
      if (MaxPlayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPlayer);
      }
      if (CurrentPlayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentPlayer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2L_GateServerReg other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.ServiceHost.Length != 0) {
        ServiceHost = other.ServiceHost;
      }
      if (other.ServicesProt != 0) {
        ServicesProt = other.ServicesProt;
      }
      if (other.ServerID != 0) {
        ServerID = other.ServerID;
      }
      if (other.MaxPlayer != 0) {
        MaxPlayer = other.MaxPlayer;
      }
      if (other.CurrentPlayer != 0) {
        CurrentPlayer = other.CurrentPlayer;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 18: {
            Host = input.ReadString();
            break;
          }
          case 24: {
            Port = input.ReadInt32();
            break;
          }
          case 34: {
            ServiceHost = input.ReadString();
            break;
          }
          case 40: {
            ServicesProt = input.ReadInt32();
            break;
          }
          case 48: {
            ServerID = input.ReadInt32();
            break;
          }
          case 56: {
            MaxPlayer = input.ReadInt32();
            break;
          }
          case 64: {
            CurrentPlayer = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///游戏服务器返回
  /// </summary>
  public sealed partial class L2G_GateServerReg : pb::IMessage<L2G_GateServerReg> {
    private static readonly pb::MessageParser<L2G_GateServerReg> _parser = new pb::MessageParser<L2G_GateServerReg>(() => new L2G_GateServerReg());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<L2G_GateServerReg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.LoginServerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_GateServerReg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_GateServerReg(L2G_GateServerReg other) : this() {
      code_ = other.code_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_GateServerReg Clone() {
      return new L2G_GateServerReg(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as L2G_GateServerReg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(L2G_GateServerReg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(L2G_GateServerReg other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            code_ = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///检查session是否有效
  /// </summary>
  public sealed partial class G2L_GateCheckSession : pb::IMessage<G2L_GateCheckSession> {
    private static readonly pb::MessageParser<G2L_GateCheckSession> _parser = new pb::MessageParser<G2L_GateCheckSession>(() => new G2L_GateCheckSession());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2L_GateCheckSession> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.LoginServerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_GateCheckSession() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_GateCheckSession(G2L_GateCheckSession other) : this() {
      userID_ = other.userID_;
      session_ = other.session_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_GateCheckSession Clone() {
      return new G2L_GateCheckSession(this);
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private string userID_ = "";
    /// <summary>
    ///玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserID {
      get { return userID_; }
      set {
        userID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Session" field.</summary>
    public const int SessionFieldNumber = 2;
    private string session_ = "";
    /// <summary>
    ///当前登陆信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Session {
      get { return session_; }
      set {
        session_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2L_GateCheckSession);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2L_GateCheckSession other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (Session != other.Session) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID.Length != 0) hash ^= UserID.GetHashCode();
      if (Session.Length != 0) hash ^= Session.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserID);
      }
      if (Session.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Session);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserID);
      }
      if (Session.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Session);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2L_GateCheckSession other) {
      if (other == null) {
        return;
      }
      if (other.UserID.Length != 0) {
        UserID = other.UserID;
      }
      if (other.Session.Length != 0) {
        Session = other.Session;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserID = input.ReadString();
            break;
          }
          case 18: {
            Session = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///返回检查session结果
  /// </summary>
  public sealed partial class L2G_GateCheckSession : pb::IMessage<L2G_GateCheckSession> {
    private static readonly pb::MessageParser<L2G_GateCheckSession> _parser = new pb::MessageParser<L2G_GateCheckSession>(() => new L2G_GateCheckSession());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<L2G_GateCheckSession> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.LoginServerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_GateCheckSession() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_GateCheckSession(L2G_GateCheckSession other) : this() {
      code_ = other.code_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_GateCheckSession Clone() {
      return new L2G_GateCheckSession(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as L2G_GateCheckSession);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(L2G_GateCheckSession other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(L2G_GateCheckSession other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            code_ = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///启动一个战斗仿真
  /// </summary>
  public sealed partial class G2L_BeginBattle : pb::IMessage<G2L_BeginBattle> {
    private static readonly pb::MessageParser<G2L_BeginBattle> _parser = new pb::MessageParser<G2L_BeginBattle>(() => new G2L_BeginBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2L_BeginBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.LoginServerReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_BeginBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_BeginBattle(G2L_BeginBattle other) : this() {
      userID_ = other.userID_;
      levelId_ = other.levelId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_BeginBattle Clone() {
      return new G2L_BeginBattle(this);
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private string userID_ = "";
    /// <summary>
    ///发起请求的用户
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserID {
      get { return userID_; }
      set {
        userID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LevelId" field.</summary>
    public const int LevelIdFieldNumber = 2;
    private int levelId_;
    /// <summary>
    ///仿真地图level
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2L_BeginBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2L_BeginBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      if (LevelId != other.LevelId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID.Length != 0) hash ^= UserID.GetHashCode();
      if (LevelId != 0) hash ^= LevelId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserID);
      }
      if (LevelId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LevelId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserID);
      }
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2L_BeginBattle other) {
      if (other == null) {
        return;
      }
      if (other.UserID.Length != 0) {
        UserID = other.UserID;
      }
      if (other.LevelId != 0) {
        LevelId = other.LevelId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserID = input.ReadString();
            break;
          }
          case 16: {
            LevelId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///启动返回
  /// </summary>
  public sealed partial class L2G_BeginBattle : pb::IMessage<L2G_BeginBattle> {
    private static readonly pb::MessageParser<L2G_BeginBattle> _parser = new pb::MessageParser<L2G_BeginBattle>(() => new L2G_BeginBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<L2G_BeginBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.LoginServerReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_BeginBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_BeginBattle(L2G_BeginBattle other) : this() {
      code_ = other.code_;
      BattleServer = other.battleServer_ != null ? other.BattleServer.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_BeginBattle Clone() {
      return new L2G_BeginBattle(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "BattleServer" field.</summary>
    public const int BattleServerFieldNumber = 2;
    private global::Proto.GameServerInfo battleServer_;
    /// <summary>
    ///当前战斗服务器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.GameServerInfo BattleServer {
      get { return battleServer_; }
      set {
        battleServer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as L2G_BeginBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(L2G_BeginBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (!object.Equals(BattleServer, other.BattleServer)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (battleServer_ != null) hash ^= BattleServer.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (battleServer_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BattleServer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (battleServer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleServer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(L2G_BeginBattle other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.battleServer_ != null) {
        if (battleServer_ == null) {
          battleServer_ = new global::Proto.GameServerInfo();
        }
        BattleServer.MergeFrom(other.BattleServer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            code_ = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            if (battleServer_ == null) {
              battleServer_ = new global::Proto.GameServerInfo();
            }
            input.ReadMessage(battleServer_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class G2L_GetLastBattle : pb::IMessage<G2L_GetLastBattle> {
    private static readonly pb::MessageParser<G2L_GetLastBattle> _parser = new pb::MessageParser<G2L_GetLastBattle>(() => new G2L_GetLastBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<G2L_GetLastBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.LoginServerReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_GetLastBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_GetLastBattle(G2L_GetLastBattle other) : this() {
      userID_ = other.userID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public G2L_GetLastBattle Clone() {
      return new G2L_GetLastBattle(this);
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private string userID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserID {
      get { return userID_; }
      set {
        userID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as G2L_GetLastBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(G2L_GetLastBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID.Length != 0) hash ^= UserID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(G2L_GetLastBattle other) {
      if (other == null) {
        return;
      }
      if (other.UserID.Length != 0) {
        UserID = other.UserID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class L2G_GetLastBattle : pb::IMessage<L2G_GetLastBattle> {
    private static readonly pb::MessageParser<L2G_GetLastBattle> _parser = new pb::MessageParser<L2G_GetLastBattle>(() => new L2G_GetLastBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<L2G_GetLastBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.LoginServerReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_GetLastBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_GetLastBattle(L2G_GetLastBattle other) : this() {
      code_ = other.code_;
      BattleServer = other.battleServer_ != null ? other.BattleServer.Clone() : null;
      levelId_ = other.levelId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2G_GetLastBattle Clone() {
      return new L2G_GetLastBattle(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "BattleServer" field.</summary>
    public const int BattleServerFieldNumber = 2;
    private global::Proto.GameServerInfo battleServer_;
    /// <summary>
    ///当前战斗服务器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.GameServerInfo BattleServer {
      get { return battleServer_; }
      set {
        battleServer_ = value;
      }
    }

    /// <summary>Field number for the "LevelId" field.</summary>
    public const int LevelIdFieldNumber = 3;
    private int levelId_;
    /// <summary>
    ///地图
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as L2G_GetLastBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(L2G_GetLastBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (!object.Equals(BattleServer, other.BattleServer)) return false;
      if (LevelId != other.LevelId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (battleServer_ != null) hash ^= BattleServer.GetHashCode();
      if (LevelId != 0) hash ^= LevelId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (battleServer_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(BattleServer);
      }
      if (LevelId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LevelId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (battleServer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattleServer);
      }
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(L2G_GetLastBattle other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.battleServer_ != null) {
        if (battleServer_ == null) {
          battleServer_ = new global::Proto.GameServerInfo();
        }
        BattleServer.MergeFrom(other.BattleServer);
      }
      if (other.LevelId != 0) {
        LevelId = other.LevelId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            code_ = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            if (battleServer_ == null) {
              battleServer_ = new global::Proto.GameServerInfo();
            }
            input.ReadMessage(battleServer_);
            break;
          }
          case 24: {
            LevelId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///注册一个战斗服务器
  /// </summary>
  public sealed partial class B2L_RegBattleServer : pb::IMessage<B2L_RegBattleServer> {
    private static readonly pb::MessageParser<B2L_RegBattleServer> _parser = new pb::MessageParser<B2L_RegBattleServer>(() => new B2L_RegBattleServer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2L_RegBattleServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.LoginServerReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2L_RegBattleServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2L_RegBattleServer(B2L_RegBattleServer other) : this() {
      version_ = other.version_;
      port_ = other.port_;
      host_ = other.host_;
      maxplayer_ = other.maxplayer_;
      levelId_ = other.levelId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2L_RegBattleServer Clone() {
      return new B2L_RegBattleServer(this);
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 1;
    private int version_;
    /// <summary>
    ///当前版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "Port" field.</summary>
    public const int PortFieldNumber = 2;
    private int port_;
    /// <summary>
    ///服务器端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "Host" field.</summary>
    public const int HostFieldNumber = 3;
    private string host_ = "";
    /// <summary>
    ///服务器IP
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Maxplayer" field.</summary>
    public const int MaxplayerFieldNumber = 4;
    private int maxplayer_;
    /// <summary>
    ///最大用户数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Maxplayer {
      get { return maxplayer_; }
      set {
        maxplayer_ = value;
      }
    }

    /// <summary>Field number for the "LevelId" field.</summary>
    public const int LevelIdFieldNumber = 5;
    private int levelId_;
    /// <summary>
    ///地图id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2L_RegBattleServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2L_RegBattleServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (Port != other.Port) return false;
      if (Host != other.Host) return false;
      if (Maxplayer != other.Maxplayer) return false;
      if (LevelId != other.LevelId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Maxplayer != 0) hash ^= Maxplayer.GetHashCode();
      if (LevelId != 0) hash ^= LevelId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
      if (Host.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Host);
      }
      if (Maxplayer != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Maxplayer);
      }
      if (LevelId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(LevelId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Maxplayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Maxplayer);
      }
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2L_RegBattleServer other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Maxplayer != 0) {
        Maxplayer = other.Maxplayer;
      }
      if (other.LevelId != 0) {
        LevelId = other.LevelId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
          case 26: {
            Host = input.ReadString();
            break;
          }
          case 32: {
            Maxplayer = input.ReadInt32();
            break;
          }
          case 40: {
            LevelId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///注册返回
  /// </summary>
  public sealed partial class L2B_RegBattleServer : pb::IMessage<L2B_RegBattleServer> {
    private static readonly pb::MessageParser<L2B_RegBattleServer> _parser = new pb::MessageParser<L2B_RegBattleServer>(() => new L2B_RegBattleServer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<L2B_RegBattleServer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.LoginServerReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2B_RegBattleServer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2B_RegBattleServer(L2B_RegBattleServer other) : this() {
      code_ = other.code_;
      serviceServerID_ = other.serviceServerID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2B_RegBattleServer Clone() {
      return new L2B_RegBattleServer(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    /// <summary>
    ///返回码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "ServiceServerID" field.</summary>
    public const int ServiceServerIDFieldNumber = 2;
    private int serviceServerID_;
    /// <summary>
    ///中心服务器（登陆服务器）给的当前服务器ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ServiceServerID {
      get { return serviceServerID_; }
      set {
        serviceServerID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as L2B_RegBattleServer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(L2B_RegBattleServer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (ServiceServerID != other.ServiceServerID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (ServiceServerID != 0) hash ^= ServiceServerID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (ServiceServerID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ServiceServerID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (ServiceServerID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ServiceServerID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(L2B_RegBattleServer other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.ServiceServerID != 0) {
        ServiceServerID = other.ServiceServerID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            code_ = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
          case 16: {
            ServiceServerID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家完成战斗
  /// </summary>
  public sealed partial class B2L_EndBattle : pb::IMessage<B2L_EndBattle> {
    private static readonly pb::MessageParser<B2L_EndBattle> _parser = new pb::MessageParser<B2L_EndBattle>(() => new B2L_EndBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2L_EndBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.LoginServerReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2L_EndBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2L_EndBattle(B2L_EndBattle other) : this() {
      userID_ = other.userID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2L_EndBattle Clone() {
      return new B2L_EndBattle(this);
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private string userID_ = "";
    /// <summary>
    ///玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserID {
      get { return userID_; }
      set {
        userID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2L_EndBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2L_EndBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserID != other.UserID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserID.Length != 0) hash ^= UserID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2L_EndBattle other) {
      if (other == null) {
        return;
      }
      if (other.UserID.Length != 0) {
        UserID = other.UserID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///玩家完成战斗
  /// </summary>
  public sealed partial class L2B_EndBattle : pb::IMessage<L2B_EndBattle> {
    private static readonly pb::MessageParser<L2B_EndBattle> _parser = new pb::MessageParser<L2B_EndBattle>(() => new L2B_EndBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<L2B_EndBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.LoginServerReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2B_EndBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2B_EndBattle(L2B_EndBattle other) : this() {
      code_ = other.code_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2B_EndBattle Clone() {
      return new L2B_EndBattle(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as L2B_EndBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(L2B_EndBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(L2B_EndBattle other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            code_ = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2L_CheckSession : pb::IMessage<B2L_CheckSession> {
    private static readonly pb::MessageParser<B2L_CheckSession> _parser = new pb::MessageParser<B2L_CheckSession>(() => new B2L_CheckSession());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2L_CheckSession> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.LoginServerReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2L_CheckSession() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2L_CheckSession(B2L_CheckSession other) : this() {
      sessionKey_ = other.sessionKey_;
      userID_ = other.userID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2L_CheckSession Clone() {
      return new B2L_CheckSession(this);
    }

    /// <summary>Field number for the "SessionKey" field.</summary>
    public const int SessionKeyFieldNumber = 1;
    private string sessionKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionKey {
      get { return sessionKey_; }
      set {
        sessionKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private string userID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserID {
      get { return userID_; }
      set {
        userID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2L_CheckSession);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2L_CheckSession other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionKey != other.SessionKey) return false;
      if (UserID != other.UserID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionKey.Length != 0) hash ^= SessionKey.GetHashCode();
      if (UserID.Length != 0) hash ^= UserID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SessionKey);
      }
      if (UserID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionKey);
      }
      if (UserID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2L_CheckSession other) {
      if (other == null) {
        return;
      }
      if (other.SessionKey.Length != 0) {
        SessionKey = other.SessionKey;
      }
      if (other.UserID.Length != 0) {
        UserID = other.UserID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SessionKey = input.ReadString();
            break;
          }
          case 18: {
            UserID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class L2B_CheckSession : pb::IMessage<L2B_CheckSession> {
    private static readonly pb::MessageParser<L2B_CheckSession> _parser = new pb::MessageParser<L2B_CheckSession>(() => new L2B_CheckSession());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<L2B_CheckSession> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.LoginServerReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2B_CheckSession() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2B_CheckSession(L2B_CheckSession other) : this() {
      code_ = other.code_;
      GateServer = other.gateServer_ != null ? other.GateServer.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2B_CheckSession Clone() {
      return new L2B_CheckSession(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "GateServer" field.</summary>
    public const int GateServerFieldNumber = 2;
    private global::Proto.GameServerInfo gateServer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.GameServerInfo GateServer {
      get { return gateServer_; }
      set {
        gateServer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as L2B_CheckSession);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(L2B_CheckSession other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (!object.Equals(GateServer, other.GateServer)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (gateServer_ != null) hash ^= GateServer.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (gateServer_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GateServer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (gateServer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GateServer);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(L2B_CheckSession other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.gateServer_ != null) {
        if (gateServer_ == null) {
          gateServer_ = new global::Proto.GameServerInfo();
        }
        GateServer.MergeFrom(other.GateServer);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            code_ = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            if (gateServer_ == null) {
              gateServer_ = new global::Proto.GameServerInfo();
            }
            input.ReadMessage(gateServer_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
