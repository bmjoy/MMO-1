// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battle_server.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto {

  /// <summary>Holder for reflection information generated from battle_server.proto</summary>
  public static partial class BattleServerReflection {

    #region Descriptor
    /// <summary>File descriptor for battle_server.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BattleServerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNiYXR0bGVfc2VydmVyLnByb3RvEgVQcm90bxoKZGF0YS5wcm90bxoLY29u",
            "c3QucHJvdG8aEGV4Y2VsY29uc3QucHJvdG8iVgoOQzJCX0pvaW5CYXR0bGUS",
            "DQoFTWFwSUQYASABKAUSDwoHU2Vzc2lvbhgCIAEoCRITCgtBY2NvdW50VXVp",
            "ZBgDIAEoCRIPCgdWZXJzaW9uGAQgASgFIjAKDkIyQ19Kb2luQmF0dGxlEh4K",
            "BENvZGUYASABKA4yEC5Qcm90by5FcnJvckNvZGUiJQoOQzJCX0V4aXRCYXR0",
            "bGUSEwoLQWNjb3VudFV1aWQYASABKAkiMAoOQjJDX0V4aXRCYXR0bGUSHgoE",
            "Q29kZRgBIAEoDjIQLlByb3RvLkVycm9yQ29kZSIjChJBY3Rpb25fQ29sbGVj",
            "dEl0ZW0SDQoFSW5kZXgYASABKAUiOQoWQWN0aW9uX0NsaWNrU2tpbGxJbmRl",
            "eBIPCgdNYWdpY0lkGAEgASgFEg4KBlRhcmdldBgCIAEoBSIlChVBY3Rpb25f",
            "QXV0b0ZpbmRUYXJnZXQSDAoEQXV0bxgBIAEoCCJhCg5BY3Rpb25fTW92ZURp",
            "chIfCgdGb3J3YXJkGAEgASgLMg4uUHJvdG8uVmVjdG9yMxIMCgRGYXN0GAIg",
            "ASgIEiAKCFBvc2l0aW9uGAMgASgLMg4uUHJvdG8uVmVjdG9yMyIVChNBY3Rp",
            "b25fTm9ybWFsQXR0YWNrIiAKDkFjdGlvbl9Vc2VJdGVtEg4KBkl0ZW1JZBgB",
            "IAEoBSIoChdOb3RpZnlfRWxlbWVudEV4aXRTdGF0ZRINCgVJbmRleBgBIAEo",
            "BSKGAQoVTm90aWZ5X0NyZWF0ZVJlbGVhc2VyEg0KBUluZGV4GAEgASgFEhUK",
            "DVJlbGVhc2VySW5kZXgYAiABKAUSEwoLVGFyZ2V0SW5kZXgYAyABKAUSEAoI",
            "TWFnaWNLZXkYBCABKAkSIAoIUG9zaXRpb24YBSABKAsyDi5Qcm90by5WZWN0",
            "b3IzIq8CChxOb3RpZnlfQ3JlYXRlQmF0dGxlQ2hhcmFjdGVyEg0KBUluZGV4",
            "GAEgASgFEhMKC0FjY291bnRVdWlkGAIgASgJEhAKCENvbmZpZ0lEGAMgASgF",
            "EhEKCVRlYW1JbmRleBgEIAEoBRIgCghQb3NpdGlvbhgFIAEoCzIOLlByb3Rv",
            "LlZlY3RvcjMSHwoHRm9yd2FyZBgGIAEoCzIOLlByb3RvLlZlY3RvcjMSDQoF",
            "TGV2ZWwYByABKAUSCgoCSHAYCCABKAUSDQoFTWF4SHAYCSABKAUSDAoETmFt",
            "ZRgOIAEoCRINCgVTcGVlZBgPIAEoAhIhCgNDZHMYECADKAsyFC5Qcm90by5I",
            "ZXJvTWFnaWNEYXRhEgoKAk1wGBEgASgFEg0KBU1wTWF4GBIgASgFIqQBChRO",
            "b3RpZnlfQ3JlYXRlTWlzc2lsZRINCgVJbmRleBgBIAEoBRIVCg1SZWxlYXNl",
            "ckluZGV4GAIgASgFEhUKDVJlc291cmNlc1BhdGgYAyABKAkSDQoFU3BlZWQY",
            "BCABKAISEAoIRnJvbUJvbmUYBiABKAkSDgoGVG9Cb25lGAcgASgJEh4KBk9m",
            "ZnNldBgIIAEoCzIOLlByb3RvLlZlY3RvcjMiTgobTm90aWZ5X0NoYXJhY3Rl",
            "clNldFBvc2l0aW9uEg0KBUluZGV4GAEgASgFEiAKCFBvc2l0aW9uGAIgASgL",
            "Mg4uUHJvdG8uVmVjdG9yMyI1ChVOb3RpZnlfQ2hhcmFjdGVyQWxwaGESDQoF",
            "SW5kZXgYASABKAUSDQoFQWxwaGEYAiABKAIiTAoaTm90aWZ5X0NoYXJhY3Rl",
            "clNldEZvcndvcmQSDQoFSW5kZXgYASABKAUSHwoHRm9yd2FyZBgCIAEoCzIO",
            "LlByb3RvLlZlY3RvcjMiNQoVTm90aWZ5X0NoYXJhY3RlclNwZWVkEg0KBUlu",
            "ZGV4GAEgASgFEg0KBVNwZWVkGAIgASgCIjgKF05vdGlmeV9MYXlvdXRQbGF5",
            "TW90aW9uEg0KBUluZGV4GAEgASgFEg4KBk1vdGlvbhgCIAEoCSI3ChZOb3Rp",
            "ZnlfTG9va0F0Q2hhcmFjdGVyEg0KBUluZGV4GAEgASgFEg4KBlRhcmdldBgC",
            "IAEoBSJ6ChZOb3RpZnlfQ2hhcmFjdGVyTW92ZVRvEg0KBUluZGV4GAEgASgF",
            "EiAKCFBvc2l0aW9uGAIgASgLMg4uUHJvdG8uVmVjdG9yMxIeCgZUYXJnZXQY",
            "AyABKAsyDi5Qcm90by5WZWN0b3IzEg8KB1N0b3BEaXMYBCABKAIiSwoYTm90",
            "aWZ5X0NoYXJhY3RlclN0b3BNb3ZlEg0KBUluZGV4GAEgASgFEiAKCFBvc2l0",
            "aW9uGAIgASgLMg4uUHJvdG8uVmVjdG9yMyImChVOb3RpZnlfQ2hhcmFjdGVy",
            "RGVhdGgSDQoFSW5kZXgYASABKAUiQwocTm90aWZ5X0NoYXJhY3RlclByaW9y",
            "aXR5TW92ZRINCgVJbmRleBgBIAEoBRIUCgxQcmlvcml0eU1vdmUYAiABKAIi",
            "OAoYTm90aWZ5X0NoYXJhY3RlclNldFNjYWxlEg0KBUluZGV4GAEgASgFEg0K",
            "BVNjYWxlGAIgASgCInUKG05vdGlmeV9DaGFyYWN0ZXJBdHRhY2hNYWdpYxIN",
            "CgVJbmRleBgBIAEoBRIPCgdNYWdpY0lkGAIgASgFEhUKDUNvbXBsZXRlZFRp",
            "bWUYAyABKAISHwoFbVR5cGUYBCABKA4yEC5Qcm90by5NYWdpY1R5cGUibwob",
            "Tm90aWZ5X0NoYXJhY3Rlck1vdmVGb3J3YXJkEg0KBUluZGV4GAEgASgFEiAK",
            "CFBvc2l0aW9uGAIgASgLMg4uUHJvdG8uVmVjdG9yMxIfCgdGb3J3YXJkGAMg",
            "ASgLMg4uUHJvdG8uVmVjdG9yMyJiChROb3RpZnlfUHJvcGVydHlWYWx1ZRIN",
            "CgVJbmRleBgBIAEoBRIlCgRUeXBlGAIgASgOMhcuUHJvdG8uSGVyb1Byb3Bl",
            "cnR5VHlwZRIUCgxGaW5hbGx5VmFsdWUYAyABKAUiRgoPTm90aWZ5X0hQQ2hh",
            "bmdlEg0KBUluZGV4GAEgASgFEgoKAkhwGAIgASgFEgsKA0N1chgDIAEoBRIL",
            "CgNNYXgYBCABKAUiRgoPTm90aWZ5X01QQ2hhbmdlEg0KBUluZGV4GAEgASgF",
            "EgoKAk1wGAIgASgFEgsKA0N1chgDIAEoBRILCgNNYXgYBCABKAUibAoTTm90",
            "aWZ5X0RhbWFnZVJlc3VsdBINCgVJbmRleBgBIAEoBRITCgtUYXJnZXRJbmRl",
            "eBgCIAEoBRIQCghJc01pc3NlZBgDIAEoCBIOCgZEYW1hZ2UYBCABKAUSDwoH",
            "Q3J0TXVsdBgFIAEoBSKBAQoLTm90aWZ5X0Ryb3ASDQoFSW5kZXgYASABKAUS",
            "HwoESXRlbRgCIAEoCzIRLlByb3RvLlBsYXllckl0ZW0SEQoJVGVhbUluZGV4",
            "GAMgASgFEhIKCkdyb3VwSW5kZXgYBCABKAUSGwoDUG9zGAUgASgLMg4uUHJv",
            "dG8uVmVjdG9yMyJzChZOb3RpZnlfUGxheWVySm9pblN0YXRlEhMKC0FjY291",
            "bnRVdWlkGAEgASgJEg8KB1RpbWVOb3cYAiABKAISDAoER29sZBgDIAEoBRIl",
            "CgdQYWNrYWdlGAQgASgLMhQuUHJvdG8uUGxheWVyUGFja2FnZSIzChROb3Rp",
            "ZnlfQ2hhcmFjdGVyTG9jaxINCgVJbmRleBgBIAEoBRIMCgRMb2NrGAIgASgF",
            "ImQKFE5vdGlmeV9DaGFyYWN0ZXJQdXNoEg0KBUluZGV4GAEgASgFEh4KBkxl",
            "bmd0aBgCIAEoCzIOLlByb3RvLlZlY3RvcjMSHQoFU3BlZWQYAyABKAsyDi5Q",
            "cm90by5WZWN0b3IzIicKFk5vdGlmeV9DaGFyYWN0ZXJSZWxpdmUSDQoFSW5k",
            "ZXgYASABKAUiRgohTm90aWZ5X0JhdHRsZUl0ZW1DaGFuZ2VHcm91cEluZGV4",
            "Eg0KBUluZGV4GAEgASgFEhIKCkdyb3VwSW5kZXgYAiABKAUiMgoPTm90aWZ5",
            "X0Ryb3BHb2xkEhEKCVRvdGFsR29sZBgBIAEoBRIMCgRHb2xkGAIgASgFIjIK",
            "E05vdGlmeV9QbGF5VGltZUxpbmUSDQoFSW5kZXgYASABKAUSDAoEUGF0aBgC",
            "IAEoCSIqChVOb3RpZnlfU3luY1NlcnZlclRpbWUSEQoJU2VydmVyTm93GAEg",
            "ASgCKi4KCE1vdmVUeXBlEg4KCk5vcm1hbE1vdmUQABIICgRCYWNrEAESCAoE",
            "SnVtcBACMpAPCg1Ob3RpZnlTZXJ2aWNlEj0KDkNoYXJhY3RlckFscGhhEgsu",
            "UHJvdG8uVm9pZBocLlByb3RvLk5vdGlmeV9DaGFyYWN0ZXJBbHBoYSIAEkYK",
            "EUNoYXJhY3RlclBvc2l0aW9uEgsuUHJvdG8uVm9pZBoiLlByb3RvLk5vdGlm",
            "eV9DaGFyYWN0ZXJTZXRQb3NpdGlvbiIAEksKFUNyZWF0ZUJhdHRsZUNoYXJh",
            "Y3RlchILLlByb3RvLlZvaWQaIy5Qcm90by5Ob3RpZnlfQ3JlYXRlQmF0dGxl",
            "Q2hhcmFjdGVyIgASOwoNQ3JlYXRlTWlzc2lsZRILLlByb3RvLlZvaWQaGy5Q",
            "cm90by5Ob3RpZnlfQ3JlYXRlTWlzc2lsZSIAEj0KDkNyZWF0ZVJlbGVhc2Vy",
            "EgsuUHJvdG8uVm9pZBocLlByb3RvLk5vdGlmeV9DcmVhdGVSZWxlYXNlciIA",
            "EjcKDERhbWFnZVJlc3VsdBILLlByb3RvLlZvaWQaGi5Qcm90by5Ob3RpZnlf",
            "RGFtYWdlUmVzdWx0EikKBERyb3ASCy5Qcm90by5Wb2lkGhIuUHJvdG8uTm90",
            "aWZ5X0Ryb3AiABJBChBFbGVtZW50RXhpdFN0YXRlEgsuUHJvdG8uVm9pZBoe",
            "LlByb3RvLk5vdGlmeV9FbGVtZW50RXhpdFN0YXRlIgASLwoISFBDaGFuZ2US",
            "Cy5Qcm90by5Wb2lkGhYuUHJvdG8uTm90aWZ5X0hQQ2hhbmdlEj8KEExheW91",
            "dFBsYXlNb3Rpb24SCy5Qcm90by5Wb2lkGh4uUHJvdG8uTm90aWZ5X0xheW91",
            "dFBsYXlNb3Rpb24SPQoPTG9va0F0Q2hhcmFjdGVyEgsuUHJvdG8uVm9pZBod",
            "LlByb3RvLk5vdGlmeV9Mb29rQXRDaGFyYWN0ZXISLwoITVBDaGFuZ2USCy5Q",
            "cm90by5Wb2lkGhYuUHJvdG8uTm90aWZ5X01QQ2hhbmdlEj0KD1BsYXllckpv",
            "aW5TdGF0ZRILLlByb3RvLlZvaWQaHS5Qcm90by5Ob3RpZnlfUGxheWVySm9p",
            "blN0YXRlEjsKDVByb3BlcnR5VmFsdWUSCy5Qcm90by5Wb2lkGhsuUHJvdG8u",
            "Tm90aWZ5X1Byb3BlcnR5VmFsdWUiABJHChNDaGFyYWN0ZXJTZXRGb3J3b3Jk",
            "EgsuUHJvdG8uVm9pZBohLlByb3RvLk5vdGlmeV9DaGFyYWN0ZXJTZXRGb3J3",
            "b3JkIgASPwoPQ2hhcmFjdGVyTW92ZVRvEgsuUHJvdG8uVm9pZBodLlByb3Rv",
            "Lk5vdGlmeV9DaGFyYWN0ZXJNb3ZlVG8iABJBChFDaGFyYWN0ZXJTdG9wTW92",
            "ZRILLlByb3RvLlZvaWQaHy5Qcm90by5Ob3RpZnlfQ2hhcmFjdGVyU3RvcE1v",
            "dmUSOwoOQ2hhcmFjdGVyRGVhdGgSCy5Qcm90by5Wb2lkGhwuUHJvdG8uTm90",
            "aWZ5X0NoYXJhY3RlckRlYXRoEkkKFUNoYXJhY3RlclByaW9yaXR5TW92ZRIL",
            "LlByb3RvLlZvaWQaIy5Qcm90by5Ob3RpZnlfQ2hhcmFjdGVyUHJpb3JpdHlN",
            "b3ZlEkMKEUNoYXJhY3RlclNldFNjYWxlEgsuUHJvdG8uVm9pZBofLlByb3Rv",
            "Lk5vdGlmeV9DaGFyYWN0ZXJTZXRTY2FsZSIAEkcKFENoYXJhY3RlckF0dGFj",
            "aE1hZ2ljEgsuUHJvdG8uVm9pZBoiLlByb3RvLk5vdGlmeV9DaGFyYWN0ZXJB",
            "dHRhY2hNYWdpYxJJChRDaGFyYWN0ZXJNb3ZlRm9yd2FyZBILLlByb3RvLlZv",
            "aWQaIi5Qcm90by5Ob3RpZnlfQ2hhcmFjdGVyTW92ZUZvcndhcmQiABI9Cg5D",
            "aGFyYWN0ZXJTcGVlZBILLlByb3RvLlZvaWQaHC5Qcm90by5Ob3RpZnlfQ2hh",
            "cmFjdGVyU3BlZWQiABI7Cg1DaGFyYWN0ZXJMb2NrEgsuUHJvdG8uVm9pZBob",
            "LlByb3RvLk5vdGlmeV9DaGFyYWN0ZXJMb2NrIgASOwoNQ2hhcmNhdGVyUHVz",
            "aBILLlByb3RvLlZvaWQaGy5Qcm90by5Ob3RpZnlfQ2hhcmFjdGVyUHVzaCIA",
            "Ej8KD0NoYXJhY3RlclJlbGl2ZRILLlByb3RvLlZvaWQaHS5Qcm90by5Ob3Rp",
            "ZnlfQ2hhcmFjdGVyUmVsaXZlIgASVQoaQmF0dGxlSXRlbUNoYW5nZUdyb3Vw",
            "SW5kZXgSCy5Qcm90by5Wb2lkGiguUHJvdG8uTm90aWZ5X0JhdHRsZUl0ZW1D",
            "aGFuZ2VHcm91cEluZGV4IgASMQoIRHJvcEdvbGQSCy5Qcm90by5Wb2lkGhYu",
            "UHJvdG8uTm90aWZ5X0Ryb3BHb2xkIgASPQoOU3luY1NlcnZlclRpbWUSCy5Q",
            "cm90by5Wb2lkGhwuUHJvdG8uTm90aWZ5X1N5bmNTZXJ2ZXJUaW1lIgASOQoM",
            "UGxheVRpbWVMaW5lEgsuUHJvdG8uVm9pZBoaLlByb3RvLk5vdGlmeV9QbGF5",
            "VGltZUxpbmUiADLlAgoNQWN0aW9uU2VydmljZRI/Cg9DbGlja1NraWxsSW5k",
            "ZXgSHS5Qcm90by5BY3Rpb25fQ2xpY2tTa2lsbEluZGV4GgsuUHJvdG8uVm9p",
            "ZCIAEj0KDkF1dG9GaW5kVGFyZ2V0EhwuUHJvdG8uQWN0aW9uX0F1dG9GaW5k",
            "VGFyZ2V0GgsuUHJvdG8uVm9pZCIAEi8KB01vdmVEaXISFS5Qcm90by5BY3Rp",
            "b25fTW92ZURpchoLLlByb3RvLlZvaWQiABI5CgxOb3JtYWxBdHRhY2sSGi5Q",
            "cm90by5BY3Rpb25fTm9ybWFsQXR0YWNrGgsuUHJvdG8uVm9pZCIAEjcKC0Nv",
            "bGxlY3RJdGVtEhkuUHJvdG8uQWN0aW9uX0NvbGxlY3RJdGVtGgsuUHJvdG8u",
            "Vm9pZCIAEi8KB1VzZUl0ZW0SFS5Qcm90by5BY3Rpb25fVXNlSXRlbRoLLlBy",
            "b3RvLlZvaWQiADKRAQoTQmF0dGxlU2VydmVyU2VydmljZRI8CgpFeGl0QmF0",
            "dGxlEhUuUHJvdG8uQzJCX0V4aXRCYXR0bGUaFS5Qcm90by5CMkNfRXhpdEJh",
            "dHRsZSIAEjwKCkpvaW5CYXR0bGUSFS5Qcm90by5DMkJfSm9pbkJhdHRsZRoV",
            "LlByb3RvLkIyQ19Kb2luQmF0dGxlIgBiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto.DataReflection.Descriptor, global::Proto.ConstReflection.Descriptor, global::Proto.ExcelconstReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Proto.MoveType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.C2B_JoinBattle), global::Proto.C2B_JoinBattle.Parser, new[]{ "MapID", "Session", "AccountUuid", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.B2C_JoinBattle), global::Proto.B2C_JoinBattle.Parser, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.C2B_ExitBattle), global::Proto.C2B_ExitBattle.Parser, new[]{ "AccountUuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.B2C_ExitBattle), global::Proto.B2C_ExitBattle.Parser, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Action_CollectItem), global::Proto.Action_CollectItem.Parser, new[]{ "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Action_ClickSkillIndex), global::Proto.Action_ClickSkillIndex.Parser, new[]{ "MagicId", "Target" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Action_AutoFindTarget), global::Proto.Action_AutoFindTarget.Parser, new[]{ "Auto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Action_MoveDir), global::Proto.Action_MoveDir.Parser, new[]{ "Forward", "Fast", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Action_NormalAttack), global::Proto.Action_NormalAttack.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Action_UseItem), global::Proto.Action_UseItem.Parser, new[]{ "ItemId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_ElementExitState), global::Proto.Notify_ElementExitState.Parser, new[]{ "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CreateReleaser), global::Proto.Notify_CreateReleaser.Parser, new[]{ "Index", "ReleaserIndex", "TargetIndex", "MagicKey", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CreateBattleCharacter), global::Proto.Notify_CreateBattleCharacter.Parser, new[]{ "Index", "AccountUuid", "ConfigID", "TeamIndex", "Position", "Forward", "Level", "Hp", "MaxHp", "Name", "Speed", "Cds", "Mp", "MpMax" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CreateMissile), global::Proto.Notify_CreateMissile.Parser, new[]{ "Index", "ReleaserIndex", "ResourcesPath", "Speed", "FromBone", "ToBone", "Offset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterSetPosition), global::Proto.Notify_CharacterSetPosition.Parser, new[]{ "Index", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterAlpha), global::Proto.Notify_CharacterAlpha.Parser, new[]{ "Index", "Alpha" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterSetForword), global::Proto.Notify_CharacterSetForword.Parser, new[]{ "Index", "Forward" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterSpeed), global::Proto.Notify_CharacterSpeed.Parser, new[]{ "Index", "Speed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_LayoutPlayMotion), global::Proto.Notify_LayoutPlayMotion.Parser, new[]{ "Index", "Motion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_LookAtCharacter), global::Proto.Notify_LookAtCharacter.Parser, new[]{ "Index", "Target" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterMoveTo), global::Proto.Notify_CharacterMoveTo.Parser, new[]{ "Index", "Position", "Target", "StopDis" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterStopMove), global::Proto.Notify_CharacterStopMove.Parser, new[]{ "Index", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterDeath), global::Proto.Notify_CharacterDeath.Parser, new[]{ "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterPriorityMove), global::Proto.Notify_CharacterPriorityMove.Parser, new[]{ "Index", "PriorityMove" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterSetScale), global::Proto.Notify_CharacterSetScale.Parser, new[]{ "Index", "Scale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterAttachMagic), global::Proto.Notify_CharacterAttachMagic.Parser, new[]{ "Index", "MagicId", "CompletedTime", "MType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterMoveForward), global::Proto.Notify_CharacterMoveForward.Parser, new[]{ "Index", "Position", "Forward" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_PropertyValue), global::Proto.Notify_PropertyValue.Parser, new[]{ "Index", "Type", "FinallyValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_HPChange), global::Proto.Notify_HPChange.Parser, new[]{ "Index", "Hp", "Cur", "Max" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_MPChange), global::Proto.Notify_MPChange.Parser, new[]{ "Index", "Mp", "Cur", "Max" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_DamageResult), global::Proto.Notify_DamageResult.Parser, new[]{ "Index", "TargetIndex", "IsMissed", "Damage", "CrtMult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_Drop), global::Proto.Notify_Drop.Parser, new[]{ "Index", "Item", "TeamIndex", "GroupIndex", "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_PlayerJoinState), global::Proto.Notify_PlayerJoinState.Parser, new[]{ "AccountUuid", "TimeNow", "Gold", "Package" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterLock), global::Proto.Notify_CharacterLock.Parser, new[]{ "Index", "Lock" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterPush), global::Proto.Notify_CharacterPush.Parser, new[]{ "Index", "Length", "Speed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterRelive), global::Proto.Notify_CharacterRelive.Parser, new[]{ "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_BattleItemChangeGroupIndex), global::Proto.Notify_BattleItemChangeGroupIndex.Parser, new[]{ "Index", "GroupIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_DropGold), global::Proto.Notify_DropGold.Parser, new[]{ "TotalGold", "Gold" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_PlayTimeLine), global::Proto.Notify_PlayTimeLine.Parser, new[]{ "Index", "Path" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_SyncServerTime), global::Proto.Notify_SyncServerTime.Parser, new[]{ "ServerNow" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum MoveType {
    /// <summary>
    ///普通移动
    /// </summary>
    [pbr::OriginalName("NormalMove")] NormalMove = 0,
    /// <summary>
    ///后退
    /// </summary>
    [pbr::OriginalName("Back")] Back = 1,
    /// <summary>
    ///跳跃
    /// </summary>
    [pbr::OriginalName("Jump")] Jump = 2,
  }

  #endregion

  #region Messages
  public sealed partial class C2B_JoinBattle : pb::IMessage<C2B_JoinBattle> {
    private static readonly pb::MessageParser<C2B_JoinBattle> _parser = new pb::MessageParser<C2B_JoinBattle>(() => new C2B_JoinBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2B_JoinBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_JoinBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_JoinBattle(C2B_JoinBattle other) : this() {
      mapID_ = other.mapID_;
      session_ = other.session_;
      accountUuid_ = other.accountUuid_;
      version_ = other.version_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_JoinBattle Clone() {
      return new C2B_JoinBattle(this);
    }

    /// <summary>Field number for the "MapID" field.</summary>
    public const int MapIDFieldNumber = 1;
    private int mapID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapID {
      get { return mapID_; }
      set {
        mapID_ = value;
      }
    }

    /// <summary>Field number for the "Session" field.</summary>
    public const int SessionFieldNumber = 2;
    private string session_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Session {
      get { return session_; }
      set {
        session_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AccountUuid" field.</summary>
    public const int AccountUuidFieldNumber = 3;
    private string accountUuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountUuid {
      get { return accountUuid_; }
      set {
        accountUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 4;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2B_JoinBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2B_JoinBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapID != other.MapID) return false;
      if (Session != other.Session) return false;
      if (AccountUuid != other.AccountUuid) return false;
      if (Version != other.Version) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapID != 0) hash ^= MapID.GetHashCode();
      if (Session.Length != 0) hash ^= Session.GetHashCode();
      if (AccountUuid.Length != 0) hash ^= AccountUuid.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MapID);
      }
      if (Session.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Session);
      }
      if (AccountUuid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AccountUuid);
      }
      if (Version != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapID);
      }
      if (Session.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Session);
      }
      if (AccountUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountUuid);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2B_JoinBattle other) {
      if (other == null) {
        return;
      }
      if (other.MapID != 0) {
        MapID = other.MapID;
      }
      if (other.Session.Length != 0) {
        Session = other.Session;
      }
      if (other.AccountUuid.Length != 0) {
        AccountUuid = other.AccountUuid;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapID = input.ReadInt32();
            break;
          }
          case 18: {
            Session = input.ReadString();
            break;
          }
          case 26: {
            AccountUuid = input.ReadString();
            break;
          }
          case 32: {
            Version = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_JoinBattle : pb::IMessage<B2C_JoinBattle> {
    private static readonly pb::MessageParser<B2C_JoinBattle> _parser = new pb::MessageParser<B2C_JoinBattle>(() => new B2C_JoinBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_JoinBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_JoinBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_JoinBattle(B2C_JoinBattle other) : this() {
      code_ = other.code_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_JoinBattle Clone() {
      return new B2C_JoinBattle(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_JoinBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_JoinBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_JoinBattle other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            code_ = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2B_ExitBattle : pb::IMessage<C2B_ExitBattle> {
    private static readonly pb::MessageParser<C2B_ExitBattle> _parser = new pb::MessageParser<C2B_ExitBattle>(() => new C2B_ExitBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2B_ExitBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_ExitBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_ExitBattle(C2B_ExitBattle other) : this() {
      accountUuid_ = other.accountUuid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_ExitBattle Clone() {
      return new C2B_ExitBattle(this);
    }

    /// <summary>Field number for the "AccountUuid" field.</summary>
    public const int AccountUuidFieldNumber = 1;
    private string accountUuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountUuid {
      get { return accountUuid_; }
      set {
        accountUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2B_ExitBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2B_ExitBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountUuid != other.AccountUuid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountUuid.Length != 0) hash ^= AccountUuid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountUuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountUuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountUuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2B_ExitBattle other) {
      if (other == null) {
        return;
      }
      if (other.AccountUuid.Length != 0) {
        AccountUuid = other.AccountUuid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountUuid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_ExitBattle : pb::IMessage<B2C_ExitBattle> {
    private static readonly pb::MessageParser<B2C_ExitBattle> _parser = new pb::MessageParser<B2C_ExitBattle>(() => new B2C_ExitBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_ExitBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_ExitBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_ExitBattle(B2C_ExitBattle other) : this() {
      code_ = other.code_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_ExitBattle Clone() {
      return new B2C_ExitBattle(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_ExitBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_ExitBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_ExitBattle other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            code_ = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Action_CollectItem : pb::IMessage<Action_CollectItem> {
    private static readonly pb::MessageParser<Action_CollectItem> _parser = new pb::MessageParser<Action_CollectItem>(() => new Action_CollectItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Action_CollectItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_CollectItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_CollectItem(Action_CollectItem other) : this() {
      index_ = other.index_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_CollectItem Clone() {
      return new Action_CollectItem(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Action_CollectItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Action_CollectItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Action_CollectItem other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///点击释放技能
  /// </summary>
  public sealed partial class Action_ClickSkillIndex : pb::IMessage<Action_ClickSkillIndex> {
    private static readonly pb::MessageParser<Action_ClickSkillIndex> _parser = new pb::MessageParser<Action_ClickSkillIndex>(() => new Action_ClickSkillIndex());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Action_ClickSkillIndex> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_ClickSkillIndex() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_ClickSkillIndex(Action_ClickSkillIndex other) : this() {
      magicId_ = other.magicId_;
      target_ = other.target_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_ClickSkillIndex Clone() {
      return new Action_ClickSkillIndex(this);
    }

    /// <summary>Field number for the "MagicId" field.</summary>
    public const int MagicIdFieldNumber = 1;
    private int magicId_;
    /// <summary>
    ///技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicId {
      get { return magicId_; }
      set {
        magicId_ = value;
      }
    }

    /// <summary>Field number for the "Target" field.</summary>
    public const int TargetFieldNumber = 2;
    private int target_;
    /// <summary>
    ///技能目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Action_ClickSkillIndex);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Action_ClickSkillIndex other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MagicId != other.MagicId) return false;
      if (Target != other.Target) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MagicId != 0) hash ^= MagicId.GetHashCode();
      if (Target != 0) hash ^= Target.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MagicId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MagicId);
      }
      if (Target != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Target);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MagicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagicId);
      }
      if (Target != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Target);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Action_ClickSkillIndex other) {
      if (other == null) {
        return;
      }
      if (other.MagicId != 0) {
        MagicId = other.MagicId;
      }
      if (other.Target != 0) {
        Target = other.Target;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MagicId = input.ReadInt32();
            break;
          }
          case 16: {
            Target = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///自动寻敌
  /// </summary>
  public sealed partial class Action_AutoFindTarget : pb::IMessage<Action_AutoFindTarget> {
    private static readonly pb::MessageParser<Action_AutoFindTarget> _parser = new pb::MessageParser<Action_AutoFindTarget>(() => new Action_AutoFindTarget());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Action_AutoFindTarget> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_AutoFindTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_AutoFindTarget(Action_AutoFindTarget other) : this() {
      auto_ = other.auto_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_AutoFindTarget Clone() {
      return new Action_AutoFindTarget(this);
    }

    /// <summary>Field number for the "Auto" field.</summary>
    public const int AutoFieldNumber = 1;
    private bool auto_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Auto {
      get { return auto_; }
      set {
        auto_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Action_AutoFindTarget);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Action_AutoFindTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Auto != other.Auto) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Auto != false) hash ^= Auto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Auto != false) {
        output.WriteRawTag(8);
        output.WriteBool(Auto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Auto != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Action_AutoFindTarget other) {
      if (other == null) {
        return;
      }
      if (other.Auto != false) {
        Auto = other.Auto;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Auto = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Action_MoveDir : pb::IMessage<Action_MoveDir> {
    private static readonly pb::MessageParser<Action_MoveDir> _parser = new pb::MessageParser<Action_MoveDir>(() => new Action_MoveDir());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Action_MoveDir> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_MoveDir() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_MoveDir(Action_MoveDir other) : this() {
      Forward = other.forward_ != null ? other.Forward.Clone() : null;
      fast_ = other.fast_;
      Position = other.position_ != null ? other.Position.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_MoveDir Clone() {
      return new Action_MoveDir(this);
    }

    /// <summary>Field number for the "Forward" field.</summary>
    public const int ForwardFieldNumber = 1;
    private global::Proto.Vector3 forward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Forward {
      get { return forward_; }
      set {
        forward_ = value;
      }
    }

    /// <summary>Field number for the "Fast" field.</summary>
    public const int FastFieldNumber = 2;
    private bool fast_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Fast {
      get { return fast_; }
      set {
        fast_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::Proto.Vector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Action_MoveDir);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Action_MoveDir other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Forward, other.Forward)) return false;
      if (Fast != other.Fast) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (forward_ != null) hash ^= Forward.GetHashCode();
      if (Fast != false) hash ^= Fast.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (forward_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Forward);
      }
      if (Fast != false) {
        output.WriteRawTag(16);
        output.WriteBool(Fast);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (forward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Forward);
      }
      if (Fast != false) {
        size += 1 + 1;
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Action_MoveDir other) {
      if (other == null) {
        return;
      }
      if (other.forward_ != null) {
        if (forward_ == null) {
          forward_ = new global::Proto.Vector3();
        }
        Forward.MergeFrom(other.Forward);
      }
      if (other.Fast != false) {
        Fast = other.Fast;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Proto.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (forward_ == null) {
              forward_ = new global::Proto.Vector3();
            }
            input.ReadMessage(forward_);
            break;
          }
          case 16: {
            Fast = input.ReadBool();
            break;
          }
          case 26: {
            if (position_ == null) {
              position_ = new global::Proto.Vector3();
            }
            input.ReadMessage(position_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Action_NormalAttack : pb::IMessage<Action_NormalAttack> {
    private static readonly pb::MessageParser<Action_NormalAttack> _parser = new pb::MessageParser<Action_NormalAttack>(() => new Action_NormalAttack());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Action_NormalAttack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_NormalAttack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_NormalAttack(Action_NormalAttack other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_NormalAttack Clone() {
      return new Action_NormalAttack(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Action_NormalAttack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Action_NormalAttack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Action_NormalAttack other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class Action_UseItem : pb::IMessage<Action_UseItem> {
    private static readonly pb::MessageParser<Action_UseItem> _parser = new pb::MessageParser<Action_UseItem>(() => new Action_UseItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Action_UseItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_UseItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_UseItem(Action_UseItem other) : this() {
      itemId_ = other.itemId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_UseItem Clone() {
      return new Action_UseItem(this);
    }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Action_UseItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Action_UseItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Action_UseItem other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///元素退出场景
  /// </summary>
  public sealed partial class Notify_ElementExitState : pb::IMessage<Notify_ElementExitState> {
    private static readonly pb::MessageParser<Notify_ElementExitState> _parser = new pb::MessageParser<Notify_ElementExitState>(() => new Notify_ElementExitState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_ElementExitState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_ElementExitState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_ElementExitState(Notify_ElementExitState other) : this() {
      index_ = other.index_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_ElementExitState Clone() {
      return new Notify_ElementExitState(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_ElementExitState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_ElementExitState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_ElementExitState other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///创建一个释放者
  /// </summary>
  public sealed partial class Notify_CreateReleaser : pb::IMessage<Notify_CreateReleaser> {
    private static readonly pb::MessageParser<Notify_CreateReleaser> _parser = new pb::MessageParser<Notify_CreateReleaser>(() => new Notify_CreateReleaser());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CreateReleaser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CreateReleaser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CreateReleaser(Notify_CreateReleaser other) : this() {
      index_ = other.index_;
      releaserIndex_ = other.releaserIndex_;
      targetIndex_ = other.targetIndex_;
      magicKey_ = other.magicKey_;
      Position = other.position_ != null ? other.Position.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CreateReleaser Clone() {
      return new Notify_CreateReleaser(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "ReleaserIndex" field.</summary>
    public const int ReleaserIndexFieldNumber = 2;
    private int releaserIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReleaserIndex {
      get { return releaserIndex_; }
      set {
        releaserIndex_ = value;
      }
    }

    /// <summary>Field number for the "TargetIndex" field.</summary>
    public const int TargetIndexFieldNumber = 3;
    private int targetIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetIndex {
      get { return targetIndex_; }
      set {
        targetIndex_ = value;
      }
    }

    /// <summary>Field number for the "MagicKey" field.</summary>
    public const int MagicKeyFieldNumber = 4;
    private string magicKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MagicKey {
      get { return magicKey_; }
      set {
        magicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 5;
    private global::Proto.Vector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CreateReleaser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CreateReleaser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (ReleaserIndex != other.ReleaserIndex) return false;
      if (TargetIndex != other.TargetIndex) return false;
      if (MagicKey != other.MagicKey) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (ReleaserIndex != 0) hash ^= ReleaserIndex.GetHashCode();
      if (TargetIndex != 0) hash ^= TargetIndex.GetHashCode();
      if (MagicKey.Length != 0) hash ^= MagicKey.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (ReleaserIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ReleaserIndex);
      }
      if (TargetIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetIndex);
      }
      if (MagicKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MagicKey);
      }
      if (position_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (ReleaserIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReleaserIndex);
      }
      if (TargetIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetIndex);
      }
      if (MagicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MagicKey);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CreateReleaser other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.ReleaserIndex != 0) {
        ReleaserIndex = other.ReleaserIndex;
      }
      if (other.TargetIndex != 0) {
        TargetIndex = other.TargetIndex;
      }
      if (other.MagicKey.Length != 0) {
        MagicKey = other.MagicKey;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Proto.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            ReleaserIndex = input.ReadInt32();
            break;
          }
          case 24: {
            TargetIndex = input.ReadInt32();
            break;
          }
          case 34: {
            MagicKey = input.ReadString();
            break;
          }
          case 42: {
            if (position_ == null) {
              position_ = new global::Proto.Vector3();
            }
            input.ReadMessage(position_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///战斗中的角色
  /// </summary>
  public sealed partial class Notify_CreateBattleCharacter : pb::IMessage<Notify_CreateBattleCharacter> {
    private static readonly pb::MessageParser<Notify_CreateBattleCharacter> _parser = new pb::MessageParser<Notify_CreateBattleCharacter>(() => new Notify_CreateBattleCharacter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CreateBattleCharacter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CreateBattleCharacter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CreateBattleCharacter(Notify_CreateBattleCharacter other) : this() {
      index_ = other.index_;
      accountUuid_ = other.accountUuid_;
      configID_ = other.configID_;
      teamIndex_ = other.teamIndex_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      Forward = other.forward_ != null ? other.Forward.Clone() : null;
      level_ = other.level_;
      hp_ = other.hp_;
      maxHp_ = other.maxHp_;
      name_ = other.name_;
      speed_ = other.speed_;
      cds_ = other.cds_.Clone();
      mp_ = other.mp_;
      mpMax_ = other.mpMax_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CreateBattleCharacter Clone() {
      return new Notify_CreateBattleCharacter(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "AccountUuid" field.</summary>
    public const int AccountUuidFieldNumber = 2;
    private string accountUuid_ = "";
    /// <summary>
    ///用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountUuid {
      get { return accountUuid_; }
      set {
        accountUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ConfigID" field.</summary>
    public const int ConfigIDFieldNumber = 3;
    private int configID_;
    /// <summary>
    ///配表ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigID {
      get { return configID_; }
      set {
        configID_ = value;
      }
    }

    /// <summary>Field number for the "TeamIndex" field.</summary>
    public const int TeamIndexFieldNumber = 4;
    private int teamIndex_;
    /// <summary>
    ///阵营ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamIndex {
      get { return teamIndex_; }
      set {
        teamIndex_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 5;
    private global::Proto.Vector3 position_;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "Forward" field.</summary>
    public const int ForwardFieldNumber = 6;
    private global::Proto.Vector3 forward_;
    /// <summary>
    ///朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Forward {
      get { return forward_; }
      set {
        forward_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 7;
    private int level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Hp" field.</summary>
    public const int HpFieldNumber = 8;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "MaxHp" field.</summary>
    public const int MaxHpFieldNumber = 9;
    private int maxHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 14;
    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 15;
    private float speed_;
    /// <summary>
    ///移动速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "Cds" field.</summary>
    public const int CdsFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Proto.HeroMagicData> _repeated_cds_codec
        = pb::FieldCodec.ForMessage(130, global::Proto.HeroMagicData.Parser);
    private readonly pbc::RepeatedField<global::Proto.HeroMagicData> cds_ = new pbc::RepeatedField<global::Proto.HeroMagicData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.HeroMagicData> Cds {
      get { return cds_; }
    }

    /// <summary>Field number for the "Mp" field.</summary>
    public const int MpFieldNumber = 17;
    private int mp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mp {
      get { return mp_; }
      set {
        mp_ = value;
      }
    }

    /// <summary>Field number for the "MpMax" field.</summary>
    public const int MpMaxFieldNumber = 18;
    private int mpMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MpMax {
      get { return mpMax_; }
      set {
        mpMax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CreateBattleCharacter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CreateBattleCharacter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (AccountUuid != other.AccountUuid) return false;
      if (ConfigID != other.ConfigID) return false;
      if (TeamIndex != other.TeamIndex) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Forward, other.Forward)) return false;
      if (Level != other.Level) return false;
      if (Hp != other.Hp) return false;
      if (MaxHp != other.MaxHp) return false;
      if (Name != other.Name) return false;
      if (Speed != other.Speed) return false;
      if(!cds_.Equals(other.cds_)) return false;
      if (Mp != other.Mp) return false;
      if (MpMax != other.MpMax) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (AccountUuid.Length != 0) hash ^= AccountUuid.GetHashCode();
      if (ConfigID != 0) hash ^= ConfigID.GetHashCode();
      if (TeamIndex != 0) hash ^= TeamIndex.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (forward_ != null) hash ^= Forward.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (MaxHp != 0) hash ^= MaxHp.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Speed != 0F) hash ^= Speed.GetHashCode();
      hash ^= cds_.GetHashCode();
      if (Mp != 0) hash ^= Mp.GetHashCode();
      if (MpMax != 0) hash ^= MpMax.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (AccountUuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccountUuid);
      }
      if (ConfigID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ConfigID);
      }
      if (TeamIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TeamIndex);
      }
      if (position_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Position);
      }
      if (forward_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Forward);
      }
      if (Level != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Level);
      }
      if (Hp != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Hp);
      }
      if (MaxHp != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MaxHp);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Name);
      }
      if (Speed != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(Speed);
      }
      cds_.WriteTo(output, _repeated_cds_codec);
      if (Mp != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Mp);
      }
      if (MpMax != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(MpMax);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (AccountUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountUuid);
      }
      if (ConfigID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigID);
      }
      if (TeamIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamIndex);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (forward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Forward);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (MaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      size += cds_.CalculateSize(_repeated_cds_codec);
      if (Mp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Mp);
      }
      if (MpMax != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MpMax);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CreateBattleCharacter other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.AccountUuid.Length != 0) {
        AccountUuid = other.AccountUuid;
      }
      if (other.ConfigID != 0) {
        ConfigID = other.ConfigID;
      }
      if (other.TeamIndex != 0) {
        TeamIndex = other.TeamIndex;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Proto.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.forward_ != null) {
        if (forward_ == null) {
          forward_ = new global::Proto.Vector3();
        }
        Forward.MergeFrom(other.Forward);
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.MaxHp != 0) {
        MaxHp = other.MaxHp;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      cds_.Add(other.cds_);
      if (other.Mp != 0) {
        Mp = other.Mp;
      }
      if (other.MpMax != 0) {
        MpMax = other.MpMax;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            AccountUuid = input.ReadString();
            break;
          }
          case 24: {
            ConfigID = input.ReadInt32();
            break;
          }
          case 32: {
            TeamIndex = input.ReadInt32();
            break;
          }
          case 42: {
            if (position_ == null) {
              position_ = new global::Proto.Vector3();
            }
            input.ReadMessage(position_);
            break;
          }
          case 50: {
            if (forward_ == null) {
              forward_ = new global::Proto.Vector3();
            }
            input.ReadMessage(forward_);
            break;
          }
          case 56: {
            Level = input.ReadInt32();
            break;
          }
          case 64: {
            Hp = input.ReadInt32();
            break;
          }
          case 72: {
            MaxHp = input.ReadInt32();
            break;
          }
          case 114: {
            Name = input.ReadString();
            break;
          }
          case 125: {
            Speed = input.ReadFloat();
            break;
          }
          case 130: {
            cds_.AddEntriesFrom(input, _repeated_cds_codec);
            break;
          }
          case 136: {
            Mp = input.ReadInt32();
            break;
          }
          case 144: {
            MpMax = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///创建一个飞行物
  /// </summary>
  public sealed partial class Notify_CreateMissile : pb::IMessage<Notify_CreateMissile> {
    private static readonly pb::MessageParser<Notify_CreateMissile> _parser = new pb::MessageParser<Notify_CreateMissile>(() => new Notify_CreateMissile());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CreateMissile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CreateMissile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CreateMissile(Notify_CreateMissile other) : this() {
      index_ = other.index_;
      releaserIndex_ = other.releaserIndex_;
      resourcesPath_ = other.resourcesPath_;
      speed_ = other.speed_;
      fromBone_ = other.fromBone_;
      toBone_ = other.toBone_;
      Offset = other.offset_ != null ? other.Offset.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CreateMissile Clone() {
      return new Notify_CreateMissile(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "ReleaserIndex" field.</summary>
    public const int ReleaserIndexFieldNumber = 2;
    private int releaserIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReleaserIndex {
      get { return releaserIndex_; }
      set {
        releaserIndex_ = value;
      }
    }

    /// <summary>Field number for the "ResourcesPath" field.</summary>
    public const int ResourcesPathFieldNumber = 3;
    private string resourcesPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourcesPath {
      get { return resourcesPath_; }
      set {
        resourcesPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 4;
    private float speed_;
    /// <summary>
    ///速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "FromBone" field.</summary>
    public const int FromBoneFieldNumber = 6;
    private string fromBone_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FromBone {
      get { return fromBone_; }
      set {
        fromBone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ToBone" field.</summary>
    public const int ToBoneFieldNumber = 7;
    private string toBone_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToBone {
      get { return toBone_; }
      set {
        toBone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Offset" field.</summary>
    public const int OffsetFieldNumber = 8;
    private global::Proto.Vector3 offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CreateMissile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CreateMissile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (ReleaserIndex != other.ReleaserIndex) return false;
      if (ResourcesPath != other.ResourcesPath) return false;
      if (Speed != other.Speed) return false;
      if (FromBone != other.FromBone) return false;
      if (ToBone != other.ToBone) return false;
      if (!object.Equals(Offset, other.Offset)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (ReleaserIndex != 0) hash ^= ReleaserIndex.GetHashCode();
      if (ResourcesPath.Length != 0) hash ^= ResourcesPath.GetHashCode();
      if (Speed != 0F) hash ^= Speed.GetHashCode();
      if (FromBone.Length != 0) hash ^= FromBone.GetHashCode();
      if (ToBone.Length != 0) hash ^= ToBone.GetHashCode();
      if (offset_ != null) hash ^= Offset.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (ReleaserIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ReleaserIndex);
      }
      if (ResourcesPath.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ResourcesPath);
      }
      if (Speed != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Speed);
      }
      if (FromBone.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FromBone);
      }
      if (ToBone.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ToBone);
      }
      if (offset_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Offset);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (ReleaserIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReleaserIndex);
      }
      if (ResourcesPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourcesPath);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (FromBone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FromBone);
      }
      if (ToBone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToBone);
      }
      if (offset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offset);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CreateMissile other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.ReleaserIndex != 0) {
        ReleaserIndex = other.ReleaserIndex;
      }
      if (other.ResourcesPath.Length != 0) {
        ResourcesPath = other.ResourcesPath;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.FromBone.Length != 0) {
        FromBone = other.FromBone;
      }
      if (other.ToBone.Length != 0) {
        ToBone = other.ToBone;
      }
      if (other.offset_ != null) {
        if (offset_ == null) {
          offset_ = new global::Proto.Vector3();
        }
        Offset.MergeFrom(other.Offset);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            ReleaserIndex = input.ReadInt32();
            break;
          }
          case 26: {
            ResourcesPath = input.ReadString();
            break;
          }
          case 37: {
            Speed = input.ReadFloat();
            break;
          }
          case 50: {
            FromBone = input.ReadString();
            break;
          }
          case 58: {
            ToBone = input.ReadString();
            break;
          }
          case 66: {
            if (offset_ == null) {
              offset_ = new global::Proto.Vector3();
            }
            input.ReadMessage(offset_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterSetPosition : pb::IMessage<Notify_CharacterSetPosition> {
    private static readonly pb::MessageParser<Notify_CharacterSetPosition> _parser = new pb::MessageParser<Notify_CharacterSetPosition>(() => new Notify_CharacterSetPosition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterSetPosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterSetPosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterSetPosition(Notify_CharacterSetPosition other) : this() {
      index_ = other.index_;
      Position = other.position_ != null ? other.Position.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterSetPosition Clone() {
      return new Notify_CharacterSetPosition(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Proto.Vector3 position_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterSetPosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterSetPosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterSetPosition other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Proto.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            if (position_ == null) {
              position_ = new global::Proto.Vector3();
            }
            input.ReadMessage(position_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterAlpha : pb::IMessage<Notify_CharacterAlpha> {
    private static readonly pb::MessageParser<Notify_CharacterAlpha> _parser = new pb::MessageParser<Notify_CharacterAlpha>(() => new Notify_CharacterAlpha());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterAlpha> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterAlpha() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterAlpha(Notify_CharacterAlpha other) : this() {
      index_ = other.index_;
      alpha_ = other.alpha_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterAlpha Clone() {
      return new Notify_CharacterAlpha(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    /// <summary>
    ///角色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Alpha" field.</summary>
    public const int AlphaFieldNumber = 2;
    private float alpha_;
    /// <summary>
    ///最终的Alpha
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterAlpha);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterAlpha other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Alpha != other.Alpha) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Alpha != 0F) hash ^= Alpha.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Alpha != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Alpha);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Alpha != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterAlpha other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Alpha != 0F) {
        Alpha = other.Alpha;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 21: {
            Alpha = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterSetForword : pb::IMessage<Notify_CharacterSetForword> {
    private static readonly pb::MessageParser<Notify_CharacterSetForword> _parser = new pb::MessageParser<Notify_CharacterSetForword>(() => new Notify_CharacterSetForword());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterSetForword> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterSetForword() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterSetForword(Notify_CharacterSetForword other) : this() {
      index_ = other.index_;
      Forward = other.forward_ != null ? other.Forward.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterSetForword Clone() {
      return new Notify_CharacterSetForword(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Forward" field.</summary>
    public const int ForwardFieldNumber = 2;
    private global::Proto.Vector3 forward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Forward {
      get { return forward_; }
      set {
        forward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterSetForword);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterSetForword other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (!object.Equals(Forward, other.Forward)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (forward_ != null) hash ^= Forward.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (forward_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Forward);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (forward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Forward);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterSetForword other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.forward_ != null) {
        if (forward_ == null) {
          forward_ = new global::Proto.Vector3();
        }
        Forward.MergeFrom(other.Forward);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            if (forward_ == null) {
              forward_ = new global::Proto.Vector3();
            }
            input.ReadMessage(forward_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterSpeed : pb::IMessage<Notify_CharacterSpeed> {
    private static readonly pb::MessageParser<Notify_CharacterSpeed> _parser = new pb::MessageParser<Notify_CharacterSpeed>(() => new Notify_CharacterSpeed());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterSpeed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterSpeed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterSpeed(Notify_CharacterSpeed other) : this() {
      index_ = other.index_;
      speed_ = other.speed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterSpeed Clone() {
      return new Notify_CharacterSpeed(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 2;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterSpeed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterSpeed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Speed != other.Speed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Speed != 0F) hash ^= Speed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Speed != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Speed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterSpeed other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 21: {
            Speed = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_LayoutPlayMotion : pb::IMessage<Notify_LayoutPlayMotion> {
    private static readonly pb::MessageParser<Notify_LayoutPlayMotion> _parser = new pb::MessageParser<Notify_LayoutPlayMotion>(() => new Notify_LayoutPlayMotion());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_LayoutPlayMotion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_LayoutPlayMotion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_LayoutPlayMotion(Notify_LayoutPlayMotion other) : this() {
      index_ = other.index_;
      motion_ = other.motion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_LayoutPlayMotion Clone() {
      return new Notify_LayoutPlayMotion(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Motion" field.</summary>
    public const int MotionFieldNumber = 2;
    private string motion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Motion {
      get { return motion_; }
      set {
        motion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_LayoutPlayMotion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_LayoutPlayMotion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Motion != other.Motion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Motion.Length != 0) hash ^= Motion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Motion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Motion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Motion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Motion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_LayoutPlayMotion other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Motion.Length != 0) {
        Motion = other.Motion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            Motion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_LookAtCharacter : pb::IMessage<Notify_LookAtCharacter> {
    private static readonly pb::MessageParser<Notify_LookAtCharacter> _parser = new pb::MessageParser<Notify_LookAtCharacter>(() => new Notify_LookAtCharacter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_LookAtCharacter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_LookAtCharacter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_LookAtCharacter(Notify_LookAtCharacter other) : this() {
      index_ = other.index_;
      target_ = other.target_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_LookAtCharacter Clone() {
      return new Notify_LookAtCharacter(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    /// <summary>
    ///源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Target" field.</summary>
    public const int TargetFieldNumber = 2;
    private int target_;
    /// <summary>
    ///目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_LookAtCharacter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_LookAtCharacter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Target != other.Target) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Target != 0) hash ^= Target.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Target != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Target);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Target != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Target);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_LookAtCharacter other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Target != 0) {
        Target = other.Target;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Target = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterMoveTo : pb::IMessage<Notify_CharacterMoveTo> {
    private static readonly pb::MessageParser<Notify_CharacterMoveTo> _parser = new pb::MessageParser<Notify_CharacterMoveTo>(() => new Notify_CharacterMoveTo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterMoveTo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterMoveTo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterMoveTo(Notify_CharacterMoveTo other) : this() {
      index_ = other.index_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      Target = other.target_ != null ? other.Target.Clone() : null;
      stopDis_ = other.stopDis_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterMoveTo Clone() {
      return new Notify_CharacterMoveTo(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Proto.Vector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "Target" field.</summary>
    public const int TargetFieldNumber = 3;
    private global::Proto.Vector3 target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "StopDis" field.</summary>
    public const int StopDisFieldNumber = 4;
    private float stopDis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StopDis {
      get { return stopDis_; }
      set {
        stopDis_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterMoveTo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterMoveTo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Target, other.Target)) return false;
      if (StopDis != other.StopDis) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (target_ != null) hash ^= Target.GetHashCode();
      if (StopDis != 0F) hash ^= StopDis.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (target_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Target);
      }
      if (StopDis != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(StopDis);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (StopDis != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterMoveTo other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Proto.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.target_ != null) {
        if (target_ == null) {
          target_ = new global::Proto.Vector3();
        }
        Target.MergeFrom(other.Target);
      }
      if (other.StopDis != 0F) {
        StopDis = other.StopDis;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            if (position_ == null) {
              position_ = new global::Proto.Vector3();
            }
            input.ReadMessage(position_);
            break;
          }
          case 26: {
            if (target_ == null) {
              target_ = new global::Proto.Vector3();
            }
            input.ReadMessage(target_);
            break;
          }
          case 37: {
            StopDis = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterStopMove : pb::IMessage<Notify_CharacterStopMove> {
    private static readonly pb::MessageParser<Notify_CharacterStopMove> _parser = new pb::MessageParser<Notify_CharacterStopMove>(() => new Notify_CharacterStopMove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterStopMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterStopMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterStopMove(Notify_CharacterStopMove other) : this() {
      index_ = other.index_;
      Position = other.position_ != null ? other.Position.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterStopMove Clone() {
      return new Notify_CharacterStopMove(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Proto.Vector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterStopMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterStopMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterStopMove other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Proto.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            if (position_ == null) {
              position_ = new global::Proto.Vector3();
            }
            input.ReadMessage(position_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterDeath : pb::IMessage<Notify_CharacterDeath> {
    private static readonly pb::MessageParser<Notify_CharacterDeath> _parser = new pb::MessageParser<Notify_CharacterDeath>(() => new Notify_CharacterDeath());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterDeath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterDeath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterDeath(Notify_CharacterDeath other) : this() {
      index_ = other.index_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterDeath Clone() {
      return new Notify_CharacterDeath(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterDeath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterDeath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterDeath other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterPriorityMove : pb::IMessage<Notify_CharacterPriorityMove> {
    private static readonly pb::MessageParser<Notify_CharacterPriorityMove> _parser = new pb::MessageParser<Notify_CharacterPriorityMove>(() => new Notify_CharacterPriorityMove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterPriorityMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterPriorityMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterPriorityMove(Notify_CharacterPriorityMove other) : this() {
      index_ = other.index_;
      priorityMove_ = other.priorityMove_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterPriorityMove Clone() {
      return new Notify_CharacterPriorityMove(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "PriorityMove" field.</summary>
    public const int PriorityMoveFieldNumber = 2;
    private float priorityMove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PriorityMove {
      get { return priorityMove_; }
      set {
        priorityMove_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterPriorityMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterPriorityMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (PriorityMove != other.PriorityMove) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (PriorityMove != 0F) hash ^= PriorityMove.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (PriorityMove != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PriorityMove);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (PriorityMove != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterPriorityMove other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.PriorityMove != 0F) {
        PriorityMove = other.PriorityMove;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 21: {
            PriorityMove = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterSetScale : pb::IMessage<Notify_CharacterSetScale> {
    private static readonly pb::MessageParser<Notify_CharacterSetScale> _parser = new pb::MessageParser<Notify_CharacterSetScale>(() => new Notify_CharacterSetScale());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterSetScale> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterSetScale() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterSetScale(Notify_CharacterSetScale other) : this() {
      index_ = other.index_;
      scale_ = other.scale_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterSetScale Clone() {
      return new Notify_CharacterSetScale(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterSetScale);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterSetScale other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Scale != other.Scale) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Scale != 0F) hash ^= Scale.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Scale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Scale);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterSetScale other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 21: {
            Scale = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterAttachMagic : pb::IMessage<Notify_CharacterAttachMagic> {
    private static readonly pb::MessageParser<Notify_CharacterAttachMagic> _parser = new pb::MessageParser<Notify_CharacterAttachMagic>(() => new Notify_CharacterAttachMagic());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterAttachMagic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterAttachMagic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterAttachMagic(Notify_CharacterAttachMagic other) : this() {
      index_ = other.index_;
      magicId_ = other.magicId_;
      completedTime_ = other.completedTime_;
      mType_ = other.mType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterAttachMagic Clone() {
      return new Notify_CharacterAttachMagic(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "MagicId" field.</summary>
    public const int MagicIdFieldNumber = 2;
    private int magicId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicId {
      get { return magicId_; }
      set {
        magicId_ = value;
      }
    }

    /// <summary>Field number for the "CompletedTime" field.</summary>
    public const int CompletedTimeFieldNumber = 3;
    private float completedTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CompletedTime {
      get { return completedTime_; }
      set {
        completedTime_ = value;
      }
    }

    /// <summary>Field number for the "mType" field.</summary>
    public const int MTypeFieldNumber = 4;
    private global::Proto.MagicType mType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.MagicType MType {
      get { return mType_; }
      set {
        mType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterAttachMagic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterAttachMagic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (MagicId != other.MagicId) return false;
      if (CompletedTime != other.CompletedTime) return false;
      if (MType != other.MType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (MagicId != 0) hash ^= MagicId.GetHashCode();
      if (CompletedTime != 0F) hash ^= CompletedTime.GetHashCode();
      if (MType != 0) hash ^= MType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (MagicId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MagicId);
      }
      if (CompletedTime != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(CompletedTime);
      }
      if (MType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) MType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (MagicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagicId);
      }
      if (CompletedTime != 0F) {
        size += 1 + 4;
      }
      if (MType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterAttachMagic other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.MagicId != 0) {
        MagicId = other.MagicId;
      }
      if (other.CompletedTime != 0F) {
        CompletedTime = other.CompletedTime;
      }
      if (other.MType != 0) {
        MType = other.MType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            MagicId = input.ReadInt32();
            break;
          }
          case 29: {
            CompletedTime = input.ReadFloat();
            break;
          }
          case 32: {
            mType_ = (global::Proto.MagicType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterMoveForward : pb::IMessage<Notify_CharacterMoveForward> {
    private static readonly pb::MessageParser<Notify_CharacterMoveForward> _parser = new pb::MessageParser<Notify_CharacterMoveForward>(() => new Notify_CharacterMoveForward());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterMoveForward> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterMoveForward() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterMoveForward(Notify_CharacterMoveForward other) : this() {
      index_ = other.index_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      Forward = other.forward_ != null ? other.Forward.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterMoveForward Clone() {
      return new Notify_CharacterMoveForward(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Proto.Vector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "Forward" field.</summary>
    public const int ForwardFieldNumber = 3;
    private global::Proto.Vector3 forward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Forward {
      get { return forward_; }
      set {
        forward_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterMoveForward);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterMoveForward other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Forward, other.Forward)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (forward_ != null) hash ^= Forward.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (forward_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Forward);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (forward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Forward);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterMoveForward other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Proto.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.forward_ != null) {
        if (forward_ == null) {
          forward_ = new global::Proto.Vector3();
        }
        Forward.MergeFrom(other.Forward);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            if (position_ == null) {
              position_ = new global::Proto.Vector3();
            }
            input.ReadMessage(position_);
            break;
          }
          case 26: {
            if (forward_ == null) {
              forward_ = new global::Proto.Vector3();
            }
            input.ReadMessage(forward_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///属性修改
  /// </summary>
  public sealed partial class Notify_PropertyValue : pb::IMessage<Notify_PropertyValue> {
    private static readonly pb::MessageParser<Notify_PropertyValue> _parser = new pb::MessageParser<Notify_PropertyValue>(() => new Notify_PropertyValue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_PropertyValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_PropertyValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_PropertyValue(Notify_PropertyValue other) : this() {
      index_ = other.index_;
      type_ = other.type_;
      finallyValue_ = other.finallyValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_PropertyValue Clone() {
      return new Notify_PropertyValue(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Proto.HeroPropertyType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.HeroPropertyType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "FinallyValue" field.</summary>
    public const int FinallyValueFieldNumber = 3;
    private int finallyValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinallyValue {
      get { return finallyValue_; }
      set {
        finallyValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_PropertyValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_PropertyValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Type != other.Type) return false;
      if (FinallyValue != other.FinallyValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (FinallyValue != 0) hash ^= FinallyValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (FinallyValue != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FinallyValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (FinallyValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinallyValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_PropertyValue other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.FinallyValue != 0) {
        FinallyValue = other.FinallyValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            type_ = (global::Proto.HeroPropertyType) input.ReadEnum();
            break;
          }
          case 24: {
            FinallyValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///广播血量变化
  /// </summary>
  public sealed partial class Notify_HPChange : pb::IMessage<Notify_HPChange> {
    private static readonly pb::MessageParser<Notify_HPChange> _parser = new pb::MessageParser<Notify_HPChange>(() => new Notify_HPChange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_HPChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_HPChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_HPChange(Notify_HPChange other) : this() {
      index_ = other.index_;
      hp_ = other.hp_;
      cur_ = other.cur_;
      max_ = other.max_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_HPChange Clone() {
      return new Notify_HPChange(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Hp" field.</summary>
    public const int HpFieldNumber = 2;
    private int hp_;
    /// <summary>
    ///最终HP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "Cur" field.</summary>
    public const int CurFieldNumber = 3;
    private int cur_;
    /// <summary>
    ///HP变化值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cur {
      get { return cur_; }
      set {
        cur_ = value;
      }
    }

    /// <summary>Field number for the "Max" field.</summary>
    public const int MaxFieldNumber = 4;
    private int max_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_HPChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_HPChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Hp != other.Hp) return false;
      if (Cur != other.Cur) return false;
      if (Max != other.Max) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (Cur != 0) hash ^= Cur.GetHashCode();
      if (Max != 0) hash ^= Max.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Hp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Hp);
      }
      if (Cur != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cur);
      }
      if (Max != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Max);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (Cur != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cur);
      }
      if (Max != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Max);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_HPChange other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.Cur != 0) {
        Cur = other.Cur;
      }
      if (other.Max != 0) {
        Max = other.Max;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Hp = input.ReadInt32();
            break;
          }
          case 24: {
            Cur = input.ReadInt32();
            break;
          }
          case 32: {
            Max = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_MPChange : pb::IMessage<Notify_MPChange> {
    private static readonly pb::MessageParser<Notify_MPChange> _parser = new pb::MessageParser<Notify_MPChange>(() => new Notify_MPChange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_MPChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_MPChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_MPChange(Notify_MPChange other) : this() {
      index_ = other.index_;
      mp_ = other.mp_;
      cur_ = other.cur_;
      max_ = other.max_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_MPChange Clone() {
      return new Notify_MPChange(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Mp" field.</summary>
    public const int MpFieldNumber = 2;
    private int mp_;
    /// <summary>
    ///最终MP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mp {
      get { return mp_; }
      set {
        mp_ = value;
      }
    }

    /// <summary>Field number for the "Cur" field.</summary>
    public const int CurFieldNumber = 3;
    private int cur_;
    /// <summary>
    ///MP变化值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cur {
      get { return cur_; }
      set {
        cur_ = value;
      }
    }

    /// <summary>Field number for the "Max" field.</summary>
    public const int MaxFieldNumber = 4;
    private int max_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_MPChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_MPChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Mp != other.Mp) return false;
      if (Cur != other.Cur) return false;
      if (Max != other.Max) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Mp != 0) hash ^= Mp.GetHashCode();
      if (Cur != 0) hash ^= Cur.GetHashCode();
      if (Max != 0) hash ^= Max.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Mp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Mp);
      }
      if (Cur != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cur);
      }
      if (Max != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Max);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Mp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mp);
      }
      if (Cur != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cur);
      }
      if (Max != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Max);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_MPChange other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Mp != 0) {
        Mp = other.Mp;
      }
      if (other.Cur != 0) {
        Cur = other.Cur;
      }
      if (other.Max != 0) {
        Max = other.Max;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Mp = input.ReadInt32();
            break;
          }
          case 24: {
            Cur = input.ReadInt32();
            break;
          }
          case 32: {
            Max = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_DamageResult : pb::IMessage<Notify_DamageResult> {
    private static readonly pb::MessageParser<Notify_DamageResult> _parser = new pb::MessageParser<Notify_DamageResult>(() => new Notify_DamageResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_DamageResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_DamageResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_DamageResult(Notify_DamageResult other) : this() {
      index_ = other.index_;
      targetIndex_ = other.targetIndex_;
      isMissed_ = other.isMissed_;
      damage_ = other.damage_;
      crtMult_ = other.crtMult_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_DamageResult Clone() {
      return new Notify_DamageResult(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "TargetIndex" field.</summary>
    public const int TargetIndexFieldNumber = 2;
    private int targetIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetIndex {
      get { return targetIndex_; }
      set {
        targetIndex_ = value;
      }
    }

    /// <summary>Field number for the "IsMissed" field.</summary>
    public const int IsMissedFieldNumber = 3;
    private bool isMissed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMissed {
      get { return isMissed_; }
      set {
        isMissed_ = value;
      }
    }

    /// <summary>Field number for the "Damage" field.</summary>
    public const int DamageFieldNumber = 4;
    private int damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "CrtMult" field.</summary>
    public const int CrtMultFieldNumber = 5;
    private int crtMult_;
    /// <summary>
    ///暴击
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CrtMult {
      get { return crtMult_; }
      set {
        crtMult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_DamageResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_DamageResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (TargetIndex != other.TargetIndex) return false;
      if (IsMissed != other.IsMissed) return false;
      if (Damage != other.Damage) return false;
      if (CrtMult != other.CrtMult) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (TargetIndex != 0) hash ^= TargetIndex.GetHashCode();
      if (IsMissed != false) hash ^= IsMissed.GetHashCode();
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (CrtMult != 0) hash ^= CrtMult.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (TargetIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetIndex);
      }
      if (IsMissed != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsMissed);
      }
      if (Damage != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Damage);
      }
      if (CrtMult != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CrtMult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (TargetIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetIndex);
      }
      if (IsMissed != false) {
        size += 1 + 1;
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (CrtMult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CrtMult);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_DamageResult other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.TargetIndex != 0) {
        TargetIndex = other.TargetIndex;
      }
      if (other.IsMissed != false) {
        IsMissed = other.IsMissed;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      if (other.CrtMult != 0) {
        CrtMult = other.CrtMult;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            TargetIndex = input.ReadInt32();
            break;
          }
          case 24: {
            IsMissed = input.ReadBool();
            break;
          }
          case 32: {
            Damage = input.ReadInt32();
            break;
          }
          case 40: {
            CrtMult = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_Drop : pb::IMessage<Notify_Drop> {
    private static readonly pb::MessageParser<Notify_Drop> _parser = new pb::MessageParser<Notify_Drop>(() => new Notify_Drop());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_Drop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_Drop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_Drop(Notify_Drop other) : this() {
      index_ = other.index_;
      Item = other.item_ != null ? other.Item.Clone() : null;
      teamIndex_ = other.teamIndex_;
      groupIndex_ = other.groupIndex_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_Drop Clone() {
      return new Notify_Drop(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Item" field.</summary>
    public const int ItemFieldNumber = 2;
    private global::Proto.PlayerItem item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.PlayerItem Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    /// <summary>Field number for the "TeamIndex" field.</summary>
    public const int TeamIndexFieldNumber = 3;
    private int teamIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamIndex {
      get { return teamIndex_; }
      set {
        teamIndex_ = value;
      }
    }

    /// <summary>Field number for the "GroupIndex" field.</summary>
    public const int GroupIndexFieldNumber = 4;
    private int groupIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupIndex {
      get { return groupIndex_; }
      set {
        groupIndex_ = value;
      }
    }

    /// <summary>Field number for the "Pos" field.</summary>
    public const int PosFieldNumber = 5;
    private global::Proto.Vector3 pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_Drop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_Drop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (!object.Equals(Item, other.Item)) return false;
      if (TeamIndex != other.TeamIndex) return false;
      if (GroupIndex != other.GroupIndex) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      if (TeamIndex != 0) hash ^= TeamIndex.GetHashCode();
      if (GroupIndex != 0) hash ^= GroupIndex.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (item_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Item);
      }
      if (TeamIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TeamIndex);
      }
      if (GroupIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GroupIndex);
      }
      if (pos_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (TeamIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamIndex);
      }
      if (GroupIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupIndex);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_Drop other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.item_ != null) {
        if (item_ == null) {
          item_ = new global::Proto.PlayerItem();
        }
        Item.MergeFrom(other.Item);
      }
      if (other.TeamIndex != 0) {
        TeamIndex = other.TeamIndex;
      }
      if (other.GroupIndex != 0) {
        GroupIndex = other.GroupIndex;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Proto.Vector3();
        }
        Pos.MergeFrom(other.Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            if (item_ == null) {
              item_ = new global::Proto.PlayerItem();
            }
            input.ReadMessage(item_);
            break;
          }
          case 24: {
            TeamIndex = input.ReadInt32();
            break;
          }
          case 32: {
            GroupIndex = input.ReadInt32();
            break;
          }
          case 42: {
            if (pos_ == null) {
              pos_ = new global::Proto.Vector3();
            }
            input.ReadMessage(pos_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_PlayerJoinState : pb::IMessage<Notify_PlayerJoinState> {
    private static readonly pb::MessageParser<Notify_PlayerJoinState> _parser = new pb::MessageParser<Notify_PlayerJoinState>(() => new Notify_PlayerJoinState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_PlayerJoinState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_PlayerJoinState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_PlayerJoinState(Notify_PlayerJoinState other) : this() {
      accountUuid_ = other.accountUuid_;
      timeNow_ = other.timeNow_;
      gold_ = other.gold_;
      Package = other.package_ != null ? other.Package.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_PlayerJoinState Clone() {
      return new Notify_PlayerJoinState(this);
    }

    /// <summary>Field number for the "AccountUuid" field.</summary>
    public const int AccountUuidFieldNumber = 1;
    private string accountUuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountUuid {
      get { return accountUuid_; }
      set {
        accountUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TimeNow" field.</summary>
    public const int TimeNowFieldNumber = 2;
    private float timeNow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TimeNow {
      get { return timeNow_; }
      set {
        timeNow_ = value;
      }
    }

    /// <summary>Field number for the "Gold" field.</summary>
    public const int GoldFieldNumber = 3;
    private int gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "Package" field.</summary>
    public const int PackageFieldNumber = 4;
    private global::Proto.PlayerPackage package_;
    /// <summary>
    ///道具列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.PlayerPackage Package {
      get { return package_; }
      set {
        package_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_PlayerJoinState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_PlayerJoinState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountUuid != other.AccountUuid) return false;
      if (TimeNow != other.TimeNow) return false;
      if (Gold != other.Gold) return false;
      if (!object.Equals(Package, other.Package)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountUuid.Length != 0) hash ^= AccountUuid.GetHashCode();
      if (TimeNow != 0F) hash ^= TimeNow.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (package_ != null) hash ^= Package.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountUuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountUuid);
      }
      if (TimeNow != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(TimeNow);
      }
      if (Gold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Gold);
      }
      if (package_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Package);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountUuid);
      }
      if (TimeNow != 0F) {
        size += 1 + 4;
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (package_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Package);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_PlayerJoinState other) {
      if (other == null) {
        return;
      }
      if (other.AccountUuid.Length != 0) {
        AccountUuid = other.AccountUuid;
      }
      if (other.TimeNow != 0F) {
        TimeNow = other.TimeNow;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      if (other.package_ != null) {
        if (package_ == null) {
          package_ = new global::Proto.PlayerPackage();
        }
        Package.MergeFrom(other.Package);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountUuid = input.ReadString();
            break;
          }
          case 21: {
            TimeNow = input.ReadFloat();
            break;
          }
          case 24: {
            Gold = input.ReadInt32();
            break;
          }
          case 34: {
            if (package_ == null) {
              package_ = new global::Proto.PlayerPackage();
            }
            input.ReadMessage(package_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterLock : pb::IMessage<Notify_CharacterLock> {
    private static readonly pb::MessageParser<Notify_CharacterLock> _parser = new pb::MessageParser<Notify_CharacterLock>(() => new Notify_CharacterLock());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterLock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterLock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterLock(Notify_CharacterLock other) : this() {
      index_ = other.index_;
      lock_ = other.lock_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterLock Clone() {
      return new Notify_CharacterLock(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Lock" field.</summary>
    public const int LockFieldNumber = 2;
    private int lock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lock {
      get { return lock_; }
      set {
        lock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterLock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterLock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Lock != other.Lock) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Lock != 0) hash ^= Lock.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Lock != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Lock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Lock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lock);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterLock other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Lock != 0) {
        Lock = other.Lock;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Lock = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterPush : pb::IMessage<Notify_CharacterPush> {
    private static readonly pb::MessageParser<Notify_CharacterPush> _parser = new pb::MessageParser<Notify_CharacterPush>(() => new Notify_CharacterPush());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterPush(Notify_CharacterPush other) : this() {
      index_ = other.index_;
      Length = other.length_ != null ? other.Length.Clone() : null;
      Speed = other.speed_ != null ? other.Speed.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterPush Clone() {
      return new Notify_CharacterPush(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Length" field.</summary>
    public const int LengthFieldNumber = 2;
    private global::Proto.Vector3 length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 3;
    private global::Proto.Vector3 speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (!object.Equals(Length, other.Length)) return false;
      if (!object.Equals(Speed, other.Speed)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (length_ != null) hash ^= Length.GetHashCode();
      if (speed_ != null) hash ^= Speed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (length_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Length);
      }
      if (speed_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Speed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (length_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Length);
      }
      if (speed_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Speed);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterPush other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.length_ != null) {
        if (length_ == null) {
          length_ = new global::Proto.Vector3();
        }
        Length.MergeFrom(other.Length);
      }
      if (other.speed_ != null) {
        if (speed_ == null) {
          speed_ = new global::Proto.Vector3();
        }
        Speed.MergeFrom(other.Speed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            if (length_ == null) {
              length_ = new global::Proto.Vector3();
            }
            input.ReadMessage(length_);
            break;
          }
          case 26: {
            if (speed_ == null) {
              speed_ = new global::Proto.Vector3();
            }
            input.ReadMessage(speed_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterRelive : pb::IMessage<Notify_CharacterRelive> {
    private static readonly pb::MessageParser<Notify_CharacterRelive> _parser = new pb::MessageParser<Notify_CharacterRelive>(() => new Notify_CharacterRelive());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterRelive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterRelive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterRelive(Notify_CharacterRelive other) : this() {
      index_ = other.index_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterRelive Clone() {
      return new Notify_CharacterRelive(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterRelive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterRelive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterRelive other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_BattleItemChangeGroupIndex : pb::IMessage<Notify_BattleItemChangeGroupIndex> {
    private static readonly pb::MessageParser<Notify_BattleItemChangeGroupIndex> _parser = new pb::MessageParser<Notify_BattleItemChangeGroupIndex>(() => new Notify_BattleItemChangeGroupIndex());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_BattleItemChangeGroupIndex> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_BattleItemChangeGroupIndex() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_BattleItemChangeGroupIndex(Notify_BattleItemChangeGroupIndex other) : this() {
      index_ = other.index_;
      groupIndex_ = other.groupIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_BattleItemChangeGroupIndex Clone() {
      return new Notify_BattleItemChangeGroupIndex(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "GroupIndex" field.</summary>
    public const int GroupIndexFieldNumber = 2;
    private int groupIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupIndex {
      get { return groupIndex_; }
      set {
        groupIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_BattleItemChangeGroupIndex);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_BattleItemChangeGroupIndex other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (GroupIndex != other.GroupIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (GroupIndex != 0) hash ^= GroupIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (GroupIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GroupIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (GroupIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_BattleItemChangeGroupIndex other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.GroupIndex != 0) {
        GroupIndex = other.GroupIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            GroupIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_DropGold : pb::IMessage<Notify_DropGold> {
    private static readonly pb::MessageParser<Notify_DropGold> _parser = new pb::MessageParser<Notify_DropGold>(() => new Notify_DropGold());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_DropGold> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_DropGold() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_DropGold(Notify_DropGold other) : this() {
      totalGold_ = other.totalGold_;
      gold_ = other.gold_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_DropGold Clone() {
      return new Notify_DropGold(this);
    }

    /// <summary>Field number for the "TotalGold" field.</summary>
    public const int TotalGoldFieldNumber = 1;
    private int totalGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalGold {
      get { return totalGold_; }
      set {
        totalGold_ = value;
      }
    }

    /// <summary>Field number for the "Gold" field.</summary>
    public const int GoldFieldNumber = 2;
    private int gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_DropGold);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_DropGold other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalGold != other.TotalGold) return false;
      if (Gold != other.Gold) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalGold != 0) hash ^= TotalGold.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalGold != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TotalGold);
      }
      if (Gold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Gold);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalGold);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_DropGold other) {
      if (other == null) {
        return;
      }
      if (other.TotalGold != 0) {
        TotalGold = other.TotalGold;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TotalGold = input.ReadInt32();
            break;
          }
          case 16: {
            Gold = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_PlayTimeLine : pb::IMessage<Notify_PlayTimeLine> {
    private static readonly pb::MessageParser<Notify_PlayTimeLine> _parser = new pb::MessageParser<Notify_PlayTimeLine>(() => new Notify_PlayTimeLine());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_PlayTimeLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_PlayTimeLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_PlayTimeLine(Notify_PlayTimeLine other) : this() {
      index_ = other.index_;
      path_ = other.path_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_PlayTimeLine Clone() {
      return new Notify_PlayTimeLine(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Path" field.</summary>
    public const int PathFieldNumber = 2;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_PlayTimeLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_PlayTimeLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Path != other.Path) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_PlayTimeLine other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_SyncServerTime : pb::IMessage<Notify_SyncServerTime> {
    private static readonly pb::MessageParser<Notify_SyncServerTime> _parser = new pb::MessageParser<Notify_SyncServerTime>(() => new Notify_SyncServerTime());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_SyncServerTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_SyncServerTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_SyncServerTime(Notify_SyncServerTime other) : this() {
      serverNow_ = other.serverNow_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_SyncServerTime Clone() {
      return new Notify_SyncServerTime(this);
    }

    /// <summary>Field number for the "ServerNow" field.</summary>
    public const int ServerNowFieldNumber = 1;
    private float serverNow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ServerNow {
      get { return serverNow_; }
      set {
        serverNow_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_SyncServerTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_SyncServerTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerNow != other.ServerNow) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerNow != 0F) hash ^= ServerNow.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerNow != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(ServerNow);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerNow != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_SyncServerTime other) {
      if (other == null) {
        return;
      }
      if (other.ServerNow != 0F) {
        ServerNow = other.ServerNow;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            ServerNow = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
