// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: battle_server.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto {

  /// <summary>Holder for reflection information generated from battle_server.proto</summary>
  public static partial class BattleServerReflection {

    #region Descriptor
    /// <summary>File descriptor for battle_server.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BattleServerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNiYXR0bGVfc2VydmVyLnByb3RvEgVQcm90bxoLY29uc3QucHJvdG8aEGV4",
            "Y2VsY29uc3QucHJvdG8aCmRhdGEucHJvdG8iVgoOQzJCX0pvaW5CYXR0bGUS",
            "DQoFTWFwSUQYASABKAUSDwoHU2Vzc2lvbhgCIAEoCRITCgtBY2NvdW50VXVp",
            "ZBgDIAEoCRIPCgdWZXJzaW9uGAQgASgFIjAKDkIyQ19Kb2luQmF0dGxlEh4K",
            "BENvZGUYASABKA4yEC5Qcm90by5FcnJvckNvZGUiJQoOQzJCX0V4aXRCYXR0",
            "bGUSEwoLQWNjb3VudFV1aWQYASABKAkiMAoOQjJDX0V4aXRCYXR0bGUSHgoE",
            "Q29kZRgBIAEoDjIQLlByb3RvLkVycm9yQ29kZSIpChJDMkJfVmlld1BsYXll",
            "ckhlcm8SEwoLQWNjb3VudFV1aWQYASABKAkiqgEKEkIyQ19WaWV3UGxheWVy",
            "SGVybxIeCgRDb2RlGAEgASgOMhAuUHJvdG8uRXJyb3JDb2RlEgwKBE5hbWUY",
            "AiABKAkSDQoFTGV2ZWwYAyABKAUSDgoGSGVyb0lEGAQgASgFEiUKCldhZXJF",
            "cXVpcHMYBSADKAsyES5Qcm90by5QbGF5ZXJJdGVtEiAKBk1hZ2ljcxgGIAMo",
            "CzIQLlByb3RvLkhlcm9NYWdpYyIjChJBY3Rpb25fQ29sbGVjdEl0ZW0SDQoF",
            "SW5kZXgYASABKAUibQoWQWN0aW9uX0NsaWNrU2tpbGxJbmRleBIPCgdNYWdp",
            "Y0lkGAEgASgFEiAKCFJvdGF0aW9uGAMgASgLMg4uUHJvdG8uVmVjdG9yMxIg",
            "CghQb3NpdGlvbhgEIAEoCzIOLlByb3RvLlZlY3RvcjMiJQoVQWN0aW9uX0F1",
            "dG9GaW5kVGFyZ2V0EgwKBEF1dG8YASABKAgiWAoTQWN0aW9uX01vdmVKb3lz",
            "dGljaxIfCgdXaWxsUG9zGAEgASgLMg4uUHJvdG8uVmVjdG9yMxIgCghQb3Np",
            "dGlvbhgCIAEoCzIOLlByb3RvLlZlY3RvcjMiMgoPQWN0aW9uX1N0b3BNb3Zl",
            "Eh8KB1N0b3BQb3MYASABKAsyDi5Qcm90by5WZWN0b3IzIhUKE0FjdGlvbl9O",
            "b3JtYWxBdHRhY2siIAoOQWN0aW9uX1VzZUl0ZW0SDgoGSXRlbUlkGAEgASgF",
            "IiwKE0FjdGlvbl9Mb29rUm90YXRpb24SFQoNTG9va1JvdGF0aW9uWRgBIAEo",
            "AiIoChdOb3RpZnlfRWxlbWVudEV4aXRTdGF0ZRINCgVJbmRleBgBIAEoBSKv",
            "AQoVTm90aWZ5X0NyZWF0ZVJlbGVhc2VyEg0KBUluZGV4GAEgASgFEhUKDVJl",
            "bGVhc2VySW5kZXgYAiABKAUSEwoLVGFyZ2V0SW5kZXgYAyABKAUSEAoITWFn",
            "aWNLZXkYBCABKAkSIAoIUG9zaXRpb24YBSABKAsyDi5Qcm90by5WZWN0b3Iz",
            "EicKBlJNVHlwZRgGIAEoDjIXLlByb3RvLlJlbGVhc2VyTW9kZVR5cGUiwwIK",
            "HE5vdGlmeV9DcmVhdGVCYXR0bGVDaGFyYWN0ZXISDQoFSW5kZXgYASABKAUS",
            "EwoLQWNjb3VudFV1aWQYAiABKAkSEAoIQ29uZmlnSUQYAyABKAUSEQoJVGVh",
            "bUluZGV4GAQgASgFEiAKCFBvc2l0aW9uGAUgASgLMg4uUHJvdG8uVmVjdG9y",
            "MxIfCgdGb3J3YXJkGAYgASgLMg4uUHJvdG8uVmVjdG9yMxINCgVMZXZlbBgH",
            "IAEoBRIKCgJIcBgIIAEoBRINCgVNYXhIcBgJIAEoBRIMCgROYW1lGA4gASgJ",
            "Eg0KBVNwZWVkGA8gASgCEiEKA0NkcxgQIAMoCzIULlByb3RvLkhlcm9NYWdp",
            "Y0RhdGESCgoCTXAYESABKAUSDQoFTXBNYXgYEiABKAUSEgoKT3duZXJJbmRl",
            "eBgTIAEoBSKkAQoUTm90aWZ5X0NyZWF0ZU1pc3NpbGUSDQoFSW5kZXgYASAB",
            "KAUSFQoNUmVsZWFzZXJJbmRleBgCIAEoBRIVCg1SZXNvdXJjZXNQYXRoGAMg",
            "ASgJEg0KBVNwZWVkGAQgASgCEhAKCEZyb21Cb25lGAYgASgJEg4KBlRvQm9u",
            "ZRgHIAEoCRIeCgZPZmZzZXQYCCABKAsyDi5Qcm90by5WZWN0b3IzIk4KG05v",
            "dGlmeV9DaGFyYWN0ZXJTZXRQb3NpdGlvbhINCgVJbmRleBgBIAEoBRIgCghQ",
            "b3NpdGlvbhgCIAEoCzIOLlByb3RvLlZlY3RvcjMiNQoVTm90aWZ5X0NoYXJh",
            "Y3RlclNwZWVkEg0KBUluZGV4GAEgASgFEg0KBVNwZWVkGAIgASgCIjcKFk5v",
            "dGlmeV9Mb29rQXRDaGFyYWN0ZXISDQoFSW5kZXgYASABKAUSDgoGVGFyZ2V0",
            "GAIgASgFInoKFk5vdGlmeV9DaGFyYWN0ZXJNb3ZlVG8SDQoFSW5kZXgYASAB",
            "KAUSIAoIUG9zaXRpb24YAiABKAsyDi5Qcm90by5WZWN0b3IzEh4KBlRhcmdl",
            "dBgDIAEoCzIOLlByb3RvLlZlY3RvcjMSDwoHU3RvcERpcxgEIAEoAiJLChhO",
            "b3RpZnlfQ2hhcmFjdGVyU3RvcE1vdmUSDQoFSW5kZXgYASABKAUSIAoIUG9z",
            "aXRpb24YAiABKAsyDi5Qcm90by5WZWN0b3IzIiYKFU5vdGlmeV9DaGFyYWN0",
            "ZXJEZWF0aBINCgVJbmRleBgBIAEoBSJDChxOb3RpZnlfQ2hhcmFjdGVyUHJp",
            "b3JpdHlNb3ZlEg0KBUluZGV4GAEgASgFEhQKDFByaW9yaXR5TW92ZRgCIAEo",
            "AiI4ChhOb3RpZnlfQ2hhcmFjdGVyU2V0U2NhbGUSDQoFSW5kZXgYASABKAUS",
            "DQoFU2NhbGUYAiABKAIidQobTm90aWZ5X0NoYXJhY3RlckF0dGFjaE1hZ2lj",
            "Eg0KBUluZGV4GAEgASgFEg8KB01hZ2ljSWQYAiABKAUSFQoNQ29tcGxldGVk",
            "VGltZRgDIAEoAhIfCgVtVHlwZRgEIAEoDjIQLlByb3RvLk1hZ2ljVHlwZSJi",
            "ChROb3RpZnlfUHJvcGVydHlWYWx1ZRINCgVJbmRleBgBIAEoBRIlCgRUeXBl",
            "GAIgASgOMhcuUHJvdG8uSGVyb1Byb3BlcnR5VHlwZRIUCgxGaW5hbGx5VmFs",
            "dWUYAyABKAUiRgoPTm90aWZ5X0hQQ2hhbmdlEg0KBUluZGV4GAEgASgFEgoK",
            "AkhwGAIgASgFEgsKA0N1chgDIAEoBRILCgNNYXgYBCABKAUiRgoPTm90aWZ5",
            "X01QQ2hhbmdlEg0KBUluZGV4GAEgASgFEgoKAk1wGAIgASgFEgsKA0N1chgD",
            "IAEoBRILCgNNYXgYBCABKAUibAoTTm90aWZ5X0RhbWFnZVJlc3VsdBINCgVJ",
            "bmRleBgBIAEoBRITCgtUYXJnZXRJbmRleBgCIAEoBRIQCghJc01pc3NlZBgD",
            "IAEoCBIOCgZEYW1hZ2UYBCABKAUSDwoHQ3J0TXVsdBgFIAEoBSKBAQoLTm90",
            "aWZ5X0Ryb3ASDQoFSW5kZXgYASABKAUSHwoESXRlbRgCIAEoCzIRLlByb3Rv",
            "LlBsYXllckl0ZW0SEQoJVGVhbUluZGV4GAMgASgFEhIKCkdyb3VwSW5kZXgY",
            "BCABKAUSGwoDUG9zGAUgASgLMg4uUHJvdG8uVmVjdG9yMyKPAQoWTm90aWZ5",
            "X1BsYXllckpvaW5TdGF0ZRITCgtBY2NvdW50VXVpZBgBIAEoCRIPCgdUaW1l",
            "Tm93GAIgASgCEgwKBEdvbGQYAyABKAUSJQoHUGFja2FnZRgEIAEoCzIULlBy",
            "b3RvLlBsYXllclBhY2thZ2USGgoESGVybxgFIAEoCzIMLlByb3RvLkRIZXJv",
            "IjMKFE5vdGlmeV9DaGFyYWN0ZXJMb2NrEg0KBUluZGV4GAEgASgFEgwKBExv",
            "Y2sYAiABKAUihgEKFE5vdGlmeV9DaGFyYWN0ZXJQdXNoEg0KBUluZGV4GAEg",
            "ASgFEh4KBkxlbmd0aBgCIAEoCzIOLlByb3RvLlZlY3RvcjMSHQoFU3BlZWQY",
            "AyABKAsyDi5Qcm90by5WZWN0b3IzEiAKCFN0YXJ0UG9zGAQgASgLMg4uUHJv",
            "dG8uVmVjdG9yMyInChZOb3RpZnlfQ2hhcmFjdGVyUmVsaXZlEg0KBUluZGV4",
            "GAEgASgFIjUKFU5vdGlmeV9DaGFyYWN0ZXJMZXZlbBINCgVJbmRleBgBIAEo",
            "BRINCgVMZXZlbBgCIAEoBSJGCiFOb3RpZnlfQmF0dGxlSXRlbUNoYW5nZUdy",
            "b3VwSW5kZXgSDQoFSW5kZXgYASABKAUSEgoKR3JvdXBJbmRleBgCIAEoBSIy",
            "Cg9Ob3RpZnlfRHJvcEdvbGQSEQoJVG90YWxHb2xkGAEgASgFEgwKBEdvbGQY",
            "AiABKAUiaAoTTm90aWZ5X1BsYXlUaW1lTGluZRINCgVJbmRleBgBIAEoBRIM",
            "CgRQYXRoGAIgASgJEhMKC1RhcmdldEluZGV4GAMgASgFEgwKBFR5cGUYBCAB",
            "KAUSEQoJUGxheUluZGV4GAUgASgFIjkKFU5vdGlmeV9DYW5jZWxUaW1lTGlu",
            "ZRINCgVJbmRleBgBIAEoBRIRCglQbGF5SW5kZXgYAiABKAUiKgoVTm90aWZ5",
            "X1N5bmNTZXJ2ZXJUaW1lEhEKCVNlcnZlck5vdxgBIAEoAiI8ChhOb3RpZnlf",
            "Q2hhcmFjdGVyUm90YXRpb24SDQoFSW5kZXgYASABKAUSEQoJUm90YXRpb25Z",
            "GAIgASgCIlIKE05vdGlmeV9DaGFyYWN0ZXJFeHASCwoDRXhwGAEgASgFEg4K",
            "Bk9sZEV4cBgCIAEoBRINCgVMZXZlbBgDIAEoBRIPCgdPbGRMZXZlGAQgASgF",
            "IlEKGU5vdGlmeV9DaGFyYWN0ZXJUZWFtSW5kZXgSDQoFSW5kZXgYASABKAUS",
            "EQoJVGVhbUluZGV4GAIgASgFEhIKCk93bmVySW5kZXgYAyABKAUywQ8KDU5v",
            "dGlmeVNlcnZpY2USRgoRQ2hhcmFjdGVyUG9zaXRpb24SCy5Qcm90by5Wb2lk",
            "GiIuUHJvdG8uTm90aWZ5X0NoYXJhY3RlclNldFBvc2l0aW9uIgASSwoVQ3Jl",
            "YXRlQmF0dGxlQ2hhcmFjdGVyEgsuUHJvdG8uVm9pZBojLlByb3RvLk5vdGlm",
            "eV9DcmVhdGVCYXR0bGVDaGFyYWN0ZXIiABI7Cg1DcmVhdGVNaXNzaWxlEgsu",
            "UHJvdG8uVm9pZBobLlByb3RvLk5vdGlmeV9DcmVhdGVNaXNzaWxlIgASPQoO",
            "Q3JlYXRlUmVsZWFzZXISCy5Qcm90by5Wb2lkGhwuUHJvdG8uTm90aWZ5X0Ny",
            "ZWF0ZVJlbGVhc2VyIgASNwoMRGFtYWdlUmVzdWx0EgsuUHJvdG8uVm9pZBoa",
            "LlByb3RvLk5vdGlmeV9EYW1hZ2VSZXN1bHQSKQoERHJvcBILLlByb3RvLlZv",
            "aWQaEi5Qcm90by5Ob3RpZnlfRHJvcCIAEkEKEEVsZW1lbnRFeGl0U3RhdGUS",
            "Cy5Qcm90by5Wb2lkGh4uUHJvdG8uTm90aWZ5X0VsZW1lbnRFeGl0U3RhdGUi",
            "ABIvCghIUENoYW5nZRILLlByb3RvLlZvaWQaFi5Qcm90by5Ob3RpZnlfSFBD",
            "aGFuZ2USPQoPTG9va0F0Q2hhcmFjdGVyEgsuUHJvdG8uVm9pZBodLlByb3Rv",
            "Lk5vdGlmeV9Mb29rQXRDaGFyYWN0ZXISLwoITVBDaGFuZ2USCy5Qcm90by5W",
            "b2lkGhYuUHJvdG8uTm90aWZ5X01QQ2hhbmdlEj0KD1BsYXllckpvaW5TdGF0",
            "ZRILLlByb3RvLlZvaWQaHS5Qcm90by5Ob3RpZnlfUGxheWVySm9pblN0YXRl",
            "EjsKDVByb3BlcnR5VmFsdWUSCy5Qcm90by5Wb2lkGhsuUHJvdG8uTm90aWZ5",
            "X1Byb3BlcnR5VmFsdWUiABI/Cg9DaGFyYWN0ZXJNb3ZlVG8SCy5Qcm90by5W",
            "b2lkGh0uUHJvdG8uTm90aWZ5X0NoYXJhY3Rlck1vdmVUbyIAEkEKEUNoYXJh",
            "Y3RlclN0b3BNb3ZlEgsuUHJvdG8uVm9pZBofLlByb3RvLk5vdGlmeV9DaGFy",
            "YWN0ZXJTdG9wTW92ZRI7Cg5DaGFyYWN0ZXJEZWF0aBILLlByb3RvLlZvaWQa",
            "HC5Qcm90by5Ob3RpZnlfQ2hhcmFjdGVyRGVhdGgSSQoVQ2hhcmFjdGVyUHJp",
            "b3JpdHlNb3ZlEgsuUHJvdG8uVm9pZBojLlByb3RvLk5vdGlmeV9DaGFyYWN0",
            "ZXJQcmlvcml0eU1vdmUSQwoRQ2hhcmFjdGVyU2V0U2NhbGUSCy5Qcm90by5W",
            "b2lkGh8uUHJvdG8uTm90aWZ5X0NoYXJhY3RlclNldFNjYWxlIgASRwoUQ2hh",
            "cmFjdGVyQXR0YWNoTWFnaWMSCy5Qcm90by5Wb2lkGiIuUHJvdG8uTm90aWZ5",
            "X0NoYXJhY3RlckF0dGFjaE1hZ2ljEj0KDkNoYXJhY3RlclNwZWVkEgsuUHJv",
            "dG8uVm9pZBocLlByb3RvLk5vdGlmeV9DaGFyYWN0ZXJTcGVlZCIAEjsKDUNo",
            "YXJhY3RlckxvY2sSCy5Qcm90by5Wb2lkGhsuUHJvdG8uTm90aWZ5X0NoYXJh",
            "Y3RlckxvY2siABI7Cg1DaGFyY2F0ZXJQdXNoEgsuUHJvdG8uVm9pZBobLlBy",
            "b3RvLk5vdGlmeV9DaGFyYWN0ZXJQdXNoIgASPwoPQ2hhcmFjdGVyUmVsaXZl",
            "EgsuUHJvdG8uVm9pZBodLlByb3RvLk5vdGlmeV9DaGFyYWN0ZXJSZWxpdmUi",
            "ABJVChpCYXR0bGVJdGVtQ2hhbmdlR3JvdXBJbmRleBILLlByb3RvLlZvaWQa",
            "KC5Qcm90by5Ob3RpZnlfQmF0dGxlSXRlbUNoYW5nZUdyb3VwSW5kZXgiABIx",
            "CghEcm9wR29sZBILLlByb3RvLlZvaWQaFi5Qcm90by5Ob3RpZnlfRHJvcEdv",
            "bGQiABI9Cg5TeW5jU2VydmVyVGltZRILLlByb3RvLlZvaWQaHC5Qcm90by5O",
            "b3RpZnlfU3luY1NlcnZlclRpbWUiABI5CgxQbGF5VGltZUxpbmUSCy5Qcm90",
            "by5Wb2lkGhouUHJvdG8uTm90aWZ5X1BsYXlUaW1lTGluZSIAEkMKEUNoYXJh",
            "Y3RlclJvdGF0aW9uEgsuUHJvdG8uVm9pZBofLlByb3RvLk5vdGlmeV9DaGFy",
            "YWN0ZXJSb3RhdGlvbiIAEjkKDENoYXJhY3RlckV4cBILLlByb3RvLlZvaWQa",
            "Gi5Qcm90by5Ob3RpZnlfQ2hhcmFjdGVyRXhwIgASPQoOQ2hhcmFjdGVyTGV2",
            "ZWwSCy5Qcm90by5Wb2lkGhwuUHJvdG8uTm90aWZ5X0NoYXJhY3RlckxldmVs",
            "IgASRQoSQ2hhcmFjdGVyVGVhbUluZGV4EgsuUHJvdG8uVm9pZBogLlByb3Rv",
            "Lk5vdGlmeV9DaGFyYWN0ZXJUZWFtSW5kZXgiABI9Cg5DYW5jZWxUaW1lTGlu",
            "ZRILLlByb3RvLlZvaWQaHC5Qcm90by5Ob3RpZnlfQ2FuY2VsVGltZUxpbmUi",
            "ADLdAwoNQWN0aW9uU2VydmljZRI/Cg9DbGlja1NraWxsSW5kZXgSHS5Qcm90",
            "by5BY3Rpb25fQ2xpY2tTa2lsbEluZGV4GgsuUHJvdG8uVm9pZCIAEj0KDkF1",
            "dG9GaW5kVGFyZ2V0EhwuUHJvdG8uQWN0aW9uX0F1dG9GaW5kVGFyZ2V0Ggsu",
            "UHJvdG8uVm9pZCIAEjkKDE5vcm1hbEF0dGFjaxIaLlByb3RvLkFjdGlvbl9O",
            "b3JtYWxBdHRhY2saCy5Qcm90by5Wb2lkIgASNwoLQ29sbGVjdEl0ZW0SGS5Q",
            "cm90by5BY3Rpb25fQ29sbGVjdEl0ZW0aCy5Qcm90by5Wb2lkIgASLwoHVXNl",
            "SXRlbRIVLlByb3RvLkFjdGlvbl9Vc2VJdGVtGgsuUHJvdG8uVm9pZCIAEjkK",
            "DE1vdmVKb3lzdGljaxIaLlByb3RvLkFjdGlvbl9Nb3ZlSm95c3RpY2saCy5Q",
            "cm90by5Wb2lkIgASMQoIU3RvcE1vdmUSFi5Qcm90by5BY3Rpb25fU3RvcE1v",
            "dmUaCy5Qcm90by5Wb2lkIgASOQoMTG9va1JvdGF0aW9uEhouUHJvdG8uQWN0",
            "aW9uX0xvb2tSb3RhdGlvbhoLLlByb3RvLlZvaWQiADLbAQoTQmF0dGxlU2Vy",
            "dmVyU2VydmljZRI8CgpFeGl0QmF0dGxlEhUuUHJvdG8uQzJCX0V4aXRCYXR0",
            "bGUaFS5Qcm90by5CMkNfRXhpdEJhdHRsZSIAEjwKCkpvaW5CYXR0bGUSFS5Q",
            "cm90by5DMkJfSm9pbkJhdHRsZRoVLlByb3RvLkIyQ19Kb2luQmF0dGxlIgAS",
            "SAoOVmlld1BsYXllckhlcm8SGS5Qcm90by5DMkJfVmlld1BsYXllckhlcm8a",
            "GS5Qcm90by5CMkNfVmlld1BsYXllckhlcm8iAGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Proto.ConstReflection.Descriptor, global::Proto.ExcelconstReflection.Descriptor, global::Proto.DataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.C2B_JoinBattle), global::Proto.C2B_JoinBattle.Parser, new[]{ "MapID", "Session", "AccountUuid", "Version" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.B2C_JoinBattle), global::Proto.B2C_JoinBattle.Parser, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.C2B_ExitBattle), global::Proto.C2B_ExitBattle.Parser, new[]{ "AccountUuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.B2C_ExitBattle), global::Proto.B2C_ExitBattle.Parser, new[]{ "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.C2B_ViewPlayerHero), global::Proto.C2B_ViewPlayerHero.Parser, new[]{ "AccountUuid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.B2C_ViewPlayerHero), global::Proto.B2C_ViewPlayerHero.Parser, new[]{ "Code", "Name", "Level", "HeroID", "WaerEquips", "Magics" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Action_CollectItem), global::Proto.Action_CollectItem.Parser, new[]{ "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Action_ClickSkillIndex), global::Proto.Action_ClickSkillIndex.Parser, new[]{ "MagicId", "Rotation", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Action_AutoFindTarget), global::Proto.Action_AutoFindTarget.Parser, new[]{ "Auto" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Action_MoveJoystick), global::Proto.Action_MoveJoystick.Parser, new[]{ "WillPos", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Action_StopMove), global::Proto.Action_StopMove.Parser, new[]{ "StopPos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Action_NormalAttack), global::Proto.Action_NormalAttack.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Action_UseItem), global::Proto.Action_UseItem.Parser, new[]{ "ItemId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Action_LookRotation), global::Proto.Action_LookRotation.Parser, new[]{ "LookRotationY" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_ElementExitState), global::Proto.Notify_ElementExitState.Parser, new[]{ "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CreateReleaser), global::Proto.Notify_CreateReleaser.Parser, new[]{ "Index", "ReleaserIndex", "TargetIndex", "MagicKey", "Position", "RMType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CreateBattleCharacter), global::Proto.Notify_CreateBattleCharacter.Parser, new[]{ "Index", "AccountUuid", "ConfigID", "TeamIndex", "Position", "Forward", "Level", "Hp", "MaxHp", "Name", "Speed", "Cds", "Mp", "MpMax", "OwnerIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CreateMissile), global::Proto.Notify_CreateMissile.Parser, new[]{ "Index", "ReleaserIndex", "ResourcesPath", "Speed", "FromBone", "ToBone", "Offset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterSetPosition), global::Proto.Notify_CharacterSetPosition.Parser, new[]{ "Index", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterSpeed), global::Proto.Notify_CharacterSpeed.Parser, new[]{ "Index", "Speed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_LookAtCharacter), global::Proto.Notify_LookAtCharacter.Parser, new[]{ "Index", "Target" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterMoveTo), global::Proto.Notify_CharacterMoveTo.Parser, new[]{ "Index", "Position", "Target", "StopDis" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterStopMove), global::Proto.Notify_CharacterStopMove.Parser, new[]{ "Index", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterDeath), global::Proto.Notify_CharacterDeath.Parser, new[]{ "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterPriorityMove), global::Proto.Notify_CharacterPriorityMove.Parser, new[]{ "Index", "PriorityMove" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterSetScale), global::Proto.Notify_CharacterSetScale.Parser, new[]{ "Index", "Scale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterAttachMagic), global::Proto.Notify_CharacterAttachMagic.Parser, new[]{ "Index", "MagicId", "CompletedTime", "MType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_PropertyValue), global::Proto.Notify_PropertyValue.Parser, new[]{ "Index", "Type", "FinallyValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_HPChange), global::Proto.Notify_HPChange.Parser, new[]{ "Index", "Hp", "Cur", "Max" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_MPChange), global::Proto.Notify_MPChange.Parser, new[]{ "Index", "Mp", "Cur", "Max" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_DamageResult), global::Proto.Notify_DamageResult.Parser, new[]{ "Index", "TargetIndex", "IsMissed", "Damage", "CrtMult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_Drop), global::Proto.Notify_Drop.Parser, new[]{ "Index", "Item", "TeamIndex", "GroupIndex", "Pos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_PlayerJoinState), global::Proto.Notify_PlayerJoinState.Parser, new[]{ "AccountUuid", "TimeNow", "Gold", "Package", "Hero" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterLock), global::Proto.Notify_CharacterLock.Parser, new[]{ "Index", "Lock" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterPush), global::Proto.Notify_CharacterPush.Parser, new[]{ "Index", "Length", "Speed", "StartPos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterRelive), global::Proto.Notify_CharacterRelive.Parser, new[]{ "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterLevel), global::Proto.Notify_CharacterLevel.Parser, new[]{ "Index", "Level" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_BattleItemChangeGroupIndex), global::Proto.Notify_BattleItemChangeGroupIndex.Parser, new[]{ "Index", "GroupIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_DropGold), global::Proto.Notify_DropGold.Parser, new[]{ "TotalGold", "Gold" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_PlayTimeLine), global::Proto.Notify_PlayTimeLine.Parser, new[]{ "Index", "Path", "TargetIndex", "Type", "PlayIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CancelTimeLine), global::Proto.Notify_CancelTimeLine.Parser, new[]{ "Index", "PlayIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_SyncServerTime), global::Proto.Notify_SyncServerTime.Parser, new[]{ "ServerNow" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterRotation), global::Proto.Notify_CharacterRotation.Parser, new[]{ "Index", "RotationY" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterExp), global::Proto.Notify_CharacterExp.Parser, new[]{ "Exp", "OldExp", "Level", "OldLeve" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.Notify_CharacterTeamIndex), global::Proto.Notify_CharacterTeamIndex.Parser, new[]{ "Index", "TeamIndex", "OwnerIndex" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class C2B_JoinBattle : pb::IMessage<C2B_JoinBattle> {
    private static readonly pb::MessageParser<C2B_JoinBattle> _parser = new pb::MessageParser<C2B_JoinBattle>(() => new C2B_JoinBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2B_JoinBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_JoinBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_JoinBattle(C2B_JoinBattle other) : this() {
      mapID_ = other.mapID_;
      session_ = other.session_;
      accountUuid_ = other.accountUuid_;
      version_ = other.version_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_JoinBattle Clone() {
      return new C2B_JoinBattle(this);
    }

    /// <summary>Field number for the "MapID" field.</summary>
    public const int MapIDFieldNumber = 1;
    private int mapID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapID {
      get { return mapID_; }
      set {
        mapID_ = value;
      }
    }

    /// <summary>Field number for the "Session" field.</summary>
    public const int SessionFieldNumber = 2;
    private string session_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Session {
      get { return session_; }
      set {
        session_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AccountUuid" field.</summary>
    public const int AccountUuidFieldNumber = 3;
    private string accountUuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountUuid {
      get { return accountUuid_; }
      set {
        accountUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Version" field.</summary>
    public const int VersionFieldNumber = 4;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2B_JoinBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2B_JoinBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapID != other.MapID) return false;
      if (Session != other.Session) return false;
      if (AccountUuid != other.AccountUuid) return false;
      if (Version != other.Version) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapID != 0) hash ^= MapID.GetHashCode();
      if (Session.Length != 0) hash ^= Session.GetHashCode();
      if (AccountUuid.Length != 0) hash ^= AccountUuid.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MapID);
      }
      if (Session.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Session);
      }
      if (AccountUuid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AccountUuid);
      }
      if (Version != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Version);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapID);
      }
      if (Session.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Session);
      }
      if (AccountUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountUuid);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2B_JoinBattle other) {
      if (other == null) {
        return;
      }
      if (other.MapID != 0) {
        MapID = other.MapID;
      }
      if (other.Session.Length != 0) {
        Session = other.Session;
      }
      if (other.AccountUuid.Length != 0) {
        AccountUuid = other.AccountUuid;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapID = input.ReadInt32();
            break;
          }
          case 18: {
            Session = input.ReadString();
            break;
          }
          case 26: {
            AccountUuid = input.ReadString();
            break;
          }
          case 32: {
            Version = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_JoinBattle : pb::IMessage<B2C_JoinBattle> {
    private static readonly pb::MessageParser<B2C_JoinBattle> _parser = new pb::MessageParser<B2C_JoinBattle>(() => new B2C_JoinBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_JoinBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_JoinBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_JoinBattle(B2C_JoinBattle other) : this() {
      code_ = other.code_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_JoinBattle Clone() {
      return new B2C_JoinBattle(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_JoinBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_JoinBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_JoinBattle other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            code_ = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2B_ExitBattle : pb::IMessage<C2B_ExitBattle> {
    private static readonly pb::MessageParser<C2B_ExitBattle> _parser = new pb::MessageParser<C2B_ExitBattle>(() => new C2B_ExitBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2B_ExitBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_ExitBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_ExitBattle(C2B_ExitBattle other) : this() {
      accountUuid_ = other.accountUuid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_ExitBattle Clone() {
      return new C2B_ExitBattle(this);
    }

    /// <summary>Field number for the "AccountUuid" field.</summary>
    public const int AccountUuidFieldNumber = 1;
    private string accountUuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountUuid {
      get { return accountUuid_; }
      set {
        accountUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2B_ExitBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2B_ExitBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountUuid != other.AccountUuid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountUuid.Length != 0) hash ^= AccountUuid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountUuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountUuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountUuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2B_ExitBattle other) {
      if (other == null) {
        return;
      }
      if (other.AccountUuid.Length != 0) {
        AccountUuid = other.AccountUuid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountUuid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_ExitBattle : pb::IMessage<B2C_ExitBattle> {
    private static readonly pb::MessageParser<B2C_ExitBattle> _parser = new pb::MessageParser<B2C_ExitBattle>(() => new B2C_ExitBattle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_ExitBattle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_ExitBattle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_ExitBattle(B2C_ExitBattle other) : this() {
      code_ = other.code_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_ExitBattle Clone() {
      return new B2C_ExitBattle(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_ExitBattle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_ExitBattle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_ExitBattle other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            code_ = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class C2B_ViewPlayerHero : pb::IMessage<C2B_ViewPlayerHero> {
    private static readonly pb::MessageParser<C2B_ViewPlayerHero> _parser = new pb::MessageParser<C2B_ViewPlayerHero>(() => new C2B_ViewPlayerHero());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<C2B_ViewPlayerHero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_ViewPlayerHero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_ViewPlayerHero(C2B_ViewPlayerHero other) : this() {
      accountUuid_ = other.accountUuid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public C2B_ViewPlayerHero Clone() {
      return new C2B_ViewPlayerHero(this);
    }

    /// <summary>Field number for the "AccountUuid" field.</summary>
    public const int AccountUuidFieldNumber = 1;
    private string accountUuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountUuid {
      get { return accountUuid_; }
      set {
        accountUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as C2B_ViewPlayerHero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(C2B_ViewPlayerHero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountUuid != other.AccountUuid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountUuid.Length != 0) hash ^= AccountUuid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountUuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountUuid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountUuid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(C2B_ViewPlayerHero other) {
      if (other == null) {
        return;
      }
      if (other.AccountUuid.Length != 0) {
        AccountUuid = other.AccountUuid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountUuid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class B2C_ViewPlayerHero : pb::IMessage<B2C_ViewPlayerHero> {
    private static readonly pb::MessageParser<B2C_ViewPlayerHero> _parser = new pb::MessageParser<B2C_ViewPlayerHero>(() => new B2C_ViewPlayerHero());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<B2C_ViewPlayerHero> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_ViewPlayerHero() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_ViewPlayerHero(B2C_ViewPlayerHero other) : this() {
      code_ = other.code_;
      name_ = other.name_;
      level_ = other.level_;
      heroID_ = other.heroID_;
      waerEquips_ = other.waerEquips_.Clone();
      magics_ = other.magics_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public B2C_ViewPlayerHero Clone() {
      return new B2C_ViewPlayerHero(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Proto.ErrorCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ErrorCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "HeroID" field.</summary>
    public const int HeroIDFieldNumber = 4;
    private int heroID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeroID {
      get { return heroID_; }
      set {
        heroID_ = value;
      }
    }

    /// <summary>Field number for the "WaerEquips" field.</summary>
    public const int WaerEquipsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Proto.PlayerItem> _repeated_waerEquips_codec
        = pb::FieldCodec.ForMessage(42, global::Proto.PlayerItem.Parser);
    private readonly pbc::RepeatedField<global::Proto.PlayerItem> waerEquips_ = new pbc::RepeatedField<global::Proto.PlayerItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.PlayerItem> WaerEquips {
      get { return waerEquips_; }
    }

    /// <summary>Field number for the "Magics" field.</summary>
    public const int MagicsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Proto.HeroMagic> _repeated_magics_codec
        = pb::FieldCodec.ForMessage(50, global::Proto.HeroMagic.Parser);
    private readonly pbc::RepeatedField<global::Proto.HeroMagic> magics_ = new pbc::RepeatedField<global::Proto.HeroMagic>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.HeroMagic> Magics {
      get { return magics_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as B2C_ViewPlayerHero);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(B2C_ViewPlayerHero other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Name != other.Name) return false;
      if (Level != other.Level) return false;
      if (HeroID != other.HeroID) return false;
      if(!waerEquips_.Equals(other.waerEquips_)) return false;
      if(!magics_.Equals(other.magics_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (HeroID != 0) hash ^= HeroID.GetHashCode();
      hash ^= waerEquips_.GetHashCode();
      hash ^= magics_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (HeroID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HeroID);
      }
      waerEquips_.WriteTo(output, _repeated_waerEquips_codec);
      magics_.WriteTo(output, _repeated_magics_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (HeroID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeroID);
      }
      size += waerEquips_.CalculateSize(_repeated_waerEquips_codec);
      size += magics_.CalculateSize(_repeated_magics_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(B2C_ViewPlayerHero other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.HeroID != 0) {
        HeroID = other.HeroID;
      }
      waerEquips_.Add(other.waerEquips_);
      magics_.Add(other.magics_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            code_ = (global::Proto.ErrorCode) input.ReadEnum();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            HeroID = input.ReadInt32();
            break;
          }
          case 42: {
            waerEquips_.AddEntriesFrom(input, _repeated_waerEquips_codec);
            break;
          }
          case 50: {
            magics_.AddEntriesFrom(input, _repeated_magics_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Action_CollectItem : pb::IMessage<Action_CollectItem> {
    private static readonly pb::MessageParser<Action_CollectItem> _parser = new pb::MessageParser<Action_CollectItem>(() => new Action_CollectItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Action_CollectItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_CollectItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_CollectItem(Action_CollectItem other) : this() {
      index_ = other.index_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_CollectItem Clone() {
      return new Action_CollectItem(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Action_CollectItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Action_CollectItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Action_CollectItem other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///点击释放技能
  /// </summary>
  public sealed partial class Action_ClickSkillIndex : pb::IMessage<Action_ClickSkillIndex> {
    private static readonly pb::MessageParser<Action_ClickSkillIndex> _parser = new pb::MessageParser<Action_ClickSkillIndex>(() => new Action_ClickSkillIndex());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Action_ClickSkillIndex> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_ClickSkillIndex() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_ClickSkillIndex(Action_ClickSkillIndex other) : this() {
      magicId_ = other.magicId_;
      Rotation = other.rotation_ != null ? other.Rotation.Clone() : null;
      Position = other.position_ != null ? other.Position.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_ClickSkillIndex Clone() {
      return new Action_ClickSkillIndex(this);
    }

    /// <summary>Field number for the "MagicId" field.</summary>
    public const int MagicIdFieldNumber = 1;
    private int magicId_;
    /// <summary>
    ///技能id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicId {
      get { return magicId_; }
      set {
        magicId_ = value;
      }
    }

    /// <summary>Field number for the "Rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    private global::Proto.Vector3 rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 4;
    private global::Proto.Vector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Action_ClickSkillIndex);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Action_ClickSkillIndex other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MagicId != other.MagicId) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MagicId != 0) hash ^= MagicId.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MagicId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MagicId);
      }
      if (rotation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
      if (position_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MagicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagicId);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Action_ClickSkillIndex other) {
      if (other == null) {
        return;
      }
      if (other.MagicId != 0) {
        MagicId = other.MagicId;
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::Proto.Vector3();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Proto.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MagicId = input.ReadInt32();
            break;
          }
          case 26: {
            if (rotation_ == null) {
              rotation_ = new global::Proto.Vector3();
            }
            input.ReadMessage(rotation_);
            break;
          }
          case 34: {
            if (position_ == null) {
              position_ = new global::Proto.Vector3();
            }
            input.ReadMessage(position_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///自动寻敌
  /// </summary>
  public sealed partial class Action_AutoFindTarget : pb::IMessage<Action_AutoFindTarget> {
    private static readonly pb::MessageParser<Action_AutoFindTarget> _parser = new pb::MessageParser<Action_AutoFindTarget>(() => new Action_AutoFindTarget());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Action_AutoFindTarget> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_AutoFindTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_AutoFindTarget(Action_AutoFindTarget other) : this() {
      auto_ = other.auto_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_AutoFindTarget Clone() {
      return new Action_AutoFindTarget(this);
    }

    /// <summary>Field number for the "Auto" field.</summary>
    public const int AutoFieldNumber = 1;
    private bool auto_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Auto {
      get { return auto_; }
      set {
        auto_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Action_AutoFindTarget);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Action_AutoFindTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Auto != other.Auto) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Auto != false) hash ^= Auto.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Auto != false) {
        output.WriteRawTag(8);
        output.WriteBool(Auto);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Auto != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Action_AutoFindTarget other) {
      if (other == null) {
        return;
      }
      if (other.Auto != false) {
        Auto = other.Auto;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Auto = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Action_MoveJoystick : pb::IMessage<Action_MoveJoystick> {
    private static readonly pb::MessageParser<Action_MoveJoystick> _parser = new pb::MessageParser<Action_MoveJoystick>(() => new Action_MoveJoystick());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Action_MoveJoystick> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_MoveJoystick() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_MoveJoystick(Action_MoveJoystick other) : this() {
      WillPos = other.willPos_ != null ? other.WillPos.Clone() : null;
      Position = other.position_ != null ? other.Position.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_MoveJoystick Clone() {
      return new Action_MoveJoystick(this);
    }

    /// <summary>Field number for the "WillPos" field.</summary>
    public const int WillPosFieldNumber = 1;
    private global::Proto.Vector3 willPos_;
    /// <summary>
    /// 400ms 后位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 WillPos {
      get { return willPos_; }
      set {
        willPos_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Proto.Vector3 position_;
    /// <summary>
    ///当前位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Action_MoveJoystick);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Action_MoveJoystick other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(WillPos, other.WillPos)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (willPos_ != null) hash ^= WillPos.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (willPos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(WillPos);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (willPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WillPos);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Action_MoveJoystick other) {
      if (other == null) {
        return;
      }
      if (other.willPos_ != null) {
        if (willPos_ == null) {
          willPos_ = new global::Proto.Vector3();
        }
        WillPos.MergeFrom(other.WillPos);
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Proto.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (willPos_ == null) {
              willPos_ = new global::Proto.Vector3();
            }
            input.ReadMessage(willPos_);
            break;
          }
          case 18: {
            if (position_ == null) {
              position_ = new global::Proto.Vector3();
            }
            input.ReadMessage(position_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Action_StopMove : pb::IMessage<Action_StopMove> {
    private static readonly pb::MessageParser<Action_StopMove> _parser = new pb::MessageParser<Action_StopMove>(() => new Action_StopMove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Action_StopMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_StopMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_StopMove(Action_StopMove other) : this() {
      StopPos = other.stopPos_ != null ? other.StopPos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_StopMove Clone() {
      return new Action_StopMove(this);
    }

    /// <summary>Field number for the "StopPos" field.</summary>
    public const int StopPosFieldNumber = 1;
    private global::Proto.Vector3 stopPos_;
    /// <summary>
    ///结束位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 StopPos {
      get { return stopPos_; }
      set {
        stopPos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Action_StopMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Action_StopMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StopPos, other.StopPos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (stopPos_ != null) hash ^= StopPos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (stopPos_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StopPos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (stopPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StopPos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Action_StopMove other) {
      if (other == null) {
        return;
      }
      if (other.stopPos_ != null) {
        if (stopPos_ == null) {
          stopPos_ = new global::Proto.Vector3();
        }
        StopPos.MergeFrom(other.StopPos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (stopPos_ == null) {
              stopPos_ = new global::Proto.Vector3();
            }
            input.ReadMessage(stopPos_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Action_NormalAttack : pb::IMessage<Action_NormalAttack> {
    private static readonly pb::MessageParser<Action_NormalAttack> _parser = new pb::MessageParser<Action_NormalAttack>(() => new Action_NormalAttack());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Action_NormalAttack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_NormalAttack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_NormalAttack(Action_NormalAttack other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_NormalAttack Clone() {
      return new Action_NormalAttack(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Action_NormalAttack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Action_NormalAttack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Action_NormalAttack other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class Action_UseItem : pb::IMessage<Action_UseItem> {
    private static readonly pb::MessageParser<Action_UseItem> _parser = new pb::MessageParser<Action_UseItem>(() => new Action_UseItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Action_UseItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_UseItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_UseItem(Action_UseItem other) : this() {
      itemId_ = other.itemId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_UseItem Clone() {
      return new Action_UseItem(this);
    }

    /// <summary>Field number for the "ItemId" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private int itemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Action_UseItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Action_UseItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ItemId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ItemId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Action_UseItem other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ItemId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Action_LookRotation : pb::IMessage<Action_LookRotation> {
    private static readonly pb::MessageParser<Action_LookRotation> _parser = new pb::MessageParser<Action_LookRotation>(() => new Action_LookRotation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Action_LookRotation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_LookRotation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_LookRotation(Action_LookRotation other) : this() {
      lookRotationY_ = other.lookRotationY_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action_LookRotation Clone() {
      return new Action_LookRotation(this);
    }

    /// <summary>Field number for the "LookRotationY" field.</summary>
    public const int LookRotationYFieldNumber = 1;
    private float lookRotationY_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LookRotationY {
      get { return lookRotationY_; }
      set {
        lookRotationY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Action_LookRotation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Action_LookRotation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LookRotationY != other.LookRotationY) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LookRotationY != 0F) hash ^= LookRotationY.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LookRotationY != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(LookRotationY);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LookRotationY != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Action_LookRotation other) {
      if (other == null) {
        return;
      }
      if (other.LookRotationY != 0F) {
        LookRotationY = other.LookRotationY;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            LookRotationY = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///元素退出场景
  /// </summary>
  public sealed partial class Notify_ElementExitState : pb::IMessage<Notify_ElementExitState> {
    private static readonly pb::MessageParser<Notify_ElementExitState> _parser = new pb::MessageParser<Notify_ElementExitState>(() => new Notify_ElementExitState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_ElementExitState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_ElementExitState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_ElementExitState(Notify_ElementExitState other) : this() {
      index_ = other.index_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_ElementExitState Clone() {
      return new Notify_ElementExitState(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_ElementExitState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_ElementExitState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_ElementExitState other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///创建一个释放者
  /// </summary>
  public sealed partial class Notify_CreateReleaser : pb::IMessage<Notify_CreateReleaser> {
    private static readonly pb::MessageParser<Notify_CreateReleaser> _parser = new pb::MessageParser<Notify_CreateReleaser>(() => new Notify_CreateReleaser());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CreateReleaser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CreateReleaser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CreateReleaser(Notify_CreateReleaser other) : this() {
      index_ = other.index_;
      releaserIndex_ = other.releaserIndex_;
      targetIndex_ = other.targetIndex_;
      magicKey_ = other.magicKey_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      rMType_ = other.rMType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CreateReleaser Clone() {
      return new Notify_CreateReleaser(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "ReleaserIndex" field.</summary>
    public const int ReleaserIndexFieldNumber = 2;
    private int releaserIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReleaserIndex {
      get { return releaserIndex_; }
      set {
        releaserIndex_ = value;
      }
    }

    /// <summary>Field number for the "TargetIndex" field.</summary>
    public const int TargetIndexFieldNumber = 3;
    private int targetIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetIndex {
      get { return targetIndex_; }
      set {
        targetIndex_ = value;
      }
    }

    /// <summary>Field number for the "MagicKey" field.</summary>
    public const int MagicKeyFieldNumber = 4;
    private string magicKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MagicKey {
      get { return magicKey_; }
      set {
        magicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 5;
    private global::Proto.Vector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "RMType" field.</summary>
    public const int RMTypeFieldNumber = 6;
    private global::Proto.ReleaserModeType rMType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.ReleaserModeType RMType {
      get { return rMType_; }
      set {
        rMType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CreateReleaser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CreateReleaser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (ReleaserIndex != other.ReleaserIndex) return false;
      if (TargetIndex != other.TargetIndex) return false;
      if (MagicKey != other.MagicKey) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (RMType != other.RMType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (ReleaserIndex != 0) hash ^= ReleaserIndex.GetHashCode();
      if (TargetIndex != 0) hash ^= TargetIndex.GetHashCode();
      if (MagicKey.Length != 0) hash ^= MagicKey.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (RMType != 0) hash ^= RMType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (ReleaserIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ReleaserIndex);
      }
      if (TargetIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetIndex);
      }
      if (MagicKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MagicKey);
      }
      if (position_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Position);
      }
      if (RMType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) RMType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (ReleaserIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReleaserIndex);
      }
      if (TargetIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetIndex);
      }
      if (MagicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MagicKey);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (RMType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RMType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CreateReleaser other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.ReleaserIndex != 0) {
        ReleaserIndex = other.ReleaserIndex;
      }
      if (other.TargetIndex != 0) {
        TargetIndex = other.TargetIndex;
      }
      if (other.MagicKey.Length != 0) {
        MagicKey = other.MagicKey;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Proto.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.RMType != 0) {
        RMType = other.RMType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            ReleaserIndex = input.ReadInt32();
            break;
          }
          case 24: {
            TargetIndex = input.ReadInt32();
            break;
          }
          case 34: {
            MagicKey = input.ReadString();
            break;
          }
          case 42: {
            if (position_ == null) {
              position_ = new global::Proto.Vector3();
            }
            input.ReadMessage(position_);
            break;
          }
          case 48: {
            rMType_ = (global::Proto.ReleaserModeType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///战斗中的角色
  /// </summary>
  public sealed partial class Notify_CreateBattleCharacter : pb::IMessage<Notify_CreateBattleCharacter> {
    private static readonly pb::MessageParser<Notify_CreateBattleCharacter> _parser = new pb::MessageParser<Notify_CreateBattleCharacter>(() => new Notify_CreateBattleCharacter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CreateBattleCharacter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CreateBattleCharacter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CreateBattleCharacter(Notify_CreateBattleCharacter other) : this() {
      index_ = other.index_;
      accountUuid_ = other.accountUuid_;
      configID_ = other.configID_;
      teamIndex_ = other.teamIndex_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      Forward = other.forward_ != null ? other.Forward.Clone() : null;
      level_ = other.level_;
      hp_ = other.hp_;
      maxHp_ = other.maxHp_;
      name_ = other.name_;
      speed_ = other.speed_;
      cds_ = other.cds_.Clone();
      mp_ = other.mp_;
      mpMax_ = other.mpMax_;
      ownerIndex_ = other.ownerIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CreateBattleCharacter Clone() {
      return new Notify_CreateBattleCharacter(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "AccountUuid" field.</summary>
    public const int AccountUuidFieldNumber = 2;
    private string accountUuid_ = "";
    /// <summary>
    ///用户ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountUuid {
      get { return accountUuid_; }
      set {
        accountUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ConfigID" field.</summary>
    public const int ConfigIDFieldNumber = 3;
    private int configID_;
    /// <summary>
    ///配表ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConfigID {
      get { return configID_; }
      set {
        configID_ = value;
      }
    }

    /// <summary>Field number for the "TeamIndex" field.</summary>
    public const int TeamIndexFieldNumber = 4;
    private int teamIndex_;
    /// <summary>
    ///阵营ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamIndex {
      get { return teamIndex_; }
      set {
        teamIndex_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 5;
    private global::Proto.Vector3 position_;
    /// <summary>
    ///位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "Forward" field.</summary>
    public const int ForwardFieldNumber = 6;
    private global::Proto.Vector3 forward_;
    /// <summary>
    ///朝向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Forward {
      get { return forward_; }
      set {
        forward_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 7;
    private int level_;
    /// <summary>
    ///等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "Hp" field.</summary>
    public const int HpFieldNumber = 8;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "MaxHp" field.</summary>
    public const int MaxHpFieldNumber = 9;
    private int maxHp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxHp {
      get { return maxHp_; }
      set {
        maxHp_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 14;
    private string name_ = "";
    /// <summary>
    ///名字
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 15;
    private float speed_;
    /// <summary>
    ///移动速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "Cds" field.</summary>
    public const int CdsFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Proto.HeroMagicData> _repeated_cds_codec
        = pb::FieldCodec.ForMessage(130, global::Proto.HeroMagicData.Parser);
    private readonly pbc::RepeatedField<global::Proto.HeroMagicData> cds_ = new pbc::RepeatedField<global::Proto.HeroMagicData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Proto.HeroMagicData> Cds {
      get { return cds_; }
    }

    /// <summary>Field number for the "Mp" field.</summary>
    public const int MpFieldNumber = 17;
    private int mp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mp {
      get { return mp_; }
      set {
        mp_ = value;
      }
    }

    /// <summary>Field number for the "MpMax" field.</summary>
    public const int MpMaxFieldNumber = 18;
    private int mpMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MpMax {
      get { return mpMax_; }
      set {
        mpMax_ = value;
      }
    }

    /// <summary>Field number for the "OwnerIndex" field.</summary>
    public const int OwnerIndexFieldNumber = 19;
    private int ownerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OwnerIndex {
      get { return ownerIndex_; }
      set {
        ownerIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CreateBattleCharacter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CreateBattleCharacter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (AccountUuid != other.AccountUuid) return false;
      if (ConfigID != other.ConfigID) return false;
      if (TeamIndex != other.TeamIndex) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Forward, other.Forward)) return false;
      if (Level != other.Level) return false;
      if (Hp != other.Hp) return false;
      if (MaxHp != other.MaxHp) return false;
      if (Name != other.Name) return false;
      if (Speed != other.Speed) return false;
      if(!cds_.Equals(other.cds_)) return false;
      if (Mp != other.Mp) return false;
      if (MpMax != other.MpMax) return false;
      if (OwnerIndex != other.OwnerIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (AccountUuid.Length != 0) hash ^= AccountUuid.GetHashCode();
      if (ConfigID != 0) hash ^= ConfigID.GetHashCode();
      if (TeamIndex != 0) hash ^= TeamIndex.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (forward_ != null) hash ^= Forward.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (MaxHp != 0) hash ^= MaxHp.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Speed != 0F) hash ^= Speed.GetHashCode();
      hash ^= cds_.GetHashCode();
      if (Mp != 0) hash ^= Mp.GetHashCode();
      if (MpMax != 0) hash ^= MpMax.GetHashCode();
      if (OwnerIndex != 0) hash ^= OwnerIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (AccountUuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccountUuid);
      }
      if (ConfigID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ConfigID);
      }
      if (TeamIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TeamIndex);
      }
      if (position_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Position);
      }
      if (forward_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Forward);
      }
      if (Level != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Level);
      }
      if (Hp != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Hp);
      }
      if (MaxHp != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MaxHp);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Name);
      }
      if (Speed != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(Speed);
      }
      cds_.WriteTo(output, _repeated_cds_codec);
      if (Mp != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Mp);
      }
      if (MpMax != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(MpMax);
      }
      if (OwnerIndex != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(OwnerIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (AccountUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountUuid);
      }
      if (ConfigID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConfigID);
      }
      if (TeamIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamIndex);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (forward_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Forward);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (MaxHp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      size += cds_.CalculateSize(_repeated_cds_codec);
      if (Mp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Mp);
      }
      if (MpMax != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MpMax);
      }
      if (OwnerIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OwnerIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CreateBattleCharacter other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.AccountUuid.Length != 0) {
        AccountUuid = other.AccountUuid;
      }
      if (other.ConfigID != 0) {
        ConfigID = other.ConfigID;
      }
      if (other.TeamIndex != 0) {
        TeamIndex = other.TeamIndex;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Proto.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.forward_ != null) {
        if (forward_ == null) {
          forward_ = new global::Proto.Vector3();
        }
        Forward.MergeFrom(other.Forward);
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.MaxHp != 0) {
        MaxHp = other.MaxHp;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      cds_.Add(other.cds_);
      if (other.Mp != 0) {
        Mp = other.Mp;
      }
      if (other.MpMax != 0) {
        MpMax = other.MpMax;
      }
      if (other.OwnerIndex != 0) {
        OwnerIndex = other.OwnerIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            AccountUuid = input.ReadString();
            break;
          }
          case 24: {
            ConfigID = input.ReadInt32();
            break;
          }
          case 32: {
            TeamIndex = input.ReadInt32();
            break;
          }
          case 42: {
            if (position_ == null) {
              position_ = new global::Proto.Vector3();
            }
            input.ReadMessage(position_);
            break;
          }
          case 50: {
            if (forward_ == null) {
              forward_ = new global::Proto.Vector3();
            }
            input.ReadMessage(forward_);
            break;
          }
          case 56: {
            Level = input.ReadInt32();
            break;
          }
          case 64: {
            Hp = input.ReadInt32();
            break;
          }
          case 72: {
            MaxHp = input.ReadInt32();
            break;
          }
          case 114: {
            Name = input.ReadString();
            break;
          }
          case 125: {
            Speed = input.ReadFloat();
            break;
          }
          case 130: {
            cds_.AddEntriesFrom(input, _repeated_cds_codec);
            break;
          }
          case 136: {
            Mp = input.ReadInt32();
            break;
          }
          case 144: {
            MpMax = input.ReadInt32();
            break;
          }
          case 152: {
            OwnerIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///创建一个飞行物
  /// </summary>
  public sealed partial class Notify_CreateMissile : pb::IMessage<Notify_CreateMissile> {
    private static readonly pb::MessageParser<Notify_CreateMissile> _parser = new pb::MessageParser<Notify_CreateMissile>(() => new Notify_CreateMissile());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CreateMissile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CreateMissile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CreateMissile(Notify_CreateMissile other) : this() {
      index_ = other.index_;
      releaserIndex_ = other.releaserIndex_;
      resourcesPath_ = other.resourcesPath_;
      speed_ = other.speed_;
      fromBone_ = other.fromBone_;
      toBone_ = other.toBone_;
      Offset = other.offset_ != null ? other.Offset.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CreateMissile Clone() {
      return new Notify_CreateMissile(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "ReleaserIndex" field.</summary>
    public const int ReleaserIndexFieldNumber = 2;
    private int releaserIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReleaserIndex {
      get { return releaserIndex_; }
      set {
        releaserIndex_ = value;
      }
    }

    /// <summary>Field number for the "ResourcesPath" field.</summary>
    public const int ResourcesPathFieldNumber = 3;
    private string resourcesPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourcesPath {
      get { return resourcesPath_; }
      set {
        resourcesPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 4;
    private float speed_;
    /// <summary>
    ///速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "FromBone" field.</summary>
    public const int FromBoneFieldNumber = 6;
    private string fromBone_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FromBone {
      get { return fromBone_; }
      set {
        fromBone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ToBone" field.</summary>
    public const int ToBoneFieldNumber = 7;
    private string toBone_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ToBone {
      get { return toBone_; }
      set {
        toBone_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Offset" field.</summary>
    public const int OffsetFieldNumber = 8;
    private global::Proto.Vector3 offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CreateMissile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CreateMissile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (ReleaserIndex != other.ReleaserIndex) return false;
      if (ResourcesPath != other.ResourcesPath) return false;
      if (Speed != other.Speed) return false;
      if (FromBone != other.FromBone) return false;
      if (ToBone != other.ToBone) return false;
      if (!object.Equals(Offset, other.Offset)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (ReleaserIndex != 0) hash ^= ReleaserIndex.GetHashCode();
      if (ResourcesPath.Length != 0) hash ^= ResourcesPath.GetHashCode();
      if (Speed != 0F) hash ^= Speed.GetHashCode();
      if (FromBone.Length != 0) hash ^= FromBone.GetHashCode();
      if (ToBone.Length != 0) hash ^= ToBone.GetHashCode();
      if (offset_ != null) hash ^= Offset.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (ReleaserIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ReleaserIndex);
      }
      if (ResourcesPath.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ResourcesPath);
      }
      if (Speed != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Speed);
      }
      if (FromBone.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(FromBone);
      }
      if (ToBone.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ToBone);
      }
      if (offset_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Offset);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (ReleaserIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReleaserIndex);
      }
      if (ResourcesPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourcesPath);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (FromBone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FromBone);
      }
      if (ToBone.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ToBone);
      }
      if (offset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offset);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CreateMissile other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.ReleaserIndex != 0) {
        ReleaserIndex = other.ReleaserIndex;
      }
      if (other.ResourcesPath.Length != 0) {
        ResourcesPath = other.ResourcesPath;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.FromBone.Length != 0) {
        FromBone = other.FromBone;
      }
      if (other.ToBone.Length != 0) {
        ToBone = other.ToBone;
      }
      if (other.offset_ != null) {
        if (offset_ == null) {
          offset_ = new global::Proto.Vector3();
        }
        Offset.MergeFrom(other.Offset);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            ReleaserIndex = input.ReadInt32();
            break;
          }
          case 26: {
            ResourcesPath = input.ReadString();
            break;
          }
          case 37: {
            Speed = input.ReadFloat();
            break;
          }
          case 50: {
            FromBone = input.ReadString();
            break;
          }
          case 58: {
            ToBone = input.ReadString();
            break;
          }
          case 66: {
            if (offset_ == null) {
              offset_ = new global::Proto.Vector3();
            }
            input.ReadMessage(offset_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterSetPosition : pb::IMessage<Notify_CharacterSetPosition> {
    private static readonly pb::MessageParser<Notify_CharacterSetPosition> _parser = new pb::MessageParser<Notify_CharacterSetPosition>(() => new Notify_CharacterSetPosition());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterSetPosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterSetPosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterSetPosition(Notify_CharacterSetPosition other) : this() {
      index_ = other.index_;
      Position = other.position_ != null ? other.Position.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterSetPosition Clone() {
      return new Notify_CharacterSetPosition(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Proto.Vector3 position_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterSetPosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterSetPosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterSetPosition other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Proto.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            if (position_ == null) {
              position_ = new global::Proto.Vector3();
            }
            input.ReadMessage(position_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterSpeed : pb::IMessage<Notify_CharacterSpeed> {
    private static readonly pb::MessageParser<Notify_CharacterSpeed> _parser = new pb::MessageParser<Notify_CharacterSpeed>(() => new Notify_CharacterSpeed());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterSpeed> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterSpeed() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterSpeed(Notify_CharacterSpeed other) : this() {
      index_ = other.index_;
      speed_ = other.speed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterSpeed Clone() {
      return new Notify_CharacterSpeed(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 2;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterSpeed);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterSpeed other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Speed != other.Speed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Speed != 0F) hash ^= Speed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Speed != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Speed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterSpeed other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 21: {
            Speed = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_LookAtCharacter : pb::IMessage<Notify_LookAtCharacter> {
    private static readonly pb::MessageParser<Notify_LookAtCharacter> _parser = new pb::MessageParser<Notify_LookAtCharacter>(() => new Notify_LookAtCharacter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_LookAtCharacter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_LookAtCharacter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_LookAtCharacter(Notify_LookAtCharacter other) : this() {
      index_ = other.index_;
      target_ = other.target_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_LookAtCharacter Clone() {
      return new Notify_LookAtCharacter(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    /// <summary>
    ///源
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Target" field.</summary>
    public const int TargetFieldNumber = 2;
    private int target_;
    /// <summary>
    ///目标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_LookAtCharacter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_LookAtCharacter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Target != other.Target) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Target != 0) hash ^= Target.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Target != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Target);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Target != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Target);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_LookAtCharacter other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Target != 0) {
        Target = other.Target;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Target = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterMoveTo : pb::IMessage<Notify_CharacterMoveTo> {
    private static readonly pb::MessageParser<Notify_CharacterMoveTo> _parser = new pb::MessageParser<Notify_CharacterMoveTo>(() => new Notify_CharacterMoveTo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterMoveTo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterMoveTo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterMoveTo(Notify_CharacterMoveTo other) : this() {
      index_ = other.index_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      Target = other.target_ != null ? other.Target.Clone() : null;
      stopDis_ = other.stopDis_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterMoveTo Clone() {
      return new Notify_CharacterMoveTo(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Proto.Vector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "Target" field.</summary>
    public const int TargetFieldNumber = 3;
    private global::Proto.Vector3 target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "StopDis" field.</summary>
    public const int StopDisFieldNumber = 4;
    private float stopDis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StopDis {
      get { return stopDis_; }
      set {
        stopDis_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterMoveTo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterMoveTo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Target, other.Target)) return false;
      if (StopDis != other.StopDis) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (target_ != null) hash ^= Target.GetHashCode();
      if (StopDis != 0F) hash ^= StopDis.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (target_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Target);
      }
      if (StopDis != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(StopDis);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (StopDis != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterMoveTo other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Proto.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.target_ != null) {
        if (target_ == null) {
          target_ = new global::Proto.Vector3();
        }
        Target.MergeFrom(other.Target);
      }
      if (other.StopDis != 0F) {
        StopDis = other.StopDis;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            if (position_ == null) {
              position_ = new global::Proto.Vector3();
            }
            input.ReadMessage(position_);
            break;
          }
          case 26: {
            if (target_ == null) {
              target_ = new global::Proto.Vector3();
            }
            input.ReadMessage(target_);
            break;
          }
          case 37: {
            StopDis = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterStopMove : pb::IMessage<Notify_CharacterStopMove> {
    private static readonly pb::MessageParser<Notify_CharacterStopMove> _parser = new pb::MessageParser<Notify_CharacterStopMove>(() => new Notify_CharacterStopMove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterStopMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterStopMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterStopMove(Notify_CharacterStopMove other) : this() {
      index_ = other.index_;
      Position = other.position_ != null ? other.Position.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterStopMove Clone() {
      return new Notify_CharacterStopMove(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Proto.Vector3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterStopMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterStopMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterStopMove other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Proto.Vector3();
        }
        Position.MergeFrom(other.Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            if (position_ == null) {
              position_ = new global::Proto.Vector3();
            }
            input.ReadMessage(position_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterDeath : pb::IMessage<Notify_CharacterDeath> {
    private static readonly pb::MessageParser<Notify_CharacterDeath> _parser = new pb::MessageParser<Notify_CharacterDeath>(() => new Notify_CharacterDeath());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterDeath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterDeath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterDeath(Notify_CharacterDeath other) : this() {
      index_ = other.index_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterDeath Clone() {
      return new Notify_CharacterDeath(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterDeath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterDeath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterDeath other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterPriorityMove : pb::IMessage<Notify_CharacterPriorityMove> {
    private static readonly pb::MessageParser<Notify_CharacterPriorityMove> _parser = new pb::MessageParser<Notify_CharacterPriorityMove>(() => new Notify_CharacterPriorityMove());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterPriorityMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterPriorityMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterPriorityMove(Notify_CharacterPriorityMove other) : this() {
      index_ = other.index_;
      priorityMove_ = other.priorityMove_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterPriorityMove Clone() {
      return new Notify_CharacterPriorityMove(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "PriorityMove" field.</summary>
    public const int PriorityMoveFieldNumber = 2;
    private float priorityMove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PriorityMove {
      get { return priorityMove_; }
      set {
        priorityMove_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterPriorityMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterPriorityMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (PriorityMove != other.PriorityMove) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (PriorityMove != 0F) hash ^= PriorityMove.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (PriorityMove != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PriorityMove);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (PriorityMove != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterPriorityMove other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.PriorityMove != 0F) {
        PriorityMove = other.PriorityMove;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 21: {
            PriorityMove = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterSetScale : pb::IMessage<Notify_CharacterSetScale> {
    private static readonly pb::MessageParser<Notify_CharacterSetScale> _parser = new pb::MessageParser<Notify_CharacterSetScale>(() => new Notify_CharacterSetScale());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterSetScale> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterSetScale() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterSetScale(Notify_CharacterSetScale other) : this() {
      index_ = other.index_;
      scale_ = other.scale_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterSetScale Clone() {
      return new Notify_CharacterSetScale(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterSetScale);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterSetScale other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Scale != other.Scale) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Scale != 0F) hash ^= Scale.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Scale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Scale);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterSetScale other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 21: {
            Scale = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterAttachMagic : pb::IMessage<Notify_CharacterAttachMagic> {
    private static readonly pb::MessageParser<Notify_CharacterAttachMagic> _parser = new pb::MessageParser<Notify_CharacterAttachMagic>(() => new Notify_CharacterAttachMagic());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterAttachMagic> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterAttachMagic() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterAttachMagic(Notify_CharacterAttachMagic other) : this() {
      index_ = other.index_;
      magicId_ = other.magicId_;
      completedTime_ = other.completedTime_;
      mType_ = other.mType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterAttachMagic Clone() {
      return new Notify_CharacterAttachMagic(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "MagicId" field.</summary>
    public const int MagicIdFieldNumber = 2;
    private int magicId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MagicId {
      get { return magicId_; }
      set {
        magicId_ = value;
      }
    }

    /// <summary>Field number for the "CompletedTime" field.</summary>
    public const int CompletedTimeFieldNumber = 3;
    private float completedTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CompletedTime {
      get { return completedTime_; }
      set {
        completedTime_ = value;
      }
    }

    /// <summary>Field number for the "mType" field.</summary>
    public const int MTypeFieldNumber = 4;
    private global::Proto.MagicType mType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.MagicType MType {
      get { return mType_; }
      set {
        mType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterAttachMagic);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterAttachMagic other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (MagicId != other.MagicId) return false;
      if (CompletedTime != other.CompletedTime) return false;
      if (MType != other.MType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (MagicId != 0) hash ^= MagicId.GetHashCode();
      if (CompletedTime != 0F) hash ^= CompletedTime.GetHashCode();
      if (MType != 0) hash ^= MType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (MagicId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MagicId);
      }
      if (CompletedTime != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(CompletedTime);
      }
      if (MType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) MType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (MagicId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagicId);
      }
      if (CompletedTime != 0F) {
        size += 1 + 4;
      }
      if (MType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterAttachMagic other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.MagicId != 0) {
        MagicId = other.MagicId;
      }
      if (other.CompletedTime != 0F) {
        CompletedTime = other.CompletedTime;
      }
      if (other.MType != 0) {
        MType = other.MType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            MagicId = input.ReadInt32();
            break;
          }
          case 29: {
            CompletedTime = input.ReadFloat();
            break;
          }
          case 32: {
            mType_ = (global::Proto.MagicType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///属性修改
  /// </summary>
  public sealed partial class Notify_PropertyValue : pb::IMessage<Notify_PropertyValue> {
    private static readonly pb::MessageParser<Notify_PropertyValue> _parser = new pb::MessageParser<Notify_PropertyValue>(() => new Notify_PropertyValue());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_PropertyValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_PropertyValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_PropertyValue(Notify_PropertyValue other) : this() {
      index_ = other.index_;
      type_ = other.type_;
      finallyValue_ = other.finallyValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_PropertyValue Clone() {
      return new Notify_PropertyValue(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Proto.HeroPropertyType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.HeroPropertyType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "FinallyValue" field.</summary>
    public const int FinallyValueFieldNumber = 3;
    private int finallyValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinallyValue {
      get { return finallyValue_; }
      set {
        finallyValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_PropertyValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_PropertyValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Type != other.Type) return false;
      if (FinallyValue != other.FinallyValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (FinallyValue != 0) hash ^= FinallyValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (FinallyValue != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FinallyValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (FinallyValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinallyValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_PropertyValue other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.FinallyValue != 0) {
        FinallyValue = other.FinallyValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            type_ = (global::Proto.HeroPropertyType) input.ReadEnum();
            break;
          }
          case 24: {
            FinallyValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///广播血量变化
  /// </summary>
  public sealed partial class Notify_HPChange : pb::IMessage<Notify_HPChange> {
    private static readonly pb::MessageParser<Notify_HPChange> _parser = new pb::MessageParser<Notify_HPChange>(() => new Notify_HPChange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_HPChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_HPChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_HPChange(Notify_HPChange other) : this() {
      index_ = other.index_;
      hp_ = other.hp_;
      cur_ = other.cur_;
      max_ = other.max_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_HPChange Clone() {
      return new Notify_HPChange(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Hp" field.</summary>
    public const int HpFieldNumber = 2;
    private int hp_;
    /// <summary>
    ///最终HP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "Cur" field.</summary>
    public const int CurFieldNumber = 3;
    private int cur_;
    /// <summary>
    ///HP变化值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cur {
      get { return cur_; }
      set {
        cur_ = value;
      }
    }

    /// <summary>Field number for the "Max" field.</summary>
    public const int MaxFieldNumber = 4;
    private int max_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_HPChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_HPChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Hp != other.Hp) return false;
      if (Cur != other.Cur) return false;
      if (Max != other.Max) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (Cur != 0) hash ^= Cur.GetHashCode();
      if (Max != 0) hash ^= Max.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Hp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Hp);
      }
      if (Cur != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cur);
      }
      if (Max != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Max);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (Cur != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cur);
      }
      if (Max != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Max);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_HPChange other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.Cur != 0) {
        Cur = other.Cur;
      }
      if (other.Max != 0) {
        Max = other.Max;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Hp = input.ReadInt32();
            break;
          }
          case 24: {
            Cur = input.ReadInt32();
            break;
          }
          case 32: {
            Max = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_MPChange : pb::IMessage<Notify_MPChange> {
    private static readonly pb::MessageParser<Notify_MPChange> _parser = new pb::MessageParser<Notify_MPChange>(() => new Notify_MPChange());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_MPChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_MPChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_MPChange(Notify_MPChange other) : this() {
      index_ = other.index_;
      mp_ = other.mp_;
      cur_ = other.cur_;
      max_ = other.max_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_MPChange Clone() {
      return new Notify_MPChange(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Mp" field.</summary>
    public const int MpFieldNumber = 2;
    private int mp_;
    /// <summary>
    ///最终MP 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mp {
      get { return mp_; }
      set {
        mp_ = value;
      }
    }

    /// <summary>Field number for the "Cur" field.</summary>
    public const int CurFieldNumber = 3;
    private int cur_;
    /// <summary>
    ///MP变化值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cur {
      get { return cur_; }
      set {
        cur_ = value;
      }
    }

    /// <summary>Field number for the "Max" field.</summary>
    public const int MaxFieldNumber = 4;
    private int max_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_MPChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_MPChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Mp != other.Mp) return false;
      if (Cur != other.Cur) return false;
      if (Max != other.Max) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Mp != 0) hash ^= Mp.GetHashCode();
      if (Cur != 0) hash ^= Cur.GetHashCode();
      if (Max != 0) hash ^= Max.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Mp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Mp);
      }
      if (Cur != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cur);
      }
      if (Max != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Max);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Mp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mp);
      }
      if (Cur != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cur);
      }
      if (Max != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Max);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_MPChange other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Mp != 0) {
        Mp = other.Mp;
      }
      if (other.Cur != 0) {
        Cur = other.Cur;
      }
      if (other.Max != 0) {
        Max = other.Max;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Mp = input.ReadInt32();
            break;
          }
          case 24: {
            Cur = input.ReadInt32();
            break;
          }
          case 32: {
            Max = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_DamageResult : pb::IMessage<Notify_DamageResult> {
    private static readonly pb::MessageParser<Notify_DamageResult> _parser = new pb::MessageParser<Notify_DamageResult>(() => new Notify_DamageResult());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_DamageResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_DamageResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_DamageResult(Notify_DamageResult other) : this() {
      index_ = other.index_;
      targetIndex_ = other.targetIndex_;
      isMissed_ = other.isMissed_;
      damage_ = other.damage_;
      crtMult_ = other.crtMult_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_DamageResult Clone() {
      return new Notify_DamageResult(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "TargetIndex" field.</summary>
    public const int TargetIndexFieldNumber = 2;
    private int targetIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetIndex {
      get { return targetIndex_; }
      set {
        targetIndex_ = value;
      }
    }

    /// <summary>Field number for the "IsMissed" field.</summary>
    public const int IsMissedFieldNumber = 3;
    private bool isMissed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMissed {
      get { return isMissed_; }
      set {
        isMissed_ = value;
      }
    }

    /// <summary>Field number for the "Damage" field.</summary>
    public const int DamageFieldNumber = 4;
    private int damage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Damage {
      get { return damage_; }
      set {
        damage_ = value;
      }
    }

    /// <summary>Field number for the "CrtMult" field.</summary>
    public const int CrtMultFieldNumber = 5;
    private int crtMult_;
    /// <summary>
    ///暴击
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CrtMult {
      get { return crtMult_; }
      set {
        crtMult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_DamageResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_DamageResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (TargetIndex != other.TargetIndex) return false;
      if (IsMissed != other.IsMissed) return false;
      if (Damage != other.Damage) return false;
      if (CrtMult != other.CrtMult) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (TargetIndex != 0) hash ^= TargetIndex.GetHashCode();
      if (IsMissed != false) hash ^= IsMissed.GetHashCode();
      if (Damage != 0) hash ^= Damage.GetHashCode();
      if (CrtMult != 0) hash ^= CrtMult.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (TargetIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetIndex);
      }
      if (IsMissed != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsMissed);
      }
      if (Damage != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Damage);
      }
      if (CrtMult != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CrtMult);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (TargetIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetIndex);
      }
      if (IsMissed != false) {
        size += 1 + 1;
      }
      if (Damage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Damage);
      }
      if (CrtMult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CrtMult);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_DamageResult other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.TargetIndex != 0) {
        TargetIndex = other.TargetIndex;
      }
      if (other.IsMissed != false) {
        IsMissed = other.IsMissed;
      }
      if (other.Damage != 0) {
        Damage = other.Damage;
      }
      if (other.CrtMult != 0) {
        CrtMult = other.CrtMult;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            TargetIndex = input.ReadInt32();
            break;
          }
          case 24: {
            IsMissed = input.ReadBool();
            break;
          }
          case 32: {
            Damage = input.ReadInt32();
            break;
          }
          case 40: {
            CrtMult = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_Drop : pb::IMessage<Notify_Drop> {
    private static readonly pb::MessageParser<Notify_Drop> _parser = new pb::MessageParser<Notify_Drop>(() => new Notify_Drop());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_Drop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_Drop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_Drop(Notify_Drop other) : this() {
      index_ = other.index_;
      Item = other.item_ != null ? other.Item.Clone() : null;
      teamIndex_ = other.teamIndex_;
      groupIndex_ = other.groupIndex_;
      Pos = other.pos_ != null ? other.Pos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_Drop Clone() {
      return new Notify_Drop(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Item" field.</summary>
    public const int ItemFieldNumber = 2;
    private global::Proto.PlayerItem item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.PlayerItem Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    /// <summary>Field number for the "TeamIndex" field.</summary>
    public const int TeamIndexFieldNumber = 3;
    private int teamIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamIndex {
      get { return teamIndex_; }
      set {
        teamIndex_ = value;
      }
    }

    /// <summary>Field number for the "GroupIndex" field.</summary>
    public const int GroupIndexFieldNumber = 4;
    private int groupIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupIndex {
      get { return groupIndex_; }
      set {
        groupIndex_ = value;
      }
    }

    /// <summary>Field number for the "Pos" field.</summary>
    public const int PosFieldNumber = 5;
    private global::Proto.Vector3 pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_Drop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_Drop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (!object.Equals(Item, other.Item)) return false;
      if (TeamIndex != other.TeamIndex) return false;
      if (GroupIndex != other.GroupIndex) return false;
      if (!object.Equals(Pos, other.Pos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      if (TeamIndex != 0) hash ^= TeamIndex.GetHashCode();
      if (GroupIndex != 0) hash ^= GroupIndex.GetHashCode();
      if (pos_ != null) hash ^= Pos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (item_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Item);
      }
      if (TeamIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TeamIndex);
      }
      if (GroupIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GroupIndex);
      }
      if (pos_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (item_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (TeamIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamIndex);
      }
      if (GroupIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupIndex);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_Drop other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.item_ != null) {
        if (item_ == null) {
          item_ = new global::Proto.PlayerItem();
        }
        Item.MergeFrom(other.Item);
      }
      if (other.TeamIndex != 0) {
        TeamIndex = other.TeamIndex;
      }
      if (other.GroupIndex != 0) {
        GroupIndex = other.GroupIndex;
      }
      if (other.pos_ != null) {
        if (pos_ == null) {
          pos_ = new global::Proto.Vector3();
        }
        Pos.MergeFrom(other.Pos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            if (item_ == null) {
              item_ = new global::Proto.PlayerItem();
            }
            input.ReadMessage(item_);
            break;
          }
          case 24: {
            TeamIndex = input.ReadInt32();
            break;
          }
          case 32: {
            GroupIndex = input.ReadInt32();
            break;
          }
          case 42: {
            if (pos_ == null) {
              pos_ = new global::Proto.Vector3();
            }
            input.ReadMessage(pos_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_PlayerJoinState : pb::IMessage<Notify_PlayerJoinState> {
    private static readonly pb::MessageParser<Notify_PlayerJoinState> _parser = new pb::MessageParser<Notify_PlayerJoinState>(() => new Notify_PlayerJoinState());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_PlayerJoinState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_PlayerJoinState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_PlayerJoinState(Notify_PlayerJoinState other) : this() {
      accountUuid_ = other.accountUuid_;
      timeNow_ = other.timeNow_;
      gold_ = other.gold_;
      Package = other.package_ != null ? other.Package.Clone() : null;
      Hero = other.hero_ != null ? other.Hero.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_PlayerJoinState Clone() {
      return new Notify_PlayerJoinState(this);
    }

    /// <summary>Field number for the "AccountUuid" field.</summary>
    public const int AccountUuidFieldNumber = 1;
    private string accountUuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountUuid {
      get { return accountUuid_; }
      set {
        accountUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TimeNow" field.</summary>
    public const int TimeNowFieldNumber = 2;
    private float timeNow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TimeNow {
      get { return timeNow_; }
      set {
        timeNow_ = value;
      }
    }

    /// <summary>Field number for the "Gold" field.</summary>
    public const int GoldFieldNumber = 3;
    private int gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "Package" field.</summary>
    public const int PackageFieldNumber = 4;
    private global::Proto.PlayerPackage package_;
    /// <summary>
    ///道具列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.PlayerPackage Package {
      get { return package_; }
      set {
        package_ = value;
      }
    }

    /// <summary>Field number for the "Hero" field.</summary>
    public const int HeroFieldNumber = 5;
    private global::Proto.DHero hero_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.DHero Hero {
      get { return hero_; }
      set {
        hero_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_PlayerJoinState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_PlayerJoinState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccountUuid != other.AccountUuid) return false;
      if (TimeNow != other.TimeNow) return false;
      if (Gold != other.Gold) return false;
      if (!object.Equals(Package, other.Package)) return false;
      if (!object.Equals(Hero, other.Hero)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccountUuid.Length != 0) hash ^= AccountUuid.GetHashCode();
      if (TimeNow != 0F) hash ^= TimeNow.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      if (package_ != null) hash ^= Package.GetHashCode();
      if (hero_ != null) hash ^= Hero.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccountUuid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccountUuid);
      }
      if (TimeNow != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(TimeNow);
      }
      if (Gold != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Gold);
      }
      if (package_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Package);
      }
      if (hero_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Hero);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccountUuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountUuid);
      }
      if (TimeNow != 0F) {
        size += 1 + 4;
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      if (package_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Package);
      }
      if (hero_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hero);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_PlayerJoinState other) {
      if (other == null) {
        return;
      }
      if (other.AccountUuid.Length != 0) {
        AccountUuid = other.AccountUuid;
      }
      if (other.TimeNow != 0F) {
        TimeNow = other.TimeNow;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
      if (other.package_ != null) {
        if (package_ == null) {
          package_ = new global::Proto.PlayerPackage();
        }
        Package.MergeFrom(other.Package);
      }
      if (other.hero_ != null) {
        if (hero_ == null) {
          hero_ = new global::Proto.DHero();
        }
        Hero.MergeFrom(other.Hero);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AccountUuid = input.ReadString();
            break;
          }
          case 21: {
            TimeNow = input.ReadFloat();
            break;
          }
          case 24: {
            Gold = input.ReadInt32();
            break;
          }
          case 34: {
            if (package_ == null) {
              package_ = new global::Proto.PlayerPackage();
            }
            input.ReadMessage(package_);
            break;
          }
          case 42: {
            if (hero_ == null) {
              hero_ = new global::Proto.DHero();
            }
            input.ReadMessage(hero_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterLock : pb::IMessage<Notify_CharacterLock> {
    private static readonly pb::MessageParser<Notify_CharacterLock> _parser = new pb::MessageParser<Notify_CharacterLock>(() => new Notify_CharacterLock());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterLock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterLock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterLock(Notify_CharacterLock other) : this() {
      index_ = other.index_;
      lock_ = other.lock_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterLock Clone() {
      return new Notify_CharacterLock(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Lock" field.</summary>
    public const int LockFieldNumber = 2;
    private int lock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lock {
      get { return lock_; }
      set {
        lock_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterLock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterLock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Lock != other.Lock) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Lock != 0) hash ^= Lock.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Lock != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Lock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Lock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lock);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterLock other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Lock != 0) {
        Lock = other.Lock;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Lock = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterPush : pb::IMessage<Notify_CharacterPush> {
    private static readonly pb::MessageParser<Notify_CharacterPush> _parser = new pb::MessageParser<Notify_CharacterPush>(() => new Notify_CharacterPush());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterPush> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterPush() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterPush(Notify_CharacterPush other) : this() {
      index_ = other.index_;
      Length = other.length_ != null ? other.Length.Clone() : null;
      Speed = other.speed_ != null ? other.Speed.Clone() : null;
      StartPos = other.startPos_ != null ? other.StartPos.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterPush Clone() {
      return new Notify_CharacterPush(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Length" field.</summary>
    public const int LengthFieldNumber = 2;
    private global::Proto.Vector3 length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 3;
    private global::Proto.Vector3 speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "StartPos" field.</summary>
    public const int StartPosFieldNumber = 4;
    private global::Proto.Vector3 startPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Proto.Vector3 StartPos {
      get { return startPos_; }
      set {
        startPos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterPush);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterPush other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (!object.Equals(Length, other.Length)) return false;
      if (!object.Equals(Speed, other.Speed)) return false;
      if (!object.Equals(StartPos, other.StartPos)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (length_ != null) hash ^= Length.GetHashCode();
      if (speed_ != null) hash ^= Speed.GetHashCode();
      if (startPos_ != null) hash ^= StartPos.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (length_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Length);
      }
      if (speed_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Speed);
      }
      if (startPos_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(StartPos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (length_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Length);
      }
      if (speed_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Speed);
      }
      if (startPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartPos);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterPush other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.length_ != null) {
        if (length_ == null) {
          length_ = new global::Proto.Vector3();
        }
        Length.MergeFrom(other.Length);
      }
      if (other.speed_ != null) {
        if (speed_ == null) {
          speed_ = new global::Proto.Vector3();
        }
        Speed.MergeFrom(other.Speed);
      }
      if (other.startPos_ != null) {
        if (startPos_ == null) {
          startPos_ = new global::Proto.Vector3();
        }
        StartPos.MergeFrom(other.StartPos);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            if (length_ == null) {
              length_ = new global::Proto.Vector3();
            }
            input.ReadMessage(length_);
            break;
          }
          case 26: {
            if (speed_ == null) {
              speed_ = new global::Proto.Vector3();
            }
            input.ReadMessage(speed_);
            break;
          }
          case 34: {
            if (startPos_ == null) {
              startPos_ = new global::Proto.Vector3();
            }
            input.ReadMessage(startPos_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterRelive : pb::IMessage<Notify_CharacterRelive> {
    private static readonly pb::MessageParser<Notify_CharacterRelive> _parser = new pb::MessageParser<Notify_CharacterRelive>(() => new Notify_CharacterRelive());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterRelive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterRelive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterRelive(Notify_CharacterRelive other) : this() {
      index_ = other.index_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterRelive Clone() {
      return new Notify_CharacterRelive(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterRelive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterRelive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterRelive other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterLevel : pb::IMessage<Notify_CharacterLevel> {
    private static readonly pb::MessageParser<Notify_CharacterLevel> _parser = new pb::MessageParser<Notify_CharacterLevel>(() => new Notify_CharacterLevel());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterLevel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterLevel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterLevel(Notify_CharacterLevel other) : this() {
      index_ = other.index_;
      level_ = other.level_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterLevel Clone() {
      return new Notify_CharacterLevel(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterLevel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterLevel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Level != other.Level) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterLevel other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_BattleItemChangeGroupIndex : pb::IMessage<Notify_BattleItemChangeGroupIndex> {
    private static readonly pb::MessageParser<Notify_BattleItemChangeGroupIndex> _parser = new pb::MessageParser<Notify_BattleItemChangeGroupIndex>(() => new Notify_BattleItemChangeGroupIndex());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_BattleItemChangeGroupIndex> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_BattleItemChangeGroupIndex() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_BattleItemChangeGroupIndex(Notify_BattleItemChangeGroupIndex other) : this() {
      index_ = other.index_;
      groupIndex_ = other.groupIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_BattleItemChangeGroupIndex Clone() {
      return new Notify_BattleItemChangeGroupIndex(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "GroupIndex" field.</summary>
    public const int GroupIndexFieldNumber = 2;
    private int groupIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupIndex {
      get { return groupIndex_; }
      set {
        groupIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_BattleItemChangeGroupIndex);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_BattleItemChangeGroupIndex other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (GroupIndex != other.GroupIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (GroupIndex != 0) hash ^= GroupIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (GroupIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GroupIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (GroupIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_BattleItemChangeGroupIndex other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.GroupIndex != 0) {
        GroupIndex = other.GroupIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            GroupIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_DropGold : pb::IMessage<Notify_DropGold> {
    private static readonly pb::MessageParser<Notify_DropGold> _parser = new pb::MessageParser<Notify_DropGold>(() => new Notify_DropGold());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_DropGold> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_DropGold() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_DropGold(Notify_DropGold other) : this() {
      totalGold_ = other.totalGold_;
      gold_ = other.gold_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_DropGold Clone() {
      return new Notify_DropGold(this);
    }

    /// <summary>Field number for the "TotalGold" field.</summary>
    public const int TotalGoldFieldNumber = 1;
    private int totalGold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalGold {
      get { return totalGold_; }
      set {
        totalGold_ = value;
      }
    }

    /// <summary>Field number for the "Gold" field.</summary>
    public const int GoldFieldNumber = 2;
    private int gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_DropGold);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_DropGold other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalGold != other.TotalGold) return false;
      if (Gold != other.Gold) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalGold != 0) hash ^= TotalGold.GetHashCode();
      if (Gold != 0) hash ^= Gold.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalGold != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TotalGold);
      }
      if (Gold != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Gold);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalGold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalGold);
      }
      if (Gold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_DropGold other) {
      if (other == null) {
        return;
      }
      if (other.TotalGold != 0) {
        TotalGold = other.TotalGold;
      }
      if (other.Gold != 0) {
        Gold = other.Gold;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TotalGold = input.ReadInt32();
            break;
          }
          case 16: {
            Gold = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_PlayTimeLine : pb::IMessage<Notify_PlayTimeLine> {
    private static readonly pb::MessageParser<Notify_PlayTimeLine> _parser = new pb::MessageParser<Notify_PlayTimeLine>(() => new Notify_PlayTimeLine());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_PlayTimeLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_PlayTimeLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_PlayTimeLine(Notify_PlayTimeLine other) : this() {
      index_ = other.index_;
      path_ = other.path_;
      targetIndex_ = other.targetIndex_;
      type_ = other.type_;
      playIndex_ = other.playIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_PlayTimeLine Clone() {
      return new Notify_PlayTimeLine(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Path" field.</summary>
    public const int PathFieldNumber = 2;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TargetIndex" field.</summary>
    public const int TargetIndexFieldNumber = 3;
    private int targetIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetIndex {
      get { return targetIndex_; }
      set {
        targetIndex_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 4;
    private int type_;
    /// <summary>
    ///事件类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "PlayIndex" field.</summary>
    public const int PlayIndexFieldNumber = 5;
    private int playIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayIndex {
      get { return playIndex_; }
      set {
        playIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_PlayTimeLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_PlayTimeLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Path != other.Path) return false;
      if (TargetIndex != other.TargetIndex) return false;
      if (Type != other.Type) return false;
      if (PlayIndex != other.PlayIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (TargetIndex != 0) hash ^= TargetIndex.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (PlayIndex != 0) hash ^= PlayIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      if (TargetIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetIndex);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Type);
      }
      if (PlayIndex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PlayIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (TargetIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetIndex);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (PlayIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_PlayTimeLine other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.TargetIndex != 0) {
        TargetIndex = other.TargetIndex;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.PlayIndex != 0) {
        PlayIndex = other.PlayIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
          case 24: {
            TargetIndex = input.ReadInt32();
            break;
          }
          case 32: {
            Type = input.ReadInt32();
            break;
          }
          case 40: {
            PlayIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CancelTimeLine : pb::IMessage<Notify_CancelTimeLine> {
    private static readonly pb::MessageParser<Notify_CancelTimeLine> _parser = new pb::MessageParser<Notify_CancelTimeLine>(() => new Notify_CancelTimeLine());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CancelTimeLine> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CancelTimeLine() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CancelTimeLine(Notify_CancelTimeLine other) : this() {
      index_ = other.index_;
      playIndex_ = other.playIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CancelTimeLine Clone() {
      return new Notify_CancelTimeLine(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "PlayIndex" field.</summary>
    public const int PlayIndexFieldNumber = 2;
    private int playIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayIndex {
      get { return playIndex_; }
      set {
        playIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CancelTimeLine);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CancelTimeLine other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (PlayIndex != other.PlayIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (PlayIndex != 0) hash ^= PlayIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (PlayIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (PlayIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CancelTimeLine other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.PlayIndex != 0) {
        PlayIndex = other.PlayIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            PlayIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_SyncServerTime : pb::IMessage<Notify_SyncServerTime> {
    private static readonly pb::MessageParser<Notify_SyncServerTime> _parser = new pb::MessageParser<Notify_SyncServerTime>(() => new Notify_SyncServerTime());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_SyncServerTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_SyncServerTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_SyncServerTime(Notify_SyncServerTime other) : this() {
      serverNow_ = other.serverNow_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_SyncServerTime Clone() {
      return new Notify_SyncServerTime(this);
    }

    /// <summary>Field number for the "ServerNow" field.</summary>
    public const int ServerNowFieldNumber = 1;
    private float serverNow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ServerNow {
      get { return serverNow_; }
      set {
        serverNow_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_SyncServerTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_SyncServerTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServerNow != other.ServerNow) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServerNow != 0F) hash ^= ServerNow.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerNow != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(ServerNow);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerNow != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_SyncServerTime other) {
      if (other == null) {
        return;
      }
      if (other.ServerNow != 0F) {
        ServerNow = other.ServerNow;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            ServerNow = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterRotation : pb::IMessage<Notify_CharacterRotation> {
    private static readonly pb::MessageParser<Notify_CharacterRotation> _parser = new pb::MessageParser<Notify_CharacterRotation>(() => new Notify_CharacterRotation());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterRotation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterRotation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterRotation(Notify_CharacterRotation other) : this() {
      index_ = other.index_;
      rotationY_ = other.rotationY_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterRotation Clone() {
      return new Notify_CharacterRotation(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "RotationY" field.</summary>
    public const int RotationYFieldNumber = 2;
    private float rotationY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotationY {
      get { return rotationY_; }
      set {
        rotationY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterRotation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterRotation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (RotationY != other.RotationY) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (RotationY != 0F) hash ^= RotationY.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (RotationY != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(RotationY);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (RotationY != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterRotation other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.RotationY != 0F) {
        RotationY = other.RotationY;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 21: {
            RotationY = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterExp : pb::IMessage<Notify_CharacterExp> {
    private static readonly pb::MessageParser<Notify_CharacterExp> _parser = new pb::MessageParser<Notify_CharacterExp>(() => new Notify_CharacterExp());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterExp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterExp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterExp(Notify_CharacterExp other) : this() {
      exp_ = other.exp_;
      oldExp_ = other.oldExp_;
      level_ = other.level_;
      oldLeve_ = other.oldLeve_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterExp Clone() {
      return new Notify_CharacterExp(this);
    }

    /// <summary>Field number for the "Exp" field.</summary>
    public const int ExpFieldNumber = 1;
    private int exp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Exp {
      get { return exp_; }
      set {
        exp_ = value;
      }
    }

    /// <summary>Field number for the "OldExp" field.</summary>
    public const int OldExpFieldNumber = 2;
    private int oldExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OldExp {
      get { return oldExp_; }
      set {
        oldExp_ = value;
      }
    }

    /// <summary>Field number for the "Level" field.</summary>
    public const int LevelFieldNumber = 3;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "OldLeve" field.</summary>
    public const int OldLeveFieldNumber = 4;
    private int oldLeve_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OldLeve {
      get { return oldLeve_; }
      set {
        oldLeve_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterExp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterExp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Exp != other.Exp) return false;
      if (OldExp != other.OldExp) return false;
      if (Level != other.Level) return false;
      if (OldLeve != other.OldLeve) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Exp != 0) hash ^= Exp.GetHashCode();
      if (OldExp != 0) hash ^= OldExp.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (OldLeve != 0) hash ^= OldLeve.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Exp != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Exp);
      }
      if (OldExp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OldExp);
      }
      if (Level != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Level);
      }
      if (OldLeve != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(OldLeve);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Exp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
      }
      if (OldExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OldExp);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (OldLeve != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OldLeve);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterExp other) {
      if (other == null) {
        return;
      }
      if (other.Exp != 0) {
        Exp = other.Exp;
      }
      if (other.OldExp != 0) {
        OldExp = other.OldExp;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.OldLeve != 0) {
        OldLeve = other.OldLeve;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Exp = input.ReadInt32();
            break;
          }
          case 16: {
            OldExp = input.ReadInt32();
            break;
          }
          case 24: {
            Level = input.ReadInt32();
            break;
          }
          case 32: {
            OldLeve = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Notify_CharacterTeamIndex : pb::IMessage<Notify_CharacterTeamIndex> {
    private static readonly pb::MessageParser<Notify_CharacterTeamIndex> _parser = new pb::MessageParser<Notify_CharacterTeamIndex>(() => new Notify_CharacterTeamIndex());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Notify_CharacterTeamIndex> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Proto.BattleServerReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterTeamIndex() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterTeamIndex(Notify_CharacterTeamIndex other) : this() {
      index_ = other.index_;
      teamIndex_ = other.teamIndex_;
      ownerIndex_ = other.ownerIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Notify_CharacterTeamIndex Clone() {
      return new Notify_CharacterTeamIndex(this);
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "TeamIndex" field.</summary>
    public const int TeamIndexFieldNumber = 2;
    private int teamIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamIndex {
      get { return teamIndex_; }
      set {
        teamIndex_ = value;
      }
    }

    /// <summary>Field number for the "OwnerIndex" field.</summary>
    public const int OwnerIndexFieldNumber = 3;
    private int ownerIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OwnerIndex {
      get { return ownerIndex_; }
      set {
        ownerIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Notify_CharacterTeamIndex);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Notify_CharacterTeamIndex other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (TeamIndex != other.TeamIndex) return false;
      if (OwnerIndex != other.OwnerIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (TeamIndex != 0) hash ^= TeamIndex.GetHashCode();
      if (OwnerIndex != 0) hash ^= OwnerIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (TeamIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TeamIndex);
      }
      if (OwnerIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OwnerIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (TeamIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamIndex);
      }
      if (OwnerIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OwnerIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Notify_CharacterTeamIndex other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.TeamIndex != 0) {
        TeamIndex = other.TeamIndex;
      }
      if (other.OwnerIndex != 0) {
        OwnerIndex = other.OwnerIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            TeamIndex = input.ReadInt32();
            break;
          }
          case 24: {
            OwnerIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
